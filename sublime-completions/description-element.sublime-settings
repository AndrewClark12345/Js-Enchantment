{
    "scope": "source.js",

    "completions":
    [
        ["description-Element.scrollTop\tElement", "/*\n\tDescription:\n\tThe Element.scrollTop property gets or sets the number of pixels that the content of an element is scrolled upward. An element's scrollTop is a measurement of the distance of an element's top to its topmost visible content. When an element content does not generate a vertical scrollbar, then its scrollTop value defaults to 0.\n\n\tSyntax:\n\t// Get the number of pixels scrolled\nvar  intElemScrollTop = element.scrollTop;\n// Set the number of pixels scrolled\nelement.scrollTop = intValue;\n*/"],
        ["description-Element.scrollHeight\tElement", "/*\n\tDescription:\n\tThe Element.scrollHeight read-only attribute is a measurement of the height of an element's content, including content not visible on the screen due to overflow. The scrollHeight value is equal to the minimum clientHeight the element would require in order to fit all the content in the viewpoint without using a vertical scrollbar. It includes the element padding but not its margin.\n\n\tSyntax:\n\tvar intElemScrollHeight = document.getElementById(id_attribute_value).scrollHeight;\n*/"],
        ["description-Element.name\tElement", "/*\n\tDescription:\n\tname gets or sets the name property of a DOM object; it only applies to the following elements: <a>, <applet>, <button>, <form>, <frame>, <iframe>, <img>, <input>, <map>, <meta>, <object>, <param>, <select>, and <textarea>.\n\n\tSyntax:\n\tHTMLElement.name = string;\nvar elName = HTMLElement.name;\n\nvar fControl = HTMLFormElement.elementName;\nvar controlCollection = HTMLFormElement.elements.elementName;\n*/"],
        ["description-Element.insertAdjacentHTML()\tElement", "/*\n\tDescription:\n\tinsertAdjacentHTML() parses the specified text as HTML or XML and inserts the resulting nodes into the DOM tree at a specified position. It does not reparse the element it is being used on and thus it does not corrupt the existing elements inside the element. This, and avoiding the extra step of serialization make it much faster than direct innerHTML manipulation.\n\n\tSyntax:\n\telement.insertAdjacentHTML(position, text);\n*/"],
        ["description-Element.attributes\tElement", "/*\n\tDescription:\n\tThe Element.attributes property returns a live collection of all attribute nodes registered to the specified node. It is a NamedNodeMap, not an Array, so it has no Array methods and the Attr nodes' indexes may differ among browsers. To be more specific, attributes is a key/value pair of strings that represents any information regarding that attribute.\n\n\tSyntax:\n\tvar attr = element.attributes;\n*/"],
        ["description-Element.scrollWidth\tElement", "/*\n\tDescription:\n\tThe Element.scrollWidth read–only property returns either the width in pixels of the content of an element or the width of the element itself, whichever is greater. If the element is wider than its content area (for example, if there are scroll bars for scrolling through the content), the scrollWidth is larger than the clientWidth.\n\n\tSyntax:\n\tvar xScrollWidth = element.scrollWidth;\n*/"],
        ["description-Element.clientLeft\tElement", "/*\n\tDescription:\n\tThe width of the left border of an element in pixels. It includes the width of the vertical scrollbar if the text direction of the element is right–to–left and if there is an overflow causing a left vertical scrollbar to be rendered. clientLeft does not include the left margin or the left padding. clientLeft is read-only.\n\n\tSyntax:\n\tvar left = element.clientLeft;\n*/"],
        ["description-Element.scrollLeft\tElement", "/*\n\tDescription:\n\tThe Element.scrollLeft property gets or sets the number of pixels that an element's content is scrolled to the left.\n\n\tSyntax:\n\t// Get the number of pixels scrolled\nvar sLeft = element.scrollLeft;\n// Set the number of pixels scrolled\nelement.scrollLeft = 10;\n*/"],
        ["description-Element.getAttributeNS()\tElement", "/*\n\tDescription:\n\tgetAttributeNS returns the string value of the attribute with the specified namespace and name. If the named attribute does not exist, the value returned will either be null or \"\" (the empty string); see Notes for details.\n\n\tSyntax:\n\tattrVal = element.getAttributeNS(namespace, name)\n*/"],
        ["description-Element.outerHTML\tElement", "/*\n\tDescription:\n\tThe outerHTML attribute of the element DOM interface gets the serialized HTML fragment describing the element including its descendants. It can be set to replace the element with nodes parsed from the given string.\n\n\tSyntax:\n\tvar content = element.outerHTML;\nelement.outerHTML = content;\n*/"],
        ["description-Element.getAttribute()\tElement", "/*\n\tDescription:\n\tgetAttribute() returns the value of a specified attribute on the element. If the given attribute does not exist, the value returned will either be null or \"\" (the empty string); see Notes for details.\n\n\tSyntax:\n\tvar attribute = element.getAttribute(attributeName);\n*/"],
        ["description-Element.onbeforescriptexecute\tElement", "/*\n\tDescription:\n\tFired when the code in a <script> element declared in an HTML document is about to start executing. Does not fire if the element is added dynamically, eg with appendChild().\n\n\tSyntax:\n\tdocument.onbeforescriptexecute = funcRef;\n*/"],
        ["description-Element.clientWidth\tElement", "/*\n\tDescription:\n\tThe Element.clientWidth property is the inner width of an element in pixels. It includes padding but not the vertical scrollbar (if present, if rendered), border or margin.\n\n\tSyntax:\n\tvar intElemClientWidth = element.clientWidth;\n*/"],
        ["description-Element.clientHeight\tElement", "/*\n\tDescription:\n\tThe Element.clientHeight read-only property returns the inner height of an element in pixels, including padding but not the horizontal scrollbar height, border, or margin.\n\n\tSyntax:\n\tvar h = element.clientHeight;\n*/"],
        ["description-Element.onafterscriptexecute\tElement", "/*\n\tDescription:\n\tFired when a static <script> element  finishes executing its script. Does not fire if the element is added dynamically, eg with appendChild().\n\n\tSyntax:\n\tdocument.onafterscriptexecute = funcRef;\n*/"],
        ["description-Element.getClientRects()\tElement", "/*\n\tDescription:\n\tThe Element.getClientRects() method returns a collection of rectangles that indicate the bounding rectangles for each box in a client.\n\n\tSyntax:\n\tvar rectCollection = object.getClientRects();\n*/"],
        ["description-Element.id\tElement", "/*\n\tDescription:\n\tGets or sets the element's identifier (attribute id).\n\n\tSyntax:\n\tvar idStr = element.id; // Get the id.\nelement.id = idStr; // Set the id\n*/"],
        ["description-Element.className\tElement", "/*\n\tDescription:\n\tclassName gets and sets the value of the class attribute of the specified element.\n\n\tSyntax:\n\tvar cName = elementNodeReference.className;\nelementNodeReference.className = cName;\n*/"],
        ["description-Element.getBoundingClientRect()\tElement", "/*\n\tDescription:\n\tThe Element.getBoundingClientRect() method returns a text rectangle object that encloses a group of text rectangles.\n\n\tSyntax:\n\trectObject = object.getBoundingClientRect();\n*/"],
        ["description-Element.hasAttributeNS()\tElement", "/*\n\tDescription:\n\thasAttributeNS returns a boolean value indicating whether the current element has the specified attribute.\n\n\tSyntax:\n\tresult =element.hasAttributeNS(namespace,localName)\n*/"],
        ["description-Element.hasAttribute()\tElement", "/*\n\tDescription:\n\thasAttribute returns a boolean value indicating whether the specified element has the specified attribute or not.\n\n\tSyntax:\n\tvar result = element.hasAttribute(attName);\n*/"],
        ["description-Element.setAttributeNS()\tElement", "/*\n\tDescription:\n\tsetAttributeNS adds a new attribute or changes the value of an attribute with the given namespace and name.\n\n\tSyntax:\n\telement.setAttributeNS(namespace,name,value)\n*/"],
        ["description-Element.clientTop\tElement", "/*\n\tDescription:\n\tThe width of the top border of an element in pixels. It does not include the top margin or padding. clientTop is read-only.\n\n\tSyntax:\n\tvartop = element.clientTop;\n*/"],
        ["description-Element.innerHTML\tElement", "/*\n\tDescription:\n\tinnerHTML sets or gets the HTML syntax describing the element's descendants.\n\n\tSyntax:\n\tvar content = element.innerHTML;\nelement.innerHTML = content;\n*/"],
        ["description-Element.getAttributeNodeNS()\tElement", "/*\n\tDescription:\n\tReturns the Attr node for the attribute with the given namespace and name.\n\n\tSyntax:\n\tattributeNode = element.getAttributeNodeNS(namespace,nodeName)\n*/"],
        ["description-Element.removeAttributeNode()\tElement", "/*\n\tDescription:\n\tremoveAttributeNode removes the specified attribute from the current element.\n\n\tSyntax:\n\tremovedAttr = element.removeAttributeNode(attributeNode)\n*/"],
        ["description-Element.setAttributeNodeNS()\tElement", "/*\n\tDescription:\n\tsetAttributeNodeNS adds a new namespaced attribute node to an element.\n\n\tSyntax:\n\treplacedAttr = element.setAttributeNodeNS(attributeNode)\n*/"],
        ["description-Element.getAttributeNode()\tElement", "/*\n\tDescription:\n\tReturns the specified attribute of the specified element, as an Attr node.\n\n\tSyntax:\n\tvar attrNode = element.getAttributeNode(attrName);\n*/"],
        ["description-Element.setAttribute()\tElement", "/*\n\tDescription:\n\tAdds a new attribute or changes the value of an existing attribute on the specified element.\n\n\tSyntax:\n\telement.setAttribute(name, value);\n*/"],
        ["description-Element.setAttributeNode()\tElement", "/*\n\tDescription:\n\tsetAttributeNode() adds a new Attr node to the specified element.\n\n\tSyntax:\n\tvar replacedAttr = element.setAttributeNode(attribute);\n*/"],
        ["description-Element.removeAttributeNS()\tElement", "/*\n\tDescription:\n\tremoveAttributeNS removes the specified attribute from an element.\n\n\tSyntax:\n\telement.removeAttributeNS(namespace,attrName);\n*/"],
        ["description-Element.classList\tElement", "/*\n\tDescription:\n\tclassList returns a token list of the class attribute of the element.\n\n\tSyntax:\n\tvar elementClasses = elementNodeReference.classList;\n*/"],
        ["description-Element.removeAttribute()\tElement", "/*\n\tDescription:\n\tremoveAttribute removes an attribute from the specified element.\n\n\tSyntax:\n\telement.removeAttribute(attrName);\n*/"],
        ["description-Element.length\tElement", "/*\n\tDescription:\n\tlength returns the number of items in a NodeList.\n\n\tSyntax:\n\tnumItems =nodeList.length\n*/"],
        ["description-Element.tagName\tElement", "/*\n\tDescription:\n\tReturns the name of the element.\n\n\tSyntax:\n\telementName = element.tagName\n*/"],
        ["description-scrollTop\tElement", "/*\n\tDescription:\n\tThe Element.scrollTop property gets or sets the number of pixels that the content of an element is scrolled upward. An element's scrollTop is a measurement of the distance of an element's top to its topmost visible content. When an element content does not generate a vertical scrollbar, then its scrollTop value defaults to 0.\n\n\tSyntax:\n\t// Get the number of pixels scrolled\nvar  intElemScrollTop = element.scrollTop;\n// Set the number of pixels scrolled\nelement.scrollTop = intValue;\n*/"],
        ["description-scrollHeight\tElement", "/*\n\tDescription:\n\tThe Element.scrollHeight read-only attribute is a measurement of the height of an element's content, including content not visible on the screen due to overflow. The scrollHeight value is equal to the minimum clientHeight the element would require in order to fit all the content in the viewpoint without using a vertical scrollbar. It includes the element padding but not its margin.\n\n\tSyntax:\n\tvar intElemScrollHeight = document.getElementById(id_attribute_value).scrollHeight;\n*/"],
        ["description-name\tElement", "/*\n\tDescription:\n\tname gets or sets the name property of a DOM object; it only applies to the following elements: <a>, <applet>, <button>, <form>, <frame>, <iframe>, <img>, <input>, <map>, <meta>, <object>, <param>, <select>, and <textarea>.\n\n\tSyntax:\n\tHTMLElement.name = string;\nvar elName = HTMLElement.name;\n\nvar fControl = HTMLFormElement.elementName;\nvar controlCollection = HTMLFormElement.elements.elementName;\n*/"],
        ["description-insertAdjacentHTML()\tElement", "/*\n\tDescription:\n\tinsertAdjacentHTML() parses the specified text as HTML or XML and inserts the resulting nodes into the DOM tree at a specified position. It does not reparse the element it is being used on and thus it does not corrupt the existing elements inside the element. This, and avoiding the extra step of serialization make it much faster than direct innerHTML manipulation.\n\n\tSyntax:\n\telement.insertAdjacentHTML(position, text);\n*/"],
        ["description-attributes\tElement", "/*\n\tDescription:\n\tThe Element.attributes property returns a live collection of all attribute nodes registered to the specified node. It is a NamedNodeMap, not an Array, so it has no Array methods and the Attr nodes' indexes may differ among browsers. To be more specific, attributes is a key/value pair of strings that represents any information regarding that attribute.\n\n\tSyntax:\n\tvar attr = element.attributes;\n*/"],
        ["description-scrollWidth\tElement", "/*\n\tDescription:\n\tThe Element.scrollWidth read–only property returns either the width in pixels of the content of an element or the width of the element itself, whichever is greater. If the element is wider than its content area (for example, if there are scroll bars for scrolling through the content), the scrollWidth is larger than the clientWidth.\n\n\tSyntax:\n\tvar xScrollWidth = element.scrollWidth;\n*/"],
        ["description-clientLeft\tElement", "/*\n\tDescription:\n\tThe width of the left border of an element in pixels. It includes the width of the vertical scrollbar if the text direction of the element is right–to–left and if there is an overflow causing a left vertical scrollbar to be rendered. clientLeft does not include the left margin or the left padding. clientLeft is read-only.\n\n\tSyntax:\n\tvar left = element.clientLeft;\n*/"],
        ["description-scrollLeft\tElement", "/*\n\tDescription:\n\tThe Element.scrollLeft property gets or sets the number of pixels that an element's content is scrolled to the left.\n\n\tSyntax:\n\t// Get the number of pixels scrolled\nvar sLeft = element.scrollLeft;\n// Set the number of pixels scrolled\nelement.scrollLeft = 10;\n*/"],
        ["description-getAttributeNS()\tElement", "/*\n\tDescription:\n\tgetAttributeNS returns the string value of the attribute with the specified namespace and name. If the named attribute does not exist, the value returned will either be null or \"\" (the empty string); see Notes for details.\n\n\tSyntax:\n\tattrVal = element.getAttributeNS(namespace, name)\n*/"],
        ["description-outerHTML\tElement", "/*\n\tDescription:\n\tThe outerHTML attribute of the element DOM interface gets the serialized HTML fragment describing the element including its descendants. It can be set to replace the element with nodes parsed from the given string.\n\n\tSyntax:\n\tvar content = element.outerHTML;\nelement.outerHTML = content;\n*/"],
        ["description-getAttribute()\tElement", "/*\n\tDescription:\n\tgetAttribute() returns the value of a specified attribute on the element. If the given attribute does not exist, the value returned will either be null or \"\" (the empty string); see Notes for details.\n\n\tSyntax:\n\tvar attribute = element.getAttribute(attributeName);\n*/"],
        ["description-onbeforescriptexecute\tElement", "/*\n\tDescription:\n\tFired when the code in a <script> element declared in an HTML document is about to start executing. Does not fire if the element is added dynamically, eg with appendChild().\n\n\tSyntax:\n\tdocument.onbeforescriptexecute = funcRef;\n*/"],
        ["description-clientWidth\tElement", "/*\n\tDescription:\n\tThe Element.clientWidth property is the inner width of an element in pixels. It includes padding but not the vertical scrollbar (if present, if rendered), border or margin.\n\n\tSyntax:\n\tvar intElemClientWidth = element.clientWidth;\n*/"],
        ["description-clientHeight\tElement", "/*\n\tDescription:\n\tThe Element.clientHeight read-only property returns the inner height of an element in pixels, including padding but not the horizontal scrollbar height, border, or margin.\n\n\tSyntax:\n\tvar h = element.clientHeight;\n*/"],
        ["description-onafterscriptexecute\tElement", "/*\n\tDescription:\n\tFired when a static <script> element  finishes executing its script. Does not fire if the element is added dynamically, eg with appendChild().\n\n\tSyntax:\n\tdocument.onafterscriptexecute = funcRef;\n*/"],
        ["description-getClientRects()\tElement", "/*\n\tDescription:\n\tThe Element.getClientRects() method returns a collection of rectangles that indicate the bounding rectangles for each box in a client.\n\n\tSyntax:\n\tvar rectCollection = object.getClientRects();\n*/"],
        ["description-id\tElement", "/*\n\tDescription:\n\tGets or sets the element's identifier (attribute id).\n\n\tSyntax:\n\tvar idStr = element.id; // Get the id.\nelement.id = idStr; // Set the id\n*/"],
        ["description-className\tElement", "/*\n\tDescription:\n\tclassName gets and sets the value of the class attribute of the specified element.\n\n\tSyntax:\n\tvar cName = elementNodeReference.className;\nelementNodeReference.className = cName;\n*/"],
        ["description-getBoundingClientRect()\tElement", "/*\n\tDescription:\n\tThe Element.getBoundingClientRect() method returns a text rectangle object that encloses a group of text rectangles.\n\n\tSyntax:\n\trectObject = object.getBoundingClientRect();\n*/"],
        ["description-hasAttributeNS()\tElement", "/*\n\tDescription:\n\thasAttributeNS returns a boolean value indicating whether the current element has the specified attribute.\n\n\tSyntax:\n\tresult =element.hasAttributeNS(namespace,localName)\n*/"],
        ["description-hasAttribute()\tElement", "/*\n\tDescription:\n\thasAttribute returns a boolean value indicating whether the specified element has the specified attribute or not.\n\n\tSyntax:\n\tvar result = element.hasAttribute(attName);\n*/"],
        ["description-setAttributeNS()\tElement", "/*\n\tDescription:\n\tsetAttributeNS adds a new attribute or changes the value of an attribute with the given namespace and name.\n\n\tSyntax:\n\telement.setAttributeNS(namespace,name,value)\n*/"],
        ["description-clientTop\tElement", "/*\n\tDescription:\n\tThe width of the top border of an element in pixels. It does not include the top margin or padding. clientTop is read-only.\n\n\tSyntax:\n\tvartop = element.clientTop;\n*/"],
        ["description-innerHTML\tElement", "/*\n\tDescription:\n\tinnerHTML sets or gets the HTML syntax describing the element's descendants.\n\n\tSyntax:\n\tvar content = element.innerHTML;\nelement.innerHTML = content;\n*/"],
        ["description-getAttributeNodeNS()\tElement", "/*\n\tDescription:\n\tReturns the Attr node for the attribute with the given namespace and name.\n\n\tSyntax:\n\tattributeNode = element.getAttributeNodeNS(namespace,nodeName)\n*/"],
        ["description-removeAttributeNode()\tElement", "/*\n\tDescription:\n\tremoveAttributeNode removes the specified attribute from the current element.\n\n\tSyntax:\n\tremovedAttr = element.removeAttributeNode(attributeNode)\n*/"],
        ["description-setAttributeNodeNS()\tElement", "/*\n\tDescription:\n\tsetAttributeNodeNS adds a new namespaced attribute node to an element.\n\n\tSyntax:\n\treplacedAttr = element.setAttributeNodeNS(attributeNode)\n*/"],
        ["description-getAttributeNode()\tElement", "/*\n\tDescription:\n\tReturns the specified attribute of the specified element, as an Attr node.\n\n\tSyntax:\n\tvar attrNode = element.getAttributeNode(attrName);\n*/"],
        ["description-setAttribute()\tElement", "/*\n\tDescription:\n\tAdds a new attribute or changes the value of an existing attribute on the specified element.\n\n\tSyntax:\n\telement.setAttribute(name, value);\n*/"],
        ["description-setAttributeNode()\tElement", "/*\n\tDescription:\n\tsetAttributeNode() adds a new Attr node to the specified element.\n\n\tSyntax:\n\tvar replacedAttr = element.setAttributeNode(attribute);\n*/"],
        ["description-removeAttributeNS()\tElement", "/*\n\tDescription:\n\tremoveAttributeNS removes the specified attribute from an element.\n\n\tSyntax:\n\telement.removeAttributeNS(namespace,attrName);\n*/"],
        ["description-classList\tElement", "/*\n\tDescription:\n\tclassList returns a token list of the class attribute of the element.\n\n\tSyntax:\n\tvar elementClasses = elementNodeReference.classList;\n*/"],
        ["description-removeAttribute()\tElement", "/*\n\tDescription:\n\tremoveAttribute removes an attribute from the specified element.\n\n\tSyntax:\n\telement.removeAttribute(attrName);\n*/"],
        ["description-length\tElement", "/*\n\tDescription:\n\tlength returns the number of items in a NodeList.\n\n\tSyntax:\n\tnumItems =nodeList.length\n*/"],
        ["description-tagName\tElement", "/*\n\tDescription:\n\tReturns the name of the element.\n\n\tSyntax:\n\telementName = element.tagName\n*/"]
    ]
}