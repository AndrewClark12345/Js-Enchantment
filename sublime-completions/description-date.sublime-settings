{
	"scope": "source.js",

	"completions":
	[
		["description-Date.prototype.toLocaleDateString()", "/*\n\tDescription:\n\tThe toLocaleDateString() method returns a string with a language sensitive representation of the date portion of this date. The new locales and options arguments let applications specify the language whose formatting conventions should be used and allow to customize the behavior of the function. In older implementations, which ignore the locales and options arguments, the locale used and the form of the string returned are entirely implementation dependent.\n\n\tSyntax:\n\tdateObj.toLocaleDateString([locales [, options]])\n*/"],
		["description-Date.prototype.toLocaleTimeString()", "/*\n\tDescription:\n\tThe toLocaleTimeString() method returns a string with a language sensitive representation of the time portion of this date. The new locales and options arguments let applications specify the language whose formatting conventions should be used and customize the behavior of the function. In older implementations, which ignore the locales and options arguments, the locale used and the form of the string returned are entirely implementation dependent.\n\n\tSyntax:\n\tdateObj.toLocaleTimeString([locales [, options]])\n*/"],
		["description-Date.prototype.toLocaleString()", "/*\n\tDescription:\n\tThe toLocaleString() method returns a string with a language sensitive representation of this date. The new locales and options arguments let applications specify the language whose formatting conventions should be used and customize the behavior of the function. In older implementations, which ignore the locales and options arguments, the locale used and the form of the string returned are entirely implementation dependent.\n\n\tSyntax:\n\tdateObj.toLocaleString([locales [, options]])\n*/"],
		["description-Date", "/*\n\tDescription:\n\tCreates a JavaScriptÂ Date instance that represents a single moment in time. Date objects are based on a time value that is the number of milliseconds since 1 January, 1970 UTC.\n\n\tSyntax:\n\tnew Date();\n\tnew Date(value);\n\tnew Date(dateString);\n\tnew Date(year, month, day, hour, minute, second, millisecond);\n*/"],
		["description-Date.prototype.setUTCHours()", "/*\n\tDescription:\n\tThe setUTCHours() method sets the hours for a specified date according to universal time, and returns the number of milliseconds since 1 January 1970 00:00:00 UTC until the time represented by the updated Date instance.\n\n\tSyntax:\n\tdateObj.setUTCHours(hoursValue[, minutesValue[, secondsValue[, msValue]]])\n*/"],
		["description-Date.prototype.setHours()", "/*\n\tDescription:\n\tThe setHours() method sets the hours for a specified date according to local time, and returns the number of milliseconds since 1 January 1970 00:00:00 UTC until the time represented by the updated Date instance.\n\n\tSyntax:\n\tdateObj.setHours(hoursValue[, minutesValue[, secondsValue[, msValue]]])\n*/"],
		["description-Date.prototype.toISOString()", "/*\n\tDescription:\n\tThe toISOString() method returns a string in ISO format (ISO 8601 Extended Format), which can be described as follows: YYYY-MM-DDTHH:mm:ss.sssZ. The timezone is always UTC as denoted by the suffix \"Z\".\n\n\tSyntax:\n\tdateObj.toISOString()\n*/"],
		["description-Date.UTC()", "/*\n\tDescription:\n\tThe Date.UTC() method accepts the same parameters as the longest form of the constructor, and returns the number of milliseconds in a Date object since January 1, 1970, 00:00:00, universal time.\n\n\tSyntax:\n\tDate.UTC(year,month[,date[,hrs[,min[,sec[,ms]]]]])\n*/"],
		["description-Date.prototype.getUTCMonth()", "/*\n\tDescription:\n\tThe getUTCMonth() method returns the month in the specified date according to universal time, as a zero-based value (where zero indicates the first month of the year).\n\n\tSyntax:\n\tdateObj.getUTCMonth()\n*/"],
		["description-Date.prototype.getMonth()", "/*\n\tDescription:\n\tThe getMonth() method returns the month in the specified date according to local time, as a zero-based value (where zero indicates the first month of the year).\n\n\tSyntax:\n\tdateObj.getMonth()\n*/"],
		["description-Date.prototype.setUTCFullYear()", "/*\n\tDescription:\n\tThe setUTCFullYear() method sets the full year for a specified date according to universal time.\n\n\tSyntax:\n\tdateObj.setUTCFullYear(yearValue[, monthValue[, dayValue]])\n*/"],
		["description-Date.prototype.setUTCMinutes()", "/*\n\tDescription:\n\tThe setUTCMinutes() method sets the minutes for a specified date according to universal time.\n\n\tSyntax:\n\tdateObj.setUTCMinutes(minutesValue[, secondsValue[, msValue]])\n*/"],
		["description-Date.prototype.setUTCMilliseconds()", "/*\n\tDescription:\n\tThe setUTCMilliseconds() method sets the milliseconds for a specified date according to universal time.\n\n\tSyntax:\n\tdateObj.setUTCMilliseconds(millisecondsValue)\n*/"],
		["description-Date.prototype.setTime()", "/*\n\tDescription:\n\tThe setTime() method sets the Date object to the time represented by a number of milliseconds since January 1, 1970, 00:00:00 UTC.\n\n\tSyntax:\n\tdateObj.setTime(timeValue)\n*/"],
		["description-Date.parse()", "/*\n\tDescription:\n\tThe Date.parse() method parses a string representation of a date, and returns the number of milliseconds since January 1, 1970, 00:00:00 UTC.\n\n\tSyntax:\n\tDate.parse(dateString)\n*/"],
		["description-Date.prototype.getUTCDay()", "/*\n\tDescription:\n\tThe getUTCDay() method returns the day of the week for the specified date according to universal time, where 0 represents Sunday.\n\n\tSyntax:\n\tdateObj.getUTCDay()\n*/"],
		["description-Date.prototype.setFullYear()", "/*\n\tDescription:\n\tThe setFullYear() method sets the full year for a specified date according to local time.\n\n\tSyntax:\n\tdateObj.setFullYear(yearValue[, monthValue[, dayValue]])\n*/"],
		["description-Date.prototype.setMinutes()", "/*\n\tDescription:\n\tThe setMinutes() method sets the minutes for a specified date according to local time.\n\n\tSyntax:\n\tdateObj.setMinutes(minutesValue[, secondsValue[, msValue]])\n*/"],
		["description-Date.prototype.setMilliseconds()", "/*\n\tDescription:\n\tThe setMilliseconds() method sets the milliseconds for a specified date according to local time.\n\n\tSyntax:\n\tdateObj.setMilliseconds(millisecondsValue)\n*/"],
		["description-Date.prototype.getUTCMilliseconds()", "/*\n\tDescription:\n\tThe getUTCMilliseconds() method returns the milliseconds in the specified date according to universal time.\n\n\tSyntax:\n\tdateObj.getUTCMilliseconds()\n*/"],
		["description-Date.prototype.setUTCSeconds()", "/*\n\tDescription:\n\tThe setUTCSeconds() method sets the seconds for a specified date according to universal time.\n\n\tSyntax:\n\tdateObj.setUTCSeconds(secondsValue[, msValue])\n*/"],
		["description-Date.prototype.getTimezoneOffset()", "/*\n\tDescription:\n\tThe getTimezoneOffset() method returns the time-zone offset from UTC, in minutes, for the current locale.\n\n\tSyntax:\n\tdateObj.getTimezoneOffset()\n*/"],
		["description-Date.prototype.getTime()", "/*\n\tDescription:\n\tThe getTime() method returns the numeric value corresponding to the time for the specified date according to universal time.\n\n\tSyntax:\n\tdateObj.getTime()\n*/"],
		["description-Date.prototype.toDateString()", "/*\n\tDescription:\n\tThe toDateString() method returns the date portion of a Date object in human readable form in American English.\n\n\tSyntax:\n\tdateObj.toDateString()\n*/"],
		["description-Date.prototype.toTimeString()", "/*\n\tDescription:\n\tThe toTimeString() method returns the time portion of a Date object in human readable form in American English.\n\n\tSyntax:\n\tdateObj.toTimeString()\n*/"],
		["description-Date.prototype.getDay()", "/*\n\tDescription:\n\tThe getDay() method returns the day of the week for the specified date according to local time, where 0 represents Sunday.\n\n\tSyntax:\n\tdateObj.getDay()\n*/"],
		["description-Date.prototype.setUTCMonth()", "/*\n\tDescription:\n\tThe setUTCMonth() method sets the month for a specified date according to universal time.\n\n\tSyntax:\n\tdateObj.setUTCMonth(monthValue[, dayValue])\n*/"],
		["description-Date.prototype.getMilliseconds()", "/*\n\tDescription:\n\tThe getMilliseconds() method returns the milliseconds in the specified date according to local time.\n\n\tSyntax:\n\tdateObj.getMilliseconds()\n*/"],
		["description-Date.prototype.setSeconds()", "/*\n\tDescription:\n\tThe setSeconds() method sets the seconds for a specified date according to local time.\n\n\tSyntax:\n\tdateObj.setSeconds(secondsValue[, msValue])\n*/"],
		["description-Date.prototype.setUTCDate()", "/*\n\tDescription:\n\tThe setUTCDate() method sets the day of the month for a specified date according to universal time.\n\n\tSyntax:\n\tdateObj.setUTCDate(dayValue)\n*/"],
		["description-Date.prototype.getUTCDate()", "/*\n\tDescription:\n\tThe getUTCDate() method returns the day of the month for the specified date according to universal time.\n\n\tSyntax:\n\tdateObj.getUTCDate()\n*/"],
		["description-Date.prototype.getUTCSeconds()", "/*\n\tDescription:\n\tThe getUTCSeconds() method returns the seconds in the specified date according to universal time.\n\n\tSyntax:\n\tdateObj.getUTCSeconds()\n*/"],
		["description-Date.prototype.getUTCFullYear()", "/*\n\tDescription:\n\tThe getUTCFullYear() method returns the year of the specified date according to universal time.\n\n\tSyntax:\n\tdateObj.getUTCFullYear()\n*/"],
		["description-Date.prototype.getUTCMinutes()", "/*\n\tDescription:\n\tThe getUTCMinutes() method returns the minutes in the specified date according to universal time.\n\n\tSyntax:\n\tdateObj.getUTCMinutes()\n*/"],
		["description-Date.prototype.setMonth()", "/*\n\tDescription:\n\tThe setMonth() method sets the month for a specified date according to local time.\n\n\tSyntax:\n\tdateObj.setMonth(monthValue[, dayValue])\n*/"],
		["description-Date.prototype.getUTCHours()", "/*\n\tDescription:\n\tThe getUTCHours() method returns the hour for the specified date, according to universal time.\n\n\tSyntax:\n\tdateObj.getUTCHours()\n*/"],
		["description-Date.prototype.setDate()", "/*\n\tDescription:\n\tThe setDate() method sets the day of the month for a specified date according to local time.\n\n\tSyntax:\n\tdateObj.setDate(dayValue)\n*/"],
		["description-Date.prototype.getDate()", "/*\n\tDescription:\n\tThe getDate() method returns the day of the month for the specified date according to local time.\n\n\tSyntax:\n\tdateObj.getDate()\n*/"],
		["description-Date.prototype.getFullYear()", "/*\n\tDescription:\n\tThe getFullYear() method returns the year of the specified date according to local time.\n\n\tSyntax:\n\tdateObj.getFullYear()\n*/"],
		["description-Date.prototype.getMinutes()", "/*\n\tDescription:\n\tThe getMinutes() method returns the minutes in the specified date according to local time.\n\n\tSyntax:\n\tdateObj.getMinutes()\n*/"],
		["description-Date.prototype.getSeconds()", "/*\n\tDescription:\n\tThe getSeconds() method returns the seconds in the specified date according to local time.\n\n\tSyntax:\n\tdateObj.getSeconds()\n*/"],
		["description-Date.now()", "/*\n\tDescription:\n\tThe Date.now() method returns the number of milliseconds elapsed since 1 January 1970 00:00:00 UTC.\n\n\tSyntax:\n\tvar timeInMs = Date.now();\n*/"],
		["description-Date.prototype.getHours()", "/*\n\tDescription:\n\tThe getHours() method returns the hour for the specified date, according to local time.\n\n\tSyntax:\n\tdateObj.getHours()\n*/"],
		["description-Date.prototype.toString()", "/*\n\tDescription:\n\tThe toString() method returns a string representing the specified Date object.\n\n\tSyntax:\n\tdateObj.toString()\n*/"],
		["description-Date.prototype.toJSON()", "/*\n\tDescription:\n\tThe toJSON() method returns a JSON representation of the Date object.\n\n\tSyntax:\n\tdateObj.toJSON()\n*/"],
		["description-Date.prototype.valueOf()", "/*\n\tDescription:\n\tThe valueOf() method returns the primitive value of a Date object.\n\n\tSyntax:\n\tdateObj.valueOf()\n*/"]
	]
}