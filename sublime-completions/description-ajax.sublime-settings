{
  "scope": "source.js",

  "completions":
  [
    ["description-XMLHttpRequest.responseXML\tXMLHttpRequest", "/*\n\tDescription:\n\tThe XMLHttpRequest.responseXML property returns a Document containing the response to the request, or null if the request was unsuccessful, has not yet been sent, or if the response cannot be parsed as XML or HTML. The response is parsed as if it were a text/xml stream. When the responseType is set to \"document\" and the request has been made asynchronously, the response is parsed as a text/html stream.\n\n\tIf the server doesn't specify the Content-Type header as text/xml or application/xml, you can use overrideMimeType() to force XMLHttpRequest to parse it as XML anyway.\n\n\tSyntax:\n\tvar xhr = new XMLHttpRequest();\n\txhr.open('GET', '/server', true);\n\t\n\t// If specified, responseType must be empty string or \"document\"\n\txhr.responseType = 'document';\n\t\n\t// overrideMimeType() can be used to force the response to be parsed as XML\n\txhr.overrideMimeType('text/xml');\n\t\n\txhr.onload = function () {\n\t    if (xhr.readyState === xhr.DONE) {\n\t        if (xhr.status === 200) {\n\t            console.log(xhr.response);\n\t            console.log(xhr.responseXML);\n\t        }\n\t    }\n\t};\n\t\n\txhr.send(null);\n*/"],
    ["description-XMLHttpRequest.readyState\tXMLHttpRequest", "/*\n\tDescription:\n\tThe XMLHttpRequest.readyState property returns the state an XMLHttpRequest client is in. An XHR client exists in one of the following states:\n\t\t0 - UNSENT\n\t\t1 - OPENED\n\t\t2 - HEADERS_RECEIVED\n\t\t3 - LOADING\n\t\t4 - DONE\n\t\n\n\tSyntax:\n\tvar xhr = new XMLHttpRequest();\n\tconsole.log('UNSENT', xhr.readyState); // readyState will be 0\n\t\n\txhr.open('GET', '/api', true);\n\tconsole.log('OPENED', xhr.readyState); // readyState will be 1\n\t\n\txhr.onprogress = function () {\n\t    console.log('LOADING', xhr.readyState); // readyState will be 3\n\t};\n\t\n\txhr.onload = function () {\n\t    console.log('DONE', xhr.readyState); // readyState will be 4\n\t};\n\t\n\txhr.send(null);\n*/"],
    ["description-XMLHttpRequest.timeout\tXMLHttpRequest", "/*\n\tDescription:\n\tThe XMLHttpRequest.timeout property is an unsigned long representing the number of milliseconds a request can take before automatically being terminated. The default value is 0, which means there is no timeout. Timeout shouldn't be used for synchronous XMLHttpRequests requests used in a document environment or it will throw an InvalidAccessError exception. When a timeout happens, a timeout event is fired.\n\n\tIn Internet Explorer, the timeout property may be set only after calling the open() method and before calling the send() method.\n\n\tSyntax:\n\tvar xhr = new XMLHttpRequest();\n\txhr.open('GET', '/server', true);\n\t\n\txhr.timeout = 2000; // time in milliseconds\n\t\n\txhr.onload = function () {\n\t  // Request finished. Do processing here.\n\t};\n\t\n\txhr.ontimeout = function (e) {\n\t  // XMLHttpRequest timed out. Do something here.\n\t};\n\t\n\txhr.send(null);\n*/"],
    ["description-XMLHttpRequest.responseText\tXMLHttpRequest", "/*\n\tDescription:\n\tThe XMLHttpRequest.responseText property returns a DOMString that contains the response to the request as text, or null if the request was unsuccessful or has not yet been sent. The responseText property will have the partial response as it arrives even before the request is complete. If responseType is set to anything other than the empty string or \"text\", accessing responseText will throw InvalidStateError exception.\n\n\tSyntax:\n\tvar xhr = new XMLHttpRequest();\n\txhr.open('GET', '/server', true);\n\t\n\t// If specified, responseType must be empty string or \"text\"\n\txhr.responseType = 'text';\n\t\n\txhr.onload = function () {\n\t    if (xhr.readyState === xhr.DONE) {\n\t        if (xhr.status === 200) {\n\t            console.log(xhr.response);\n\t            console.log(xhr.responseText);\n\t        }\n\t    }\n\t};\n\t\n\txhr.send(null);\n*/"],
    ["description-XMLHttpRequest.send()\tXMLHttpRequest", "/*\n\tDescription:\n\tSends the request. If the request is asynchronous (which is the default), this method returns as soon as the request is sent. If the request is synchronous, this method doesn't return until the response has arrived.\n\n\tIf the data is a Document, it is serialized before being sent. When sending a Document, versions of Firefox prior to version 3 always send the request using UTF-8 encoding; Firefox 3 properly sends the document using the encoding specified by body.xmlEncoding, or UTF-8 if no encoding is specified.\n\n\tIf it's an nsIInputStream, it must be compatible with nsIUploadChannel's setUploadStream()method. In that case, a Content-Length header is added to the request, with its value obtained using nsIInputStream's available()method. Any headers included at the top of the stream are treated as part of the message body. The stream's MIMEtype should be specified by setting the Content-Type header using the setRequestHeader() method prior to calling send().\n\n\tThe best way to send binary content (like in files upload) is using an ArrayBufferView or Blobs in conjuncton with the send() method. However, if you want to send a stringifiable raw data, use the sendAsBinary() method instead, or the StringView Non native typed arrays superclass.\n*/"],
    ["description-XMLHttpRequest\tXMLHttpRequest", "/*\n\tDescription:\n\tXMLHttpRequest is an API that provides client functionality for transferring data between a client and a server. It provides an easy way to retrieve data from a URL without having to do a full page refresh. This enables a Web page to update just a part of the page without disrupting what the user is doing. XMLHttpRequest is used heavily in AJAX programming.\n\n\tXMLHttpRequest was originally designed by Microsoft and adopted by Mozilla, Apple, and Google. It's now being standardized at the WHATWG. Despite its name, XMLHttpRequest can be used to retrieve any type of data, not just XML, and it supports protocols other than HTTP (including file and ftp).\n\n\tSyntax:\n\tvar myRequest = new XMLHttpRequest();\n*/"],
    ["description-XMLHttpRequest.withCredentials\tXMLHttpRequest", "/*\n\tDescription:\n\tThe XMLHttpRequest.withCredentials property is a Boolean that indicates whether or not cross-site Access-Control requests should be made using credentials such as cookies, authorization headers or TLS client certificates. Setting withCredentials has no effect on same-site requests.\n\n\tIn addition, this flag is also used to indicate when cookies are to be ignored in the response. The default is false. The third-party cookies obtained by setting withCredentials to true will still honor same-origin policy and hence can not be accessed by the requesting script through document.cookie or from response headers.\n*/"],
    ["description-XMLHttpRequest.responseType\tXMLHttpRequest", "/*\n\tDescription:\n\tThe XMLHttpRequest.responseType property is an enumerated value that returns the type of the response. It also lets the author change the response type to one \"arraybuffer\", \"blob\", \"document\", \"json\", or \"text\". If an empty string is set as the value of responseType, it is assumed as type \"text\". Setting the value of responseType to \"document\" is ignored if done in a  Worker environment.\n*/"],
    ["description-XMLHttpRequest.onreadystatechange\tXMLHttpRequest", "/*\n\tDescription:\n\tThe XMLHttpRequest.onreadystatechange property contains the event handler to be called when the readystatechange event is fired, that is every time the readyState property of the XMLHttpRequest changes. The callback is called from the user interface thread.\n\n\tThe readystatechange event will not be fired when an XMLHttpRequest request is canceled with the abort() method.\n\n\tSyntax:\n\tXMLHttpRequest.onreadystatechange = callback;\n*/"],
    ["description-XMLHttpRequest.getResponseHeader()\tXMLHttpRequest", "/*\n\tDescription:\n\tReturns the string containing the text of the specified header, or null if either the response has not yet been received or the header doesn't exist in the response. If there are multiple response headers with the same name, then their values are returned as a single concatenated string, where each value is separated from the previous one by a pair of comma and space. The getResponseHeader() method returns the value as a UTF byte sequence.\n*/"],
    ["description-XMLHttpRequest.setRequestHeader()\tXMLHttpRequest", "/*\n\tDescription:\n\tSets the value of an HTTP request header. You must call setRequestHeader()after open(), but before send(). If this method is called several times with the same header, the values are merged into one single request header.\n\n\tFor security reasons, some headers can only be controlled by the user agent. These headers include the forbidden header names  and forbidden response header names.\n*/"],
    ["description-XMLHttpRequest.statusText\tXMLHttpRequest", "/*\n\tDescription:\n\tThe XMLHttpRequest.statusText property returns a DOMString containing the response's status message as returned by the HTTP server. Unlike XMLHTTPRequest.status, this includes the text of the response status, such as \"OK\" or \"Not Found\". If the fetch operation hasn't finished yet, value of statusText will be an empty string.\n*/"],
    ["description-XMLHttpRequest.response\tXMLHttpRequest", "/*\n\tDescription:\n\tThe XMLHttpRequest.response property returns the response's body. It can be of the type ArrayBuffer, Blob, Document, JavaScript object, or a DOMString, depending of the value of XMLHttpRequest.responseType property. response is null if the request is not complete or was not successful.\n*/"],
    ["description-XMLHttpRequest.status\tXMLHttpRequest", "/*\n\tDescription:\n\tThe XMLHttpRequest.status property returns an unsigned short with the status of the response of the request. These are the standard HTTP status codes. For example, status is 200 denotes a successful request. Before the request is complete, the value of status will be 0.\n*/"],
    ["description-XMLHttpRequest.overrideMimeType()\tXMLHttpRequest", "/*\n\tDescription:\n\tOverrides the MIME type returned by the server. This may be used, for example, to force a stream to be treated and parsed as text/xml, even if the server does not report it as such. This method must be called before send().\n*/"],
    ["description-XMLHttpRequest.getAllResponseHeaders()\tXMLHttpRequest", "/*\n\tDescription:\n\tReturns all the response headers, separated by CRLF, as a string, or null if no response has been received. Note: For multipart requests, this returns the headers from the current part of the request, not from the original channel.\n*/"],
    ["description-XMLHttpRequest.upload\tXMLHttpRequest", "/*\n\tDescription:\n\tThe XMLHttpRequest.upload property returns an XMLHttpRequestUpload object, representing the upload process. It is an opaque object, but being an XMLHttpRequestEventTarget event listeners can be set on it to track its process.\n*/"],
    ["description-XMLHttpRequest.open()\tXMLHttpRequest", "/*\n\tDescription:\n\tInitializes a request. This method is to be used from JavaScript code; to initialize a request from native code, use openRequest() instead.\n*/"],
    ["description-XMLHttpRequest.abort()\tXMLHttpRequest", "/*\n\tDescription:\n\tAborts the request if it has already been sent.\n*/"],
    ["description-responseXML\tXMLHttpRequest", "/*\n\tDescription:\n\tThe XMLHttpRequest.responseXML property returns a Document containing the response to the request, or null if the request was unsuccessful, has not yet been sent, or if the response cannot be parsed as XML or HTML. The response is parsed as if it were a text/xml stream. When the responseType is set to \"document\" and the request has been made asynchronously, the response is parsed as a text/html stream.\n\n\tIf the server doesn't specify the Content-Type header as text/xml or application/xml, you can use overrideMimeType() to force XMLHttpRequest to parse it as XML anyway.\n\n\tSyntax:\n\tvar xhr = new XMLHttpRequest();\n\txhr.open('GET', '/server', true);\n\t\n\t// If specified, responseType must be empty string or \"document\"\n\txhr.responseType = 'document';\n\t\n\t// overrideMimeType() can be used to force the response to be parsed as XML\n\txhr.overrideMimeType('text/xml');\n\t\n\txhr.onload = function () {\n\t    if (xhr.readyState === xhr.DONE) {\n\t        if (xhr.status === 200) {\n\t            console.log(xhr.response);\n\t            console.log(xhr.responseXML);\n\t        }\n\t    }\n\t};\n\t\n\txhr.send(null);\n*/"],
    ["description-readyState\tXMLHttpRequest", "/*\n\tDescription:\n\tThe XMLHttpRequest.readyState property returns the state an XMLHttpRequest client is in. An XHR client exists in one of the following states:\n\t\t0 - UNSENT\n\t\t1 - OPENED\n\t\t2 - HEADERS_RECEIVED\n\t\t3 - LOADING\n\t\t4 - DONE\n\t\n\n\tSyntax:\n\tvar xhr = new XMLHttpRequest();\n\tconsole.log('UNSENT', xhr.readyState); // readyState will be 0\n\t\n\txhr.open('GET', '/api', true);\n\tconsole.log('OPENED', xhr.readyState); // readyState will be 1\n\t\n\txhr.onprogress = function () {\n\t    console.log('LOADING', xhr.readyState); // readyState will be 3\n\t};\n\t\n\txhr.onload = function () {\n\t    console.log('DONE', xhr.readyState); // readyState will be 4\n\t};\n\t\n\txhr.send(null);\n*/"],
    ["description-timeout\tXMLHttpRequest", "/*\n\tDescription:\n\tThe XMLHttpRequest.timeout property is an unsigned long representing the number of milliseconds a request can take before automatically being terminated. The default value is 0, which means there is no timeout. Timeout shouldn't be used for synchronous XMLHttpRequests requests used in a document environment or it will throw an InvalidAccessError exception. When a timeout happens, a timeout event is fired.\n\n\tIn Internet Explorer, the timeout property may be set only after calling the open() method and before calling the send() method.\n\n\tSyntax:\n\tvar xhr = new XMLHttpRequest();\n\txhr.open('GET', '/server', true);\n\t\n\txhr.timeout = 2000; // time in milliseconds\n\t\n\txhr.onload = function () {\n\t  // Request finished. Do processing here.\n\t};\n\t\n\txhr.ontimeout = function (e) {\n\t  // XMLHttpRequest timed out. Do something here.\n\t};\n\t\n\txhr.send(null);\n*/"],
    ["description-responseText\tXMLHttpRequest", "/*\n\tDescription:\n\tThe XMLHttpRequest.responseText property returns a DOMString that contains the response to the request as text, or null if the request was unsuccessful or has not yet been sent. The responseText property will have the partial response as it arrives even before the request is complete. If responseType is set to anything other than the empty string or \"text\", accessing responseText will throw InvalidStateError exception.\n\n\tSyntax:\n\tvar xhr = new XMLHttpRequest();\n\txhr.open('GET', '/server', true);\n\t\n\t// If specified, responseType must be empty string or \"text\"\n\txhr.responseType = 'text';\n\t\n\txhr.onload = function () {\n\t    if (xhr.readyState === xhr.DONE) {\n\t        if (xhr.status === 200) {\n\t            console.log(xhr.response);\n\t            console.log(xhr.responseText);\n\t        }\n\t    }\n\t};\n\t\n\txhr.send(null);\n*/"],
    ["description-send()\tXMLHttpRequest", "/*\n\tDescription:\n\tSends the request. If the request is asynchronous (which is the default), this method returns as soon as the request is sent. If the request is synchronous, this method doesn't return until the response has arrived.\n\n\tIf the data is a Document, it is serialized before being sent. When sending a Document, versions of Firefox prior to version 3 always send the request using UTF-8 encoding; Firefox 3 properly sends the document using the encoding specified by body.xmlEncoding, or UTF-8 if no encoding is specified.\n\n\tIf it's an nsIInputStream, it must be compatible with nsIUploadChannel's setUploadStream()method. In that case, a Content-Length header is added to the request, with its value obtained using nsIInputStream's available()method. Any headers included at the top of the stream are treated as part of the message body. The stream's MIMEtype should be specified by setting the Content-Type header using the setRequestHeader() method prior to calling send().\n\n\tThe best way to send binary content (like in files upload) is using an ArrayBufferView or Blobs in conjuncton with the send() method. However, if you want to send a stringifiable raw data, use the sendAsBinary() method instead, or the StringView Non native typed arrays superclass.\n*/"],
    ["description-withCredentials\tXMLHttpRequest", "/*\n\tDescription:\n\tThe XMLHttpRequest.withCredentials property is a Boolean that indicates whether or not cross-site Access-Control requests should be made using credentials such as cookies, authorization headers or TLS client certificates. Setting withCredentials has no effect on same-site requests.\n\n\tIn addition, this flag is also used to indicate when cookies are to be ignored in the response. The default is false. The third-party cookies obtained by setting withCredentials to true will still honor same-origin policy and hence can not be accessed by the requesting script through document.cookie or from response headers.\n*/"],
    ["description-responseType\tXMLHttpRequest", "/*\n\tDescription:\n\tThe XMLHttpRequest.responseType property is an enumerated value that returns the type of the response. It also lets the author change the response type to one \"arraybuffer\", \"blob\", \"document\", \"json\", or \"text\". If an empty string is set as the value of responseType, it is assumed as type \"text\". Setting the value of responseType to \"document\" is ignored if done in a  Worker environment.\n*/"],
    ["description-onreadystatechange\tXMLHttpRequest", "/*\n\tDescription:\n\tThe XMLHttpRequest.onreadystatechange property contains the event handler to be called when the readystatechange event is fired, that is every time the readyState property of the XMLHttpRequest changes. The callback is called from the user interface thread.\n\n\tThe readystatechange event will not be fired when an XMLHttpRequest request is canceled with the abort() method.\n\n\tSyntax:\n\tXMLHttpRequest.onreadystatechange = callback;\n*/"],
    ["description-getResponseHeader()\tXMLHttpRequest", "/*\n\tDescription:\n\tReturns the string containing the text of the specified header, or null if either the response has not yet been received or the header doesn't exist in the response. If there are multiple response headers with the same name, then their values are returned as a single concatenated string, where each value is separated from the previous one by a pair of comma and space. The getResponseHeader() method returns the value as a UTF byte sequence.\n*/"],
    ["description-setRequestHeader()\tXMLHttpRequest", "/*\n\tDescription:\n\tSets the value of an HTTP request header. You must call setRequestHeader()after open(), but before send(). If this method is called several times with the same header, the values are merged into one single request header.\n\n\tFor security reasons, some headers can only be controlled by the user agent. These headers include the forbidden header names  and forbidden response header names.\n*/"],
    ["description-statusText\tXMLHttpRequest", "/*\n\tDescription:\n\tThe XMLHttpRequest.statusText property returns a DOMString containing the response's status message as returned by the HTTP server. Unlike XMLHTTPRequest.status, this includes the text of the response status, such as \"OK\" or \"Not Found\". If the fetch operation hasn't finished yet, value of statusText will be an empty string.\n*/"],
    ["description-response\tXMLHttpRequest", "/*\n\tDescription:\n\tThe XMLHttpRequest.response property returns the response's body. It can be of the type ArrayBuffer, Blob, Document, JavaScript object, or a DOMString, depending of the value of XMLHttpRequest.responseType property. response is null if the request is not complete or was not successful.\n*/"],
    ["description-status\tXMLHttpRequest", "/*\n\tDescription:\n\tThe XMLHttpRequest.status property returns an unsigned short with the status of the response of the request. These are the standard HTTP status codes. For example, status is 200 denotes a successful request. Before the request is complete, the value of status will be 0.\n*/"],
    ["description-overrideMimeType()\tXMLHttpRequest", "/*\n\tDescription:\n\tOverrides the MIME type returned by the server. This may be used, for example, to force a stream to be treated and parsed as text/xml, even if the server does not report it as such. This method must be called before send().\n*/"],
    ["description-getAllResponseHeaders()\tXMLHttpRequest", "/*\n\tDescription:\n\tReturns all the response headers, separated by CRLF, as a string, or null if no response has been received. Note: For multipart requests, this returns the headers from the current part of the request, not from the original channel.\n*/"],
    ["description-upload\tXMLHttpRequest", "/*\n\tDescription:\n\tThe XMLHttpRequest.upload property returns an XMLHttpRequestUpload object, representing the upload process. It is an opaque object, but being an XMLHttpRequestEventTarget event listeners can be set on it to track its process.\n*/"],
    ["description-open()\tXMLHttpRequest", "/*\n\tDescription:\n\tInitializes a request. This method is to be used from JavaScript code; to initialize a request from native code, use openRequest() instead.\n*/"],
    ["description-abort()\tXMLHttpRequest", "/*\n\tDescription:\n\tAborts the request if it has already been sent.\n*/"]
  ]
}