{
  "scope": "source.js",

  "completions":
  [
    ["onRequestPermissionsResult(activity: any, requestCode: number, permissions: Array<String>, grantResults: Array<number>, superFunc: Function): void\tInterface AndroidActivityCallbacks", "onRequestPermissionsResult(${1:activity: any}, ${2:requestCode: number}, ${3:permissions: Array<String>}, ${4:grantResults: Array<number>}, ${5:superFunc: Function})"],
    ["setPropertyValue(instance: View, instanceModuleExports: Object, pageExports: Object, propertyName: string, propertyValue: any): void\tModule ui/builder/component-builder", "setPropertyValue(${1:instance: View}, ${2:instanceModuleExports: Object}, ${3:pageExports: Object}, ${4:propertyName: string}, ${5:propertyValue: any})"],
    ["_setAndroidFragmentTransitions(navigationTransition: NavigationTransition, currentFragment: any, newFragment: any, fragmentTransaction: any): void\tModule ui/transition", "_setAndroidFragmentTransitions(${1:navigationTransition: NavigationTransition}, ${2:currentFragment: any}, ${3:newFragment: any}, ${4:fragmentTransaction: any})"],
    ["_createIOSAnimatedTransitioning(navigationTransition: NavigationTransition, nativeCurve: any, operation: number, fromVC: any, toVC: any): any\tModule ui/transition", "_createIOSAnimatedTransitioning(${1:navigationTransition: NavigationTransition}, ${2:nativeCurve: any}, ${3:operation: number}, ${4:fromVC: any}, ${5:toVC: any})"],
    ["getComponentModule(elementName: string, namespace: string, attributes: Object, exports: Object): ComponentModule\tModule ui/builder/component-builder", "getComponentModule(${1:elementName: string}, ${2:namespace: string}, ${3:attributes: Object}, ${4:exports: Object})"],
    ["registerHandler(property: Property, handler: StylePropertyChangedHandler, className?: string): any\tModule ui/styling/style", "registerHandler(${1:property: Property}, ${2:handler: StylePropertyChangedHandler}, ${3:className?: string})"],
    ["removeWeakEventListener(source: Observable, eventName: string, handler: function, target: any): void\tModule ui/core/weak-event-listener", "removeWeakEventListener(${1:source: Observable}, ${2:eventName: string}, ${3:handler: function}, ${4:target: any})"],
    ["onActivityResult(activity: any, requestCode: number, resultCode: number, data: any, superFunc: Function): any\tInterface AndroidActivityCallbacks", "onActivityResult(${1:activity: any}, ${2:requestCode: number}, ${3:resultCode: number}, ${4:data: any}, ${5:superFunc: Function})"],
    ["onCreateView(fragment: any, inflater: any, container: any, savedInstanceState: any, superFunc: Function): any\tInterface AndroidFragmentCallbacks", "onCreateView(${1:fragment: any}, ${2:inflater: any}, ${3:container: any}, ${4:savedInstanceState: any}, ${5:superFunc: Function})"],
    ["onCreateAnimator(fragment: any, transit: number, enter: boolean, nextAnim: number, superFunc: Function): any\tInterface AndroidFragmentCallbacks", "onCreateAnimator(${1:fragment: any}, ${2:transit: number}, ${3:enter: boolean}, ${4:nextAnim: number}, ${5:superFunc: Function})"],
    ["addWeakEventListener(source: Observable, eventName: string, handler: function, target: any): void\tModule ui/core/weak-event-listener", "addWeakEventListener(${1:source: Observable}, ${2:eventName: string}, ${3:handler: function}, ${4:target: any})"],
    ["_updateCharactersInRangeReplacementString(rangeLocation: number, rangeLength: number, replacementString: string): void\tClass FormattedString", "_updateCharactersInRangeReplacementString(${1:rangeLocation: number}, ${2:rangeLength: number}, ${3:replacementString: string})"],
    ["findFileMatch(path: string, ext: string, candidates: Array<string>, context: PlatformContext): string\tModule file-system/file-name-resolver", "findFileMatch(${1:path: string}, ${2:ext: string}, ${3:candidates: Array<string>}, ${4:context: PlatformContext})"],
    ["withStyleProperty(name: string, value: any, resolvedCallback: ResolvedStylePropertyHandler): void\tModule ui/styling/style-property", "withStyleProperty(${1:name: string}, ${2:value: any}, ${3:resolvedCallback: ResolvedStylePropertyHandler})"],
    ["animateIOSTransition(containerView: any, fromView: any, toView: any, operation: any, completion: function): void\tClass Transition", "animateIOSTransition(${1:containerView: any}, ${2:fromView: any}, ${3:toView: any}, ${4:operation: any}, ${5:completion: function})"],
    ["layoutChild(parent: View, child: View, left: number, top: number, right: number, bottom: number): void\tClass ProxyViewContainer", "layoutChild(${1:parent: View}, ${2:child: View}, ${3:left: number}, ${4:top: number}, ${5:right: number}, ${6:bottom: number})"],
    ["adjustChildrenLayoutParams(layoutBase: LayoutBase, widthMeasureSpec: number, heightMeasureSpec: number): void\tClass ProxyViewContainer", "adjustChildrenLayoutParams(${1:layoutBase: LayoutBase}, ${2:widthMeasureSpec: number}, ${3:heightMeasureSpec: number})"],
    ["layoutChild(parent: View, child: View, left: number, top: number, right: number, bottom: number): void\tClass ActivityIndicator", "layoutChild(${1:parent: View}, ${2:child: View}, ${3:left: number}, ${4:top: number}, ${5:right: number}, ${6:bottom: number})"],
    ["layoutChild(parent: View, child: View, left: number, top: number, right: number, bottom: number): void\tClass EditableTextBase", "layoutChild(${1:parent: View}, ${2:child: View}, ${3:left: number}, ${4:top: number}, ${5:right: number}, ${6:bottom: number})"],
    ["layoutChild(parent: View, child: View, left: number, top: number, right: number, bottom: number): void\tClass CustomLayoutView", "layoutChild(${1:parent: View}, ${2:child: View}, ${3:left: number}, ${4:top: number}, ${5:right: number}, ${6:bottom: number})"],
    ["startLocationMonitoring(onLocation: function, onError?: function, options?: Options): any\tClass LocationManager", "startLocationMonitoring(${1:onLocation: function}, ${2:onError?: function}, ${3:options?: Options})"],
    ["layoutChild(parent: View, child: View, left: number, top: number, right: number, bottom: number): void\tClass AbsoluteLayout", "layoutChild(${1:parent: View}, ${2:child: View}, ${3:left: number}, ${4:top: number}, ${5:right: number}, ${6:bottom: number})"],
    ["adjustChildrenLayoutParams(layoutBase: LayoutBase, widthMeasureSpec: number, heightMeasureSpec: number): void\tClass AbsoluteLayout", "adjustChildrenLayoutParams(${1:layoutBase: LayoutBase}, ${2:widthMeasureSpec: number}, ${3:heightMeasureSpec: number})"],
    ["layoutChild(parent: View, child: View, left: number, top: number, right: number, bottom: number): void\tClass SegmentedBar", "layoutChild(${1:parent: View}, ${2:child: View}, ${3:left: number}, ${4:top: number}, ${5:right: number}, ${6:bottom: number})"],
    ["resolveSizeAndState(size: number, specSize: number, specMode: number, childMeasuredState: number): number\tClass ProxyViewContainer", "resolveSizeAndState(${1:size: number}, ${2:specSize: number}, ${3:specMode: number}, ${4:childMeasuredState: number})"],
    ["layoutChild(parent: View, child: View, left: number, top: number, right: number, bottom: number): void\tClass Placeholder", "layoutChild(${1:parent: View}, ${2:child: View}, ${3:left: number}, ${4:top: number}, ${5:right: number}, ${6:bottom: number})"],
    ["resolveSizeAndState(size: number, specSize: number, specMode: number, childMeasuredState: number): number\tClass ActivityIndicator", "resolveSizeAndState(${1:size: number}, ${2:specSize: number}, ${3:specMode: number}, ${4:childMeasuredState: number})"],
    ["layoutChild(parent: View, child: View, left: number, top: number, right: number, bottom: number): void\tClass ContentView", "layoutChild(${1:parent: View}, ${2:child: View}, ${3:left: number}, ${4:top: number}, ${5:right: number}, ${6:bottom: number})"],
    ["layoutChild(parent: View, child: View, left: number, top: number, right: number, bottom: number): void\tClass StackLayout", "layoutChild(${1:parent: View}, ${2:child: View}, ${3:left: number}, ${4:top: number}, ${5:right: number}, ${6:bottom: number})"],
    ["layoutChild(parent: View, child: View, left: number, top: number, right: number, bottom: number): void\tClass ScrollView", "layoutChild(${1:parent: View}, ${2:child: View}, ${3:left: number}, ${4:top: number}, ${5:right: number}, ${6:bottom: number})"],
    ["layoutChild(parent: View, child: View, left: number, top: number, right: number, bottom: number): void\tClass WrapLayout", "layoutChild(${1:parent: View}, ${2:child: View}, ${3:left: number}, ${4:top: number}, ${5:right: number}, ${6:bottom: number})"],
    ["resolveSizeAndState(size: number, specSize: number, specMode: number, childMeasuredState: number): number\tClass CustomLayoutView", "resolveSizeAndState(${1:size: number}, ${2:specSize: number}, ${3:specMode: number}, ${4:childMeasuredState: number})"],
    ["layoutChild(parent: View, child: View, left: number, top: number, right: number, bottom: number): void\tClass DockLayout", "layoutChild(${1:parent: View}, ${2:child: View}, ${3:left: number}, ${4:top: number}, ${5:right: number}, ${6:bottom: number})"],
    ["layoutChild(parent: View, child: View, left: number, top: number, right: number, bottom: number): void\tClass LayoutBase", "layoutChild(${1:parent: View}, ${2:child: View}, ${3:left: number}, ${4:top: number}, ${5:right: number}, ${6:bottom: number})"],
    ["resolveSizeAndState(size: number, specSize: number, specMode: number, childMeasuredState: number): number\tClass EditableTextBase", "resolveSizeAndState(${1:size: number}, ${2:specSize: number}, ${3:specMode: number}, ${4:childMeasuredState: number})"],
    ["layoutChild(parent: View, child: View, left: number, top: number, right: number, bottom: number): void\tClass TimePicker", "layoutChild(${1:parent: View}, ${2:child: View}, ${3:left: number}, ${4:top: number}, ${5:right: number}, ${6:bottom: number})"],
    ["adjustChildrenLayoutParams(layoutBase: LayoutBase, widthMeasureSpec: number, heightMeasureSpec: number): void\tClass StackLayout", "adjustChildrenLayoutParams(${1:layoutBase: LayoutBase}, ${2:widthMeasureSpec: number}, ${3:heightMeasureSpec: number})"],
    ["layoutChild(parent: View, child: View, left: number, top: number, right: number, bottom: number): void\tClass ListPicker", "layoutChild(${1:parent: View}, ${2:child: View}, ${3:left: number}, ${4:top: number}, ${5:right: number}, ${6:bottom: number})"],
    ["layoutChild(parent: View, child: View, left: number, top: number, right: number, bottom: number): void\tClass GridLayout", "layoutChild(${1:parent: View}, ${2:child: View}, ${3:left: number}, ${4:top: number}, ${5:right: number}, ${6:bottom: number})"],
    ["layoutChild(parent: View, child: View, left: number, top: number, right: number, bottom: number): void\tClass DatePicker", "layoutChild(${1:parent: View}, ${2:child: View}, ${3:left: number}, ${4:top: number}, ${5:right: number}, ${6:bottom: number})"],
    ["adjustChildrenLayoutParams(layoutBase: LayoutBase, widthMeasureSpec: number, heightMeasureSpec: number): void\tClass WrapLayout", "adjustChildrenLayoutParams(${1:layoutBase: LayoutBase}, ${2:widthMeasureSpec: number}, ${3:heightMeasureSpec: number})"],
    ["adjustChildrenLayoutParams(layoutBase: LayoutBase, widthMeasureSpec: number, heightMeasureSpec: number): void\tClass LayoutBase", "adjustChildrenLayoutParams(${1:layoutBase: LayoutBase}, ${2:widthMeasureSpec: number}, ${3:heightMeasureSpec: number})"],
    ["adjustChildrenLayoutParams(layoutBase: LayoutBase, widthMeasureSpec: number, heightMeasureSpec: number): void\tClass DockLayout", "adjustChildrenLayoutParams(${1:layoutBase: LayoutBase}, ${2:widthMeasureSpec: number}, ${3:heightMeasureSpec: number})"],
    ["adjustChildrenLayoutParams(layoutBase: LayoutBase, widthMeasureSpec: number, heightMeasureSpec: number): void\tClass GridLayout", "adjustChildrenLayoutParams(${1:layoutBase: LayoutBase}, ${2:widthMeasureSpec: number}, ${3:heightMeasureSpec: number})"],
    ["layoutChild(parent: View, child: View, left: number, top: number, right: number, bottom: number): void\tClass SearchBar", "layoutChild(${1:parent: View}, ${2:child: View}, ${3:left: number}, ${4:top: number}, ${5:right: number}, ${6:bottom: number})"],
    ["layoutChild(parent: View, child: View, left: number, top: number, right: number, bottom: number): void\tClass ActionBar", "layoutChild(${1:parent: View}, ${2:child: View}, ${3:left: number}, ${4:top: number}, ${5:right: number}, ${6:bottom: number})"],
    ["layoutChild(parent: View, child: View, left: number, top: number, right: number, bottom: number): void\tClass TextField", "layoutChild(${1:parent: View}, ${2:child: View}, ${3:left: number}, ${4:top: number}, ${5:right: number}, ${6:bottom: number})"],
    ["layoutChild(parent: View, child: View, left: number, top: number, right: number, bottom: number): void\tClass Progress", "layoutChild(${1:parent: View}, ${2:child: View}, ${3:left: number}, ${4:top: number}, ${5:right: number}, ${6:bottom: number})"],
    ["layoutChild(parent: View, child: View, left: number, top: number, right: number, bottom: number): void\tClass Repeater", "layoutChild(${1:parent: View}, ${2:child: View}, ${3:left: number}, ${4:top: number}, ${5:right: number}, ${6:bottom: number})"],
    ["layoutChild(parent: View, child: View, left: number, top: number, right: number, bottom: number): void\tClass TextBase", "layoutChild(${1:parent: View}, ${2:child: View}, ${3:left: number}, ${4:top: number}, ${5:right: number}, ${6:bottom: number})"],
    ["layoutChild(parent: View, child: View, left: number, top: number, right: number, bottom: number): void\tClass HtmlView", "layoutChild(${1:parent: View}, ${2:child: View}, ${3:left: number}, ${4:top: number}, ${5:right: number}, ${6:bottom: number})"],
    ["resolveSizeAndState(size: number, specSize: number, specMode: number, childMeasuredState: number): number\tClass AbsoluteLayout", "resolveSizeAndState(${1:size: number}, ${2:specSize: number}, ${3:specMode: number}, ${4:childMeasuredState: number})"],
    ["layoutChild(parent: View, child: View, left: number, top: number, right: number, bottom: number): void\tClass TextView", "layoutChild(${1:parent: View}, ${2:child: View}, ${3:left: number}, ${4:top: number}, ${5:right: number}, ${6:bottom: number})"],
    ["layoutChild(parent: View, child: View, left: number, top: number, right: number, bottom: number): void\tClass ListView", "layoutChild(${1:parent: View}, ${2:child: View}, ${3:left: number}, ${4:top: number}, ${5:right: number}, ${6:bottom: number})"],
    ["observe(target: View, type: GestureTypes, callback: function, context?: any): GesturesObserver\tModule ui/gestures", "observe(${1:target: View}, ${2:type: GestureTypes}, ${3:callback: function}, ${4:context?: any})"],
    ["layoutChild(parent: View, child: View, left: number, top: number, right: number, bottom: number): void\tClass WebView", "layoutChild(${1:parent: View}, ${2:child: View}, ${3:left: number}, ${4:top: number}, ${5:right: number}, ${6:bottom: number})"],
    ["layoutChild(parent: View, child: View, left: number, top: number, right: number, bottom: number): void\tClass TabView", "layoutChild(${1:parent: View}, ${2:child: View}, ${3:left: number}, ${4:top: number}, ${5:right: number}, ${6:bottom: number})"],
    ["layoutChild(parent: View, child: View, left: number, top: number, right: number, bottom: number): void\tClass Switch", "layoutChild(${1:parent: View}, ${2:child: View}, ${3:left: number}, ${4:top: number}, ${5:right: number}, ${6:bottom: number})"],
    ["layoutChild(parent: View, child: View, left: number, top: number, right: number, bottom: number): void\tClass Layout", "layoutChild(${1:parent: View}, ${2:child: View}, ${3:left: number}, ${4:top: number}, ${5:right: number}, ${6:bottom: number})"],
    ["layoutChild(parent: View, child: View, left: number, top: number, right: number, bottom: number): void\tClass Border", "layoutChild(${1:parent: View}, ${2:child: View}, ${3:left: number}, ${4:top: number}, ${5:right: number}, ${6:bottom: number})"],
    ["resolveSizeAndState(size: number, specSize: number, specMode: number, childMeasuredState: number): number\tClass SegmentedBar", "resolveSizeAndState(${1:size: number}, ${2:specSize: number}, ${3:specMode: number}, ${4:childMeasuredState: number})"],
    ["layoutChild(parent: View, child: View, left: number, top: number, right: number, bottom: number): void\tClass Button", "layoutChild(${1:parent: View}, ${2:child: View}, ${3:left: number}, ${4:top: number}, ${5:right: number}, ${6:bottom: number})"],
    ["layoutChild(parent: View, child: View, left: number, top: number, right: number, bottom: number): void\tClass Slider", "layoutChild(${1:parent: View}, ${2:child: View}, ${3:left: number}, ${4:top: number}, ${5:right: number}, ${6:bottom: number})"],
    ["layoutChild(parent: View, child: View, left: number, top: number, right: number, bottom: number): void\tClass Frame", "layoutChild(${1:parent: View}, ${2:child: View}, ${3:left: number}, ${4:top: number}, ${5:right: number}, ${6:bottom: number})"],
    ["resolveSizeAndState(size: number, specSize: number, specMode: number, childMeasuredState: number): number\tClass StackLayout", "resolveSizeAndState(${1:size: number}, ${2:specSize: number}, ${3:specMode: number}, ${4:childMeasuredState: number})"],
    ["layoutChild(parent: View, child: View, left: number, top: number, right: number, bottom: number): void\tClass Label", "layoutChild(${1:parent: View}, ${2:child: View}, ${3:left: number}, ${4:top: number}, ${5:right: number}, ${6:bottom: number})"],
    ["resolveSizeAndState(size: number, specSize: number, specMode: number, childMeasuredState: number): number\tClass ContentView", "resolveSizeAndState(${1:size: number}, ${2:specSize: number}, ${3:specMode: number}, ${4:childMeasuredState: number})"],
    ["writeText(path: string, content: string, onError?: function, encoding?: any): any\tClass FileSystemAccess", "writeText(${1:path: string}, ${2:content: string}, ${3:onError?: function}, ${4:encoding?: any})"],
    ["layoutChild(parent: View, child: View, left: number, top: number, right: number, bottom: number): void\tClass Image", "layoutChild(${1:parent: View}, ${2:child: View}, ${3:left: number}, ${4:top: number}, ${5:right: number}, ${6:bottom: number})"],
    ["adjustChildrenLayoutParams(layoutBase: LayoutBase, widthMeasureSpec: number, heightMeasureSpec: number): void\tClass Layout", "adjustChildrenLayoutParams(${1:layoutBase: LayoutBase}, ${2:widthMeasureSpec: number}, ${3:heightMeasureSpec: number})"],
    ["resolveSizeAndState(size: number, specSize: number, specMode: number, childMeasuredState: number): number\tClass Placeholder", "resolveSizeAndState(${1:size: number}, ${2:specSize: number}, ${3:specMode: number}, ${4:childMeasuredState: number})"],
    ["resolveSizeAndState(size: number, specSize: number, specMode: number, childMeasuredState: number): number\tClass TimePicker", "resolveSizeAndState(${1:size: number}, ${2:specSize: number}, ${3:specMode: number}, ${4:childMeasuredState: number})"],
    ["resolveSizeAndState(size: number, specSize: number, specMode: number, childMeasuredState: number): number\tClass DockLayout", "resolveSizeAndState(${1:size: number}, ${2:specSize: number}, ${3:specMode: number}, ${4:childMeasuredState: number})"],
    ["resolveSizeAndState(size: number, specSize: number, specMode: number, childMeasuredState: number): number\tClass LayoutBase", "resolveSizeAndState(${1:size: number}, ${2:specSize: number}, ${3:specMode: number}, ${4:childMeasuredState: number})"],
    ["resolveSizeAndState(size: number, specSize: number, specMode: number, childMeasuredState: number): number\tClass GridLayout", "resolveSizeAndState(${1:size: number}, ${2:specSize: number}, ${3:specMode: number}, ${4:childMeasuredState: number})"],
    ["resolveSizeAndState(size: number, specSize: number, specMode: number, childMeasuredState: number): number\tClass DatePicker", "resolveSizeAndState(${1:size: number}, ${2:specSize: number}, ${3:specMode: number}, ${4:childMeasuredState: number})"],
    ["layoutChild(parent: View, child: View, left: number, top: number, right: number, bottom: number): void\tClass Page", "layoutChild(${1:parent: View}, ${2:child: View}, ${3:left: number}, ${4:top: number}, ${5:right: number}, ${6:bottom: number})"],
    ["resolveSizeAndState(size: number, specSize: number, specMode: number, childMeasuredState: number): number\tClass ListPicker", "resolveSizeAndState(${1:size: number}, ${2:specSize: number}, ${3:specMode: number}, ${4:childMeasuredState: number})"],
    ["resolveSizeAndState(size: number, specSize: number, specMode: number, childMeasuredState: number): number\tClass WrapLayout", "resolveSizeAndState(${1:size: number}, ${2:specSize: number}, ${3:specMode: number}, ${4:childMeasuredState: number})"],
    ["layoutChild(parent: View, child: View, left: number, top: number, right: number, bottom: number): void\tClass View", "layoutChild(${1:parent: View}, ${2:child: View}, ${3:left: number}, ${4:top: number}, ${5:right: number}, ${6:bottom: number})"],
    ["resolveSizeAndState(size: number, specSize: number, specMode: number, childMeasuredState: number): number\tClass ScrollView", "resolveSizeAndState(${1:size: number}, ${2:specSize: number}, ${3:specMode: number}, ${4:childMeasuredState: number})"],
    ["resolveSizeAndState(size: number, specSize: number, specMode: number, childMeasuredState: number): number\tClass TextField", "resolveSizeAndState(${1:size: number}, ${2:specSize: number}, ${3:specMode: number}, ${4:childMeasuredState: number})"],
    ["resolveSizeAndState(size: number, specSize: number, specMode: number, childMeasuredState: number): number\tClass ActionBar", "resolveSizeAndState(${1:size: number}, ${2:specSize: number}, ${3:specMode: number}, ${4:childMeasuredState: number})"],
    ["resolveSizeAndState(size: number, specSize: number, specMode: number, childMeasuredState: number): number\tClass SearchBar", "resolveSizeAndState(${1:size: number}, ${2:specSize: number}, ${3:specMode: number}, ${4:childMeasuredState: number})"],
    ["measureChild(parent: View, child: View, widthMeasureSpec: number, heightMeasureSpec: number): object\tClass ProxyViewContainer", "measureChild(${1:parent: View}, ${2:child: View}, ${3:widthMeasureSpec: number}, ${4:heightMeasureSpec: number})"],
    ["resolveSizeAndState(size: number, specSize: number, specMode: number, childMeasuredState: number): number\tClass Repeater", "resolveSizeAndState(${1:size: number}, ${2:specSize: number}, ${3:specMode: number}, ${4:childMeasuredState: number})"],
    ["showModal(moduleName: string, context: any, closeCallback: Function, fullscreen?: boolean): Page\tClass Page", "showModal(${1:moduleName: string}, ${2:context: any}, ${3:closeCallback: Function}, ${4:fullscreen?: boolean})"],
    ["resolveSizeAndState(size: number, specSize: number, specMode: number, childMeasuredState: number): number\tClass ListView", "resolveSizeAndState(${1:size: number}, ${2:specSize: number}, ${3:specMode: number}, ${4:childMeasuredState: number})"],
    ["resolveSizeAndState(size: number, specSize: number, specMode: number, childMeasuredState: number): number\tClass Progress", "resolveSizeAndState(${1:size: number}, ${2:specSize: number}, ${3:specMode: number}, ${4:childMeasuredState: number})"],
    ["resolveSizeAndState(size: number, specSize: number, specMode: number, childMeasuredState: number): number\tClass TextBase", "resolveSizeAndState(${1:size: number}, ${2:specSize: number}, ${3:specMode: number}, ${4:childMeasuredState: number})"],
    ["resolveSizeAndState(size: number, specSize: number, specMode: number, childMeasuredState: number): number\tClass TextView", "resolveSizeAndState(${1:size: number}, ${2:specSize: number}, ${3:specMode: number}, ${4:childMeasuredState: number})"],
    ["resolveSizeAndState(size: number, specSize: number, specMode: number, childMeasuredState: number): number\tClass HtmlView", "resolveSizeAndState(${1:size: number}, ${2:specSize: number}, ${3:specMode: number}, ${4:childMeasuredState: number})"],
    ["resolveSizeAndState(size: number, specSize: number, specMode: number, childMeasuredState: number): number\tClass WebView", "resolveSizeAndState(${1:size: number}, ${2:specSize: number}, ${3:specMode: number}, ${4:childMeasuredState: number})"],
    ["resolveSizeAndState(size: number, specSize: number, specMode: number, childMeasuredState: number): number\tClass TabView", "resolveSizeAndState(${1:size: number}, ${2:specSize: number}, ${3:specMode: number}, ${4:childMeasuredState: number})"],
    ["measureChild(parent: View, child: View, widthMeasureSpec: number, heightMeasureSpec: number): object\tClass ActivityIndicator", "measureChild(${1:parent: View}, ${2:child: View}, ${3:widthMeasureSpec: number}, ${4:heightMeasureSpec: number})"],
    ["resolveSizeAndState(size: number, specSize: number, specMode: number, childMeasuredState: number): number\tClass Border", "resolveSizeAndState(${1:size: number}, ${2:specSize: number}, ${3:specMode: number}, ${4:childMeasuredState: number})"],
    ["measureChild(parent: View, child: View, widthMeasureSpec: number, heightMeasureSpec: number): object\tClass EditableTextBase", "measureChild(${1:parent: View}, ${2:child: View}, ${3:widthMeasureSpec: number}, ${4:heightMeasureSpec: number})"],
    ["resolveSizeAndState(size: number, specSize: number, specMode: number, childMeasuredState: number): number\tClass Slider", "resolveSizeAndState(${1:size: number}, ${2:specSize: number}, ${3:specMode: number}, ${4:childMeasuredState: number})"],
    ["resolveSizeAndState(size: number, specSize: number, specMode: number, childMeasuredState: number): number\tClass Switch", "resolveSizeAndState(${1:size: number}, ${2:specSize: number}, ${3:specMode: number}, ${4:childMeasuredState: number})"],
    ["measureChild(parent: View, child: View, widthMeasureSpec: number, heightMeasureSpec: number): object\tClass CustomLayoutView", "measureChild(${1:parent: View}, ${2:child: View}, ${3:widthMeasureSpec: number}, ${4:heightMeasureSpec: number})"],
    ["resolveSizeAndState(size: number, specSize: number, specMode: number, childMeasuredState: number): number\tClass Button", "resolveSizeAndState(${1:size: number}, ${2:specSize: number}, ${3:specMode: number}, ${4:childMeasuredState: number})"],
    ["resolveSizeAndState(size: number, specSize: number, specMode: number, childMeasuredState: number): number\tClass Layout", "resolveSizeAndState(${1:size: number}, ${2:specSize: number}, ${3:specMode: number}, ${4:childMeasuredState: number})"],
    ["resolveSizeAndState(size: number, specSize: number, specMode: number, childMeasuredState: number): number\tClass Label", "resolveSizeAndState(${1:size: number}, ${2:specSize: number}, ${3:specMode: number}, ${4:childMeasuredState: number})"],
    ["resolveSizeAndState(size: number, specSize: number, specMode: number, childMeasuredState: number): number\tClass Frame", "resolveSizeAndState(${1:size: number}, ${2:specSize: number}, ${3:specMode: number}, ${4:childMeasuredState: number})"],
    ["resolveSizeAndState(size: number, specSize: number, specMode: number, childMeasuredState: number): number\tClass Image", "resolveSizeAndState(${1:size: number}, ${2:specSize: number}, ${3:specMode: number}, ${4:childMeasuredState: number})"],
    ["resolveSizeAndState(size: number, specSize: number, specMode: number, childMeasuredState: number): number\tClass View", "resolveSizeAndState(${1:size: number}, ${2:specSize: number}, ${3:specMode: number}, ${4:childMeasuredState: number})"],
    ["off(eventNames: string | GestureTypes, callback?: function, thisArg?: any): any\tClass ProxyViewContainer", "off(${1:eventNames: string | GestureTypes}, ${2:callback?: function}, ${3:thisArg?: any})"],
    ["resolveSizeAndState(size: number, specSize: number, specMode: number, childMeasuredState: number): number\tClass Page", "resolveSizeAndState(${1:size: number}, ${2:specSize: number}, ${3:specMode: number}, ${4:childMeasuredState: number})"],
    ["measureChild(parent: View, child: View, widthMeasureSpec: number, heightMeasureSpec: number): object\tClass AbsoluteLayout", "measureChild(${1:parent: View}, ${2:child: View}, ${3:widthMeasureSpec: number}, ${4:heightMeasureSpec: number})"],
    ["off(eventNames: string | GestureTypes, callback?: function, thisArg?: any): any\tClass ActivityIndicator", "off(${1:eventNames: string | GestureTypes}, ${2:callback?: function}, ${3:thisArg?: any})"],
    ["off(eventNames: string | GestureTypes, callback?: function, thisArg?: any): any\tClass CustomLayoutView", "off(${1:eventNames: string | GestureTypes}, ${2:callback?: function}, ${3:thisArg?: any})"],
    ["off(eventNames: string | GestureTypes, callback?: function, thisArg?: any): any\tClass EditableTextBase", "off(${1:eventNames: string | GestureTypes}, ${2:callback?: function}, ${3:thisArg?: any})"],
    ["measureChild(parent: View, child: View, widthMeasureSpec: number, heightMeasureSpec: number): object\tClass SegmentedBar", "measureChild(${1:parent: View}, ${2:child: View}, ${3:widthMeasureSpec: number}, ${4:heightMeasureSpec: number})"],
    ["measureChild(parent: View, child: View, widthMeasureSpec: number, heightMeasureSpec: number): object\tClass Placeholder", "measureChild(${1:parent: View}, ${2:child: View}, ${3:widthMeasureSpec: number}, ${4:heightMeasureSpec: number})"],
    ["measureChild(parent: View, child: View, widthMeasureSpec: number, heightMeasureSpec: number): object\tClass StackLayout", "measureChild(${1:parent: View}, ${2:child: View}, ${3:widthMeasureSpec: number}, ${4:heightMeasureSpec: number})"],
    ["measureChild(parent: View, child: View, widthMeasureSpec: number, heightMeasureSpec: number): object\tClass ContentView", "measureChild(${1:parent: View}, ${2:child: View}, ${3:widthMeasureSpec: number}, ${4:heightMeasureSpec: number})"],
    ["measureChild(parent: View, child: View, widthMeasureSpec: number, heightMeasureSpec: number): object\tClass DatePicker", "measureChild(${1:parent: View}, ${2:child: View}, ${3:widthMeasureSpec: number}, ${4:heightMeasureSpec: number})"],
    ["off(eventNames: string | GestureTypes, callback?: function, thisArg?: any): any\tClass AbsoluteLayout", "off(${1:eventNames: string | GestureTypes}, ${2:callback?: function}, ${3:thisArg?: any})"],
    ["measureChild(parent: View, child: View, widthMeasureSpec: number, heightMeasureSpec: number): object\tClass ScrollView", "measureChild(${1:parent: View}, ${2:child: View}, ${3:widthMeasureSpec: number}, ${4:heightMeasureSpec: number})"],
    ["measureChild(parent: View, child: View, widthMeasureSpec: number, heightMeasureSpec: number): object\tClass WrapLayout", "measureChild(${1:parent: View}, ${2:child: View}, ${3:widthMeasureSpec: number}, ${4:heightMeasureSpec: number})"],
    ["measureChild(parent: View, child: View, widthMeasureSpec: number, heightMeasureSpec: number): object\tClass ListPicker", "measureChild(${1:parent: View}, ${2:child: View}, ${3:widthMeasureSpec: number}, ${4:heightMeasureSpec: number})"],
    ["measureChild(parent: View, child: View, widthMeasureSpec: number, heightMeasureSpec: number): object\tClass TimePicker", "measureChild(${1:parent: View}, ${2:child: View}, ${3:widthMeasureSpec: number}, ${4:heightMeasureSpec: number})"],
    ["measureChild(parent: View, child: View, widthMeasureSpec: number, heightMeasureSpec: number): object\tClass DockLayout", "measureChild(${1:parent: View}, ${2:child: View}, ${3:widthMeasureSpec: number}, ${4:heightMeasureSpec: number})"],
    ["measureChild(parent: View, child: View, widthMeasureSpec: number, heightMeasureSpec: number): object\tClass LayoutBase", "measureChild(${1:parent: View}, ${2:child: View}, ${3:widthMeasureSpec: number}, ${4:heightMeasureSpec: number})"],
    ["measureChild(parent: View, child: View, widthMeasureSpec: number, heightMeasureSpec: number): object\tClass GridLayout", "measureChild(${1:parent: View}, ${2:child: View}, ${3:widthMeasureSpec: number}, ${4:heightMeasureSpec: number})"],
    ["measureChild(parent: View, child: View, widthMeasureSpec: number, heightMeasureSpec: number): object\tClass SearchBar", "measureChild(${1:parent: View}, ${2:child: View}, ${3:widthMeasureSpec: number}, ${4:heightMeasureSpec: number})"],
    ["login(message: string, userName?: string, password?: string): Promise<LoginResult>\tModule ui/dialogs", "login(${1:message: string}, ${2:userName?: string}, ${3:password?: string})"],
    ["measureChild(parent: View, child: View, widthMeasureSpec: number, heightMeasureSpec: number): object\tClass TextField", "measureChild(${1:parent: View}, ${2:child: View}, ${3:widthMeasureSpec: number}, ${4:heightMeasureSpec: number})"],
    ["measureChild(parent: View, child: View, widthMeasureSpec: number, heightMeasureSpec: number): object\tClass ActionBar", "measureChild(${1:parent: View}, ${2:child: View}, ${3:widthMeasureSpec: number}, ${4:heightMeasureSpec: number})"],
    ["measureChild(parent: View, child: View, widthMeasureSpec: number, heightMeasureSpec: number): object\tClass Repeater", "measureChild(${1:parent: View}, ${2:child: View}, ${3:widthMeasureSpec: number}, ${4:heightMeasureSpec: number})"],
    ["measureChild(parent: View, child: View, widthMeasureSpec: number, heightMeasureSpec: number): object\tClass HtmlView", "measureChild(${1:parent: View}, ${2:child: View}, ${3:widthMeasureSpec: number}, ${4:heightMeasureSpec: number})"],
    ["measureChild(parent: View, child: View, widthMeasureSpec: number, heightMeasureSpec: number): object\tClass ListView", "measureChild(${1:parent: View}, ${2:child: View}, ${3:widthMeasureSpec: number}, ${4:heightMeasureSpec: number})"],
    ["measureChild(parent: View, child: View, widthMeasureSpec: number, heightMeasureSpec: number): object\tClass TextBase", "measureChild(${1:parent: View}, ${2:child: View}, ${3:widthMeasureSpec: number}, ${4:heightMeasureSpec: number})"],
    ["removeEventListener(eventNames: string, callback?: any, thisArg?: any): any\tClass DependencyObservable", "removeEventListener(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["measureChild(parent: View, child: View, widthMeasureSpec: number, heightMeasureSpec: number): object\tClass Progress", "measureChild(${1:parent: View}, ${2:child: View}, ${3:widthMeasureSpec: number}, ${4:heightMeasureSpec: number})"],
    ["measureChild(parent: View, child: View, widthMeasureSpec: number, heightMeasureSpec: number): object\tClass TextView", "measureChild(${1:parent: View}, ${2:child: View}, ${3:widthMeasureSpec: number}, ${4:heightMeasureSpec: number})"],
    ["off(eventNames: string | GestureTypes, callback?: function, thisArg?: any): any\tClass SegmentedBar", "off(${1:eventNames: string | GestureTypes}, ${2:callback?: function}, ${3:thisArg?: any})"],
    ["off(eventNames: string | GestureTypes, callback?: function, thisArg?: any): any\tClass StackLayout", "off(${1:eventNames: string | GestureTypes}, ${2:callback?: function}, ${3:thisArg?: any})"],
    ["measureChild(parent: View, child: View, widthMeasureSpec: number, heightMeasureSpec: number): object\tClass TabView", "measureChild(${1:parent: View}, ${2:child: View}, ${3:widthMeasureSpec: number}, ${4:heightMeasureSpec: number})"],
    ["off(eventNames: string | GestureTypes, callback?: function, thisArg?: any): any\tClass Placeholder", "off(${1:eventNames: string | GestureTypes}, ${2:callback?: function}, ${3:thisArg?: any})"],
    ["off(eventNames: string | GestureTypes, callback?: function, thisArg?: any): any\tClass ContentView", "off(${1:eventNames: string | GestureTypes}, ${2:callback?: function}, ${3:thisArg?: any})"],
    ["measureChild(parent: View, child: View, widthMeasureSpec: number, heightMeasureSpec: number): object\tClass WebView", "measureChild(${1:parent: View}, ${2:child: View}, ${3:widthMeasureSpec: number}, ${4:heightMeasureSpec: number})"],
    ["removeEventListener(eventNames: string, callback?: any, thisArg?: any): any\tClass AndroidApplication", "removeEventListener(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["off(eventNames: string | GestureTypes, callback?: function, thisArg?: any): any\tClass ScrollView", "off(${1:eventNames: string | GestureTypes}, ${2:callback?: function}, ${3:thisArg?: any})"],
    ["off(eventNames: string | GestureTypes, callback?: function, thisArg?: any): any\tClass DatePicker", "off(${1:eventNames: string | GestureTypes}, ${2:callback?: function}, ${3:thisArg?: any})"],
    ["off(eventNames: string | GestureTypes, callback?: function, thisArg?: any): any\tClass TimePicker", "off(${1:eventNames: string | GestureTypes}, ${2:callback?: function}, ${3:thisArg?: any})"],
    ["measureChild(parent: View, child: View, widthMeasureSpec: number, heightMeasureSpec: number): object\tClass Slider", "measureChild(${1:parent: View}, ${2:child: View}, ${3:widthMeasureSpec: number}, ${4:heightMeasureSpec: number})"],
    ["off(eventNames: string | GestureTypes, callback?: function, thisArg?: any): any\tClass LayoutBase", "off(${1:eventNames: string | GestureTypes}, ${2:callback?: function}, ${3:thisArg?: any})"],
    ["removeEventListener(eventNames: string, callback?: any, thisArg?: any): any\tClass ProxyViewContainer", "removeEventListener(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["measureChild(parent: View, child: View, widthMeasureSpec: number, heightMeasureSpec: number): object\tClass Layout", "measureChild(${1:parent: View}, ${2:child: View}, ${3:widthMeasureSpec: number}, ${4:heightMeasureSpec: number})"],
    ["measureChild(parent: View, child: View, widthMeasureSpec: number, heightMeasureSpec: number): object\tClass Switch", "measureChild(${1:parent: View}, ${2:child: View}, ${3:widthMeasureSpec: number}, ${4:heightMeasureSpec: number})"],
    ["removeEventListener(eventNames: string, callback?: any, thisArg?: any): any\tClass ObservableArray<T>", "removeEventListener(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["off(eventNames: string | GestureTypes, callback?: function, thisArg?: any): any\tClass ListPicker", "off(${1:eventNames: string | GestureTypes}, ${2:callback?: function}, ${3:thisArg?: any})"],
    ["measureChild(parent: View, child: View, widthMeasureSpec: number, heightMeasureSpec: number): object\tClass Button", "measureChild(${1:parent: View}, ${2:child: View}, ${3:widthMeasureSpec: number}, ${4:heightMeasureSpec: number})"],
    ["off(eventNames: string | GestureTypes, callback?: function, thisArg?: any): any\tClass WrapLayout", "off(${1:eventNames: string | GestureTypes}, ${2:callback?: function}, ${3:thisArg?: any})"],
    ["off(eventNames: string | GestureTypes, callback?: function, thisArg?: any): any\tClass DockLayout", "off(${1:eventNames: string | GestureTypes}, ${2:callback?: function}, ${3:thisArg?: any})"],
    ["measureChild(parent: View, child: View, widthMeasureSpec: number, heightMeasureSpec: number): object\tClass Border", "measureChild(${1:parent: View}, ${2:child: View}, ${3:widthMeasureSpec: number}, ${4:heightMeasureSpec: number})"],
    ["off(eventNames: string | GestureTypes, callback?: function, thisArg?: any): any\tClass GridLayout", "off(${1:eventNames: string | GestureTypes}, ${2:callback?: function}, ${3:thisArg?: any})"],
    ["off(eventNames: string | GestureTypes, callback?: function, thisArg?: any): any\tClass TextField", "off(${1:eventNames: string | GestureTypes}, ${2:callback?: function}, ${3:thisArg?: any})"],
    ["off(eventNames: string | GestureTypes, callback?: function, thisArg?: any): any\tClass SearchBar", "off(${1:eventNames: string | GestureTypes}, ${2:callback?: function}, ${3:thisArg?: any})"],
    ["off(eventNames: string | GestureTypes, callback?: function, thisArg?: any): any\tClass ActionBar", "off(${1:eventNames: string | GestureTypes}, ${2:callback?: function}, ${3:thisArg?: any})"],
    ["measureChild(parent: View, child: View, widthMeasureSpec: number, heightMeasureSpec: number): object\tClass Frame", "measureChild(${1:parent: View}, ${2:child: View}, ${3:widthMeasureSpec: number}, ${4:heightMeasureSpec: number})"],
    ["removeEventListener(eventNames: string, callback?: any, thisArg?: any): any\tClass ActivityIndicator", "removeEventListener(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["measureChild(parent: View, child: View, widthMeasureSpec: number, heightMeasureSpec: number): object\tClass Label", "measureChild(${1:parent: View}, ${2:child: View}, ${3:widthMeasureSpec: number}, ${4:heightMeasureSpec: number})"],
    ["measureChild(parent: View, child: View, widthMeasureSpec: number, heightMeasureSpec: number): object\tClass Image", "measureChild(${1:parent: View}, ${2:child: View}, ${3:widthMeasureSpec: number}, ${4:heightMeasureSpec: number})"],
    ["measureChild(parent: View, child: View, widthMeasureSpec: number, heightMeasureSpec: number): object\tClass View", "measureChild(${1:parent: View}, ${2:child: View}, ${3:widthMeasureSpec: number}, ${4:heightMeasureSpec: number})"],
    ["removeEventListener(eventNames: string, callback?: any, thisArg?: any): any\tClass SegmentedBarItem", "removeEventListener(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["off(eventNames: string | GestureTypes, callback?: function, thisArg?: any): any\tClass ListView", "off(${1:eventNames: string | GestureTypes}, ${2:callback?: function}, ${3:thisArg?: any})"],
    ["off(eventNames: string | GestureTypes, callback?: function, thisArg?: any): any\tClass TextView", "off(${1:eventNames: string | GestureTypes}, ${2:callback?: function}, ${3:thisArg?: any})"],
    ["off(eventNames: string | GestureTypes, callback?: function, thisArg?: any): any\tClass Repeater", "off(${1:eventNames: string | GestureTypes}, ${2:callback?: function}, ${3:thisArg?: any})"],
    ["removeEventListener(eventNames: string, callback?: any, thisArg?: any): any\tClass NavigationButton", "removeEventListener(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["removeEventListener(eventNames: string, callback?: any, thisArg?: any): any\tClass CustomLayoutView", "removeEventListener(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["off(eventNames: string | GestureTypes, callback?: function, thisArg?: any): any\tClass Progress", "off(${1:eventNames: string | GestureTypes}, ${2:callback?: function}, ${3:thisArg?: any})"],
    ["removeEventListener(eventNames: string, callback?: any, thisArg?: any): any\tClass EditableTextBase", "removeEventListener(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["off(eventNames: string | GestureTypes, callback?: function, thisArg?: any): any\tClass HtmlView", "off(${1:eventNames: string | GestureTypes}, ${2:callback?: function}, ${3:thisArg?: any})"],
    ["measureChild(parent: View, child: View, widthMeasureSpec: number, heightMeasureSpec: number): object\tClass Page", "measureChild(${1:parent: View}, ${2:child: View}, ${3:widthMeasureSpec: number}, ${4:heightMeasureSpec: number})"],
    ["off(eventNames: string | GestureTypes, callback?: function, thisArg?: any): any\tClass TextBase", "off(${1:eventNames: string | GestureTypes}, ${2:callback?: function}, ${3:thisArg?: any})"],
    ["removeEventListener(eventNames: string, callback?: any, thisArg?: any): any\tInterface AndroidFrame", "removeEventListener(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["removeEventListener(eventNames: string, callback?: any, thisArg?: any): any\tClass VirtualArray<T>", "removeEventListener(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["off(eventNames: string | GestureTypes, callback?: function, thisArg?: any): any\tClass WebView", "off(${1:eventNames: string | GestureTypes}, ${2:callback?: function}, ${3:thisArg?: any})"],
    ["removeEventListener(eventNames: string, callback?: any, thisArg?: any): any\tClass FormattedString", "removeEventListener(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["off(eventNames: string | GestureTypes, callback?: function, thisArg?: any): any\tClass TabView", "off(${1:eventNames: string | GestureTypes}, ${2:callback?: function}, ${3:thisArg?: any})"],
    ["off(eventNames: string | GestureTypes, callback?: function, thisArg?: any): any\tClass Layout", "off(${1:eventNames: string | GestureTypes}, ${2:callback?: function}, ${3:thisArg?: any})"],
    ["off(eventNames: string | GestureTypes, callback?: function, thisArg?: any): any\tClass Border", "off(${1:eventNames: string | GestureTypes}, ${2:callback?: function}, ${3:thisArg?: any})"],
    ["removeEventListener(eventNames: string, callback?: any, thisArg?: any): any\tClass AbsoluteLayout", "removeEventListener(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["showModal(page: Page, context: any, closeCallback: Function, fullscreen?: boolean): Page\tClass Page", "showModal(${1:page: Page}, ${2:context: any}, ${3:closeCallback: Function}, ${4:fullscreen?: boolean})"],
    ["off(eventNames: string | GestureTypes, callback?: function, thisArg?: any): any\tClass Button", "off(${1:eventNames: string | GestureTypes}, ${2:callback?: function}, ${3:thisArg?: any})"],
    ["off(eventNames: string | GestureTypes, callback?: function, thisArg?: any): any\tClass Switch", "off(${1:eventNames: string | GestureTypes}, ${2:callback?: function}, ${3:thisArg?: any})"],
    ["off(eventNames: string | GestureTypes, callback?: function, thisArg?: any): any\tClass Slider", "off(${1:eventNames: string | GestureTypes}, ${2:callback?: function}, ${3:thisArg?: any})"],
    ["off(eventNames: string | GestureTypes, callback?: function, thisArg?: any): any\tClass Image", "off(${1:eventNames: string | GestureTypes}, ${2:callback?: function}, ${3:thisArg?: any})"],
    ["off(eventNames: string | GestureTypes, callback?: function, thisArg?: any): any\tClass Label", "off(${1:eventNames: string | GestureTypes}, ${2:callback?: function}, ${3:thisArg?: any})"],
    ["off(eventNames: string | GestureTypes, callback?: function, thisArg?: any): any\tClass Frame", "off(${1:eventNames: string | GestureTypes}, ${2:callback?: function}, ${3:thisArg?: any})"],
    ["off(eventNames: string | GestureTypes, callback?: function, thisArg?: any): any\tClass Page", "off(${1:eventNames: string | GestureTypes}, ${2:callback?: function}, ${3:thisArg?: any})"],
    ["off(eventNames: string | GestureTypes, callback?: function, thisArg?: any): any\tClass View", "off(${1:eventNames: string | GestureTypes}, ${2:callback?: function}, ${3:thisArg?: any})"],
    ["removeEventListener(eventNames: string, callback?: any, thisArg?: any): any\tClass SegmentedBar", "removeEventListener(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["removeEventListener(eventNames: string, callback?: any, thisArg?: any): any\tClass ContentView", "removeEventListener(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["removeEventListener(eventNames: string, callback?: any, thisArg?: any): any\tClass TabViewItem", "removeEventListener(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["removeEventListener(eventNames: string, callback?: any, thisArg?: any): any\tClass StackLayout", "removeEventListener(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["removeEventListener(eventNames: string, callback?: any, thisArg?: any): any\tClass ProxyObject", "removeEventListener(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["removeEventListener(eventNames: string, callback?: any, thisArg?: any): any\tClass Placeholder", "removeEventListener(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["removeEventListener(eventNames: string, callback?: any, thisArg?: any): any\tClass ListPicker", "removeEventListener(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["removeEventListener(eventNames: string, callback?: any, thisArg?: any): any\tClass LayoutBase", "removeEventListener(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["removeEventListener(eventNames: string, callback?: any, thisArg?: any): any\tClass ActionItem", "removeEventListener(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["removeEventListener(eventNames: string, callback?: any, thisArg?: any): any\tClass WrapLayout", "removeEventListener(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["removeEventListener(eventNames: string, callback?: any, thisArg?: any): any\tClass GridLayout", "removeEventListener(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["removeEventListener(eventNames: string, callback?: any, thisArg?: any): any\tClass ScrollView", "removeEventListener(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["removeEventListener(eventNames: string, callback?: any, thisArg?: any): any\tClass TimePicker", "removeEventListener(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["removeEventListener(eventNames: string, callback?: any, thisArg?: any): any\tClass DatePicker", "removeEventListener(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["removeEventListener(eventNames: string, callback?: any, thisArg?: any): any\tClass DockLayout", "removeEventListener(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["removeEventListener(eventNames: string, callback?: any, thisArg?: any): any\tClass Observable", "removeEventListener(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["removeEventListener(eventNames: string, callback?: any, thisArg?: any): any\tClass SearchBar", "removeEventListener(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["removeEventListener(eventNames: string, callback?: any, thisArg?: any): any\tClass ActionBar", "removeEventListener(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["removeEventListener(eventNames: string, callback?: any, thisArg?: any): any\tClass TextField", "removeEventListener(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["removeEventListener(eventNames: string, callback?: any, thisArg?: any): any\tClass Bindable", "removeEventListener(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["removeEventListener(eventNames: string, callback?: any, thisArg?: any): any\tClass HtmlView", "removeEventListener(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["removeEventListener(eventNames: string, callback?: any, thisArg?: any): any\tClass Progress", "removeEventListener(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["removeEventListener(eventNames: string, callback?: any, thisArg?: any): any\tClass TextView", "removeEventListener(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["removeEventListener(eventNames: string, callback?: any, thisArg?: any): any\tClass TextBase", "removeEventListener(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["removeEventListener(eventNames: string, callback?: any, thisArg?: any): any\tClass ListView", "removeEventListener(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["removeEventListener(eventNames: string, callback?: any, thisArg?: any): any\tClass Repeater", "removeEventListener(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["removeEventListener(eventNames: string, callback?: any, thisArg?: any): any\tClass WebView", "removeEventListener(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["removeEventListener(eventNames: string, callback?: any, thisArg?: any): any\tClass TabView", "removeEventListener(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["removeEventListener(eventNames: string, callback?: any, thisArg?: any): any\tClass Switch", "removeEventListener(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["removeEventListener(eventNames: string, callback?: any, thisArg?: any): any\tClass Layout", "removeEventListener(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["removeEventListener(eventNames: string, callback?: any, thisArg?: any): any\tClass Slider", "removeEventListener(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["removeEventListener(eventNames: string, callback?: any, thisArg?: any): any\tClass Border", "removeEventListener(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["removeEventListener(eventNames: string, callback?: any, thisArg?: any): any\tClass Button", "removeEventListener(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["_setCurrentLayoutBounds(left: number, top: number, right: number, bottom: number): void\tClass ProxyViewContainer", "_setCurrentLayoutBounds(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["_setCurrentLayoutBounds(left: number, top: number, right: number, bottom: number): void\tClass ActivityIndicator", "_setCurrentLayoutBounds(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["removeEventListener(eventNames: string, callback?: any, thisArg?: any): any\tClass Style", "removeEventListener(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["removeEventListener(eventNames: string, callback?: any, thisArg?: any): any\tClass Cache", "removeEventListener(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["removeEventListener(eventNames: string, callback?: any, thisArg?: any): any\tClass Frame", "removeEventListener(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["removeEventListener(eventNames: string, callback?: any, thisArg?: any): any\tClass Style", "removeEventListener(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["removeEventListener(eventNames: string, callback?: any, thisArg?: any): any\tClass Image", "removeEventListener(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["removeEventListener(eventNames: string, callback?: any, thisArg?: any): any\tClass Label", "removeEventListener(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["_setCurrentLayoutBounds(left: number, top: number, right: number, bottom: number): void\tClass CustomLayoutView", "_setCurrentLayoutBounds(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["removeEventListener(eventNames: string, callback?: any, thisArg?: any): any\tClass Page", "removeEventListener(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["_setCurrentLayoutBounds(left: number, top: number, right: number, bottom: number): void\tClass EditableTextBase", "_setCurrentLayoutBounds(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["removeEventListener(eventNames: string, callback?: any, thisArg?: any): any\tClass View", "removeEventListener(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["removeEventListener(eventNames: string, callback?: any, thisArg?: any): any\tClass Span", "removeEventListener(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["writeTextSync(content: string, onError?: function, encoding?: string): void\tClass File", "writeTextSync(${1:content: string}, ${2:onError?: function}, ${3:encoding?: string})"],
    ["on(event: activityRequestPermissions, callback: function, thisArg?: any): any\tClass AndroidApplication", "on(${1:event: activityRequestPermissions}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["on(eventNames: string | GestureTypes, callback: function, thisArg?: any): any\tClass ProxyViewContainer", "on(${1:eventNames: string | GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["action(message: string, cancelButtonText: string, actions: Array<string>): Promise<string>\tModule ui/dialogs", "action(${1:message: string}, ${2:cancelButtonText: string}, ${3:actions: Array<string>})"],
    ["_setCurrentLayoutBounds(left: number, top: number, right: number, bottom: number): void\tClass AbsoluteLayout", "_setCurrentLayoutBounds(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["addEventListener(eventNames: string, callback: function, thisArg?: any): any\tClass DependencyObservable", "addEventListener(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["on(eventNames: string | GestureTypes, callback: function, thisArg?: any): any\tClass ActivityIndicator", "on(${1:eventNames: string | GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["addEventListener(eventNames: string, callback: function, thisArg?: any): any\tClass AndroidApplication", "addEventListener(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_setCurrentLayoutBounds(left: number, top: number, right: number, bottom: number): void\tClass SegmentedBar", "_setCurrentLayoutBounds(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["on(eventNames: string | GestureTypes, callback: function, thisArg?: any): any\tClass CustomLayoutView", "on(${1:eventNames: string | GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["addEventListener(eventNames: string, callback: function, thisArg?: any): any\tClass ProxyViewContainer", "addEventListener(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["addEventListener(eventNames: string, callback: function, thisArg?: any): any\tClass ObservableArray<T>", "addEventListener(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["on(eventNames: string | GestureTypes, callback: function, thisArg?: any): any\tClass EditableTextBase", "on(${1:eventNames: string | GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_setCurrentLayoutBounds(left: number, top: number, right: number, bottom: number): void\tClass ContentView", "_setCurrentLayoutBounds(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["onNavigatingTo(context: any, isBackNavigation: boolean, bindingContext?: any): void\tClass Page", "onNavigatingTo(${1:context: any}, ${2:isBackNavigation: boolean}, ${3:bindingContext?: any})"],
    ["_setCurrentLayoutBounds(left: number, top: number, right: number, bottom: number): void\tClass StackLayout", "_setCurrentLayoutBounds(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["addEventListener(eventNames: string, callback: function, thisArg?: any): any\tClass ActivityIndicator", "addEventListener(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_setCurrentLayoutBounds(left: number, top: number, right: number, bottom: number): void\tClass Placeholder", "_setCurrentLayoutBounds(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["addEventListener(eventNames: string, callback: function, thisArg?: any): any\tClass CustomLayoutView", "addEventListener(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_setCurrentLayoutBounds(left: number, top: number, right: number, bottom: number): void\tClass TimePicker", "_setCurrentLayoutBounds(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["_setCurrentLayoutBounds(left: number, top: number, right: number, bottom: number): void\tClass GridLayout", "_setCurrentLayoutBounds(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["_setCurrentLayoutBounds(left: number, top: number, right: number, bottom: number): void\tClass DatePicker", "_setCurrentLayoutBounds(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["addEventListener(eventNames: string, callback: function, thisArg?: any): any\tClass SegmentedBarItem", "addEventListener(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["addEventListener(eventNames: string, callback: function, thisArg?: any): any\tClass NavigationButton", "addEventListener(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_setCurrentLayoutBounds(left: number, top: number, right: number, bottom: number): void\tClass LayoutBase", "_setCurrentLayoutBounds(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["addEventListener(eventNames: string, callback: function, thisArg?: any): any\tInterface AndroidFrame", "addEventListener(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_setCurrentLayoutBounds(left: number, top: number, right: number, bottom: number): void\tClass WrapLayout", "_setCurrentLayoutBounds(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["keyframeAnimationFromInfo(info: KeyframeAnimationInfo, valueSourceModifier: number): any\tClass KeyframeAnimation", "keyframeAnimationFromInfo(${1:info: KeyframeAnimationInfo}, ${2:valueSourceModifier: number})"],
    ["_setCurrentLayoutBounds(left: number, top: number, right: number, bottom: number): void\tClass ScrollView", "_setCurrentLayoutBounds(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["addEventListener(eventNames: string, callback: function, thisArg?: any): any\tClass EditableTextBase", "addEventListener(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_setCurrentLayoutBounds(left: number, top: number, right: number, bottom: number): void\tClass DockLayout", "_setCurrentLayoutBounds(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["_setCurrentLayoutBounds(left: number, top: number, right: number, bottom: number): void\tClass ListPicker", "_setCurrentLayoutBounds(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["on(eventNames: string | GestureTypes, callback: function, thisArg?: any): any\tClass AbsoluteLayout", "on(${1:eventNames: string | GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_setCurrentLayoutBounds(left: number, top: number, right: number, bottom: number): void\tClass SearchBar", "_setCurrentLayoutBounds(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["_setCurrentLayoutBounds(left: number, top: number, right: number, bottom: number): void\tClass ActionBar", "_setCurrentLayoutBounds(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["_setCurrentLayoutBounds(left: number, top: number, right: number, bottom: number): void\tClass TextField", "_setCurrentLayoutBounds(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["addEventListener(eventNames: string, callback: function, thisArg?: any): any\tClass VirtualArray<T>", "addEventListener(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["addEventListener(eventNames: string, callback: function, thisArg?: any): any\tClass FormattedString", "addEventListener(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_setCurrentLayoutBounds(left: number, top: number, right: number, bottom: number): void\tClass Progress", "_setCurrentLayoutBounds(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["_setCurrentLayoutBounds(left: number, top: number, right: number, bottom: number): void\tClass TextView", "_setCurrentLayoutBounds(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["_setCurrentLayoutBounds(left: number, top: number, right: number, bottom: number): void\tClass HtmlView", "_setCurrentLayoutBounds(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["addEventListener(eventNames: string, callback: function, thisArg?: any): any\tClass AbsoluteLayout", "addEventListener(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_setCurrentLayoutBounds(left: number, top: number, right: number, bottom: number): void\tClass Repeater", "_setCurrentLayoutBounds(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["_setCurrentLayoutBounds(left: number, top: number, right: number, bottom: number): void\tClass TextBase", "_setCurrentLayoutBounds(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["_setCurrentLayoutBounds(left: number, top: number, right: number, bottom: number): void\tClass ListView", "_setCurrentLayoutBounds(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["on(eventNames: string | GestureTypes, callback: function, thisArg?: any): any\tClass StackLayout", "on(${1:eventNames: string | GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_setCurrentLayoutBounds(left: number, top: number, right: number, bottom: number): void\tClass WebView", "_setCurrentLayoutBounds(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["readText(path: string, onError?: function, encoding?: any): string\tClass FileSystemAccess", "readText(${1:path: string}, ${2:onError?: function}, ${3:encoding?: any})"],
    ["_setCurrentLayoutBounds(left: number, top: number, right: number, bottom: number): void\tClass TabView", "_setCurrentLayoutBounds(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["on(eventNames: string | GestureTypes, callback: function, thisArg?: any): any\tClass ContentView", "on(${1:eventNames: string | GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["on(eventNames: string | GestureTypes, callback: function, thisArg?: any): any\tClass LayoutBase", "on(${1:eventNames: string | GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["addEventListener(eventNames: string, callback: function, thisArg?: any): any\tClass SegmentedBar", "addEventListener(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["on(eventNames: string | GestureTypes, callback: function, thisArg?: any): any\tClass TimePicker", "on(${1:eventNames: string | GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["on(eventNames: string | GestureTypes, callback: function, thisArg?: any): any\tClass DatePicker", "on(${1:eventNames: string | GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["on(eventNames: string | GestureTypes, callback: function, thisArg?: any): any\tClass GridLayout", "on(${1:eventNames: string | GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_setCurrentLayoutBounds(left: number, top: number, right: number, bottom: number): void\tClass Border", "_setCurrentLayoutBounds(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["on(eventNames: string | GestureTypes, callback: function, thisArg?: any): any\tClass ListPicker", "on(${1:eventNames: string | GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["on(eventNames: string | GestureTypes, callback: function, thisArg?: any): any\tClass DockLayout", "on(${1:eventNames: string | GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["on(eventNames: string | GestureTypes, callback: function, thisArg?: any): any\tClass WrapLayout", "on(${1:eventNames: string | GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["registerSpecialProperty(name: string, setter: PropertySetter): void\tModule ui/builder/special-properties", "registerSpecialProperty(${1:name: string}, ${2:setter: PropertySetter})"],
    ["_setCurrentLayoutBounds(left: number, top: number, right: number, bottom: number): void\tClass Switch", "_setCurrentLayoutBounds(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["_setCurrentLayoutBounds(left: number, top: number, right: number, bottom: number): void\tClass Slider", "_setCurrentLayoutBounds(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["_setCurrentLayoutBounds(left: number, top: number, right: number, bottom: number): void\tClass Button", "_setCurrentLayoutBounds(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["_setCurrentLayoutBounds(left: number, top: number, right: number, bottom: number): void\tClass Layout", "_setCurrentLayoutBounds(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["_setCurrentLayoutBounds(left: number, top: number, right: number, bottom: number): void\tClass Label", "_setCurrentLayoutBounds(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["addEventListener(eventNames: string, callback: function, thisArg?: any): any\tClass ProxyObject", "addEventListener(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["addEventListener(eventNames: string, callback: function, thisArg?: any): any\tClass StackLayout", "addEventListener(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["addEventListener(eventNames: string, callback: function, thisArg?: any): any\tClass ContentView", "addEventListener(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["addEventListener(eventNames: string, callback: function, thisArg?: any): any\tClass Placeholder", "addEventListener(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_setCurrentLayoutBounds(left: number, top: number, right: number, bottom: number): void\tClass Image", "_setCurrentLayoutBounds(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["addEventListener(eventNames: string, callback: function, thisArg?: any): any\tClass TabViewItem", "addEventListener(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["on(eventNames: string | GestureTypes, callback: function, thisArg?: any): any\tClass TextField", "on(${1:eventNames: string | GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_setCurrentLayoutBounds(left: number, top: number, right: number, bottom: number): void\tClass Frame", "_setCurrentLayoutBounds(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["on(eventNames: string | GestureTypes, callback: function, thisArg?: any): any\tClass ActionBar", "on(${1:eventNames: string | GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["addEventListener(eventNames: string, callback: function, thisArg?: any): any\tClass DatePicker", "addEventListener(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["on(eventNames: string | GestureTypes, callback: function, thisArg?: any): any\tClass TextBase", "on(${1:eventNames: string | GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["on(eventNames: string | GestureTypes, callback: function, thisArg?: any): any\tClass HtmlView", "on(${1:eventNames: string | GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["addEventListener(eventNames: string, callback: function, thisArg?: any): any\tClass DockLayout", "addEventListener(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["on(eventNames: string | GestureTypes, callback: function, thisArg?: any): any\tClass TextView", "on(${1:eventNames: string | GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["layoutNativeView(left: number, top: number, right: number, bottom: number): void\tClass ProxyViewContainer", "layoutNativeView(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["on(eventNames: string | GestureTypes, callback: function, thisArg?: any): any\tClass Repeater", "on(${1:eventNames: string | GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["addEventListener(eventNames: string, callback: function, thisArg?: any): any\tClass Observable", "addEventListener(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["addEventListener(eventNames: string, callback: function, thisArg?: any): any\tClass ListPicker", "addEventListener(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["addEventListener(eventNames: string, callback: function, thisArg?: any): any\tClass LayoutBase", "addEventListener(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["addEventListener(eventNames: string, callback: function, thisArg?: any): any\tClass ScrollView", "addEventListener(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_setCurrentLayoutBounds(left: number, top: number, right: number, bottom: number): void\tClass Page", "_setCurrentLayoutBounds(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["addEventListener(eventNames: string, callback: function, thisArg?: any): any\tClass GridLayout", "addEventListener(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["on(eventNames: string | GestureTypes, callback: function, thisArg?: any): any\tClass Progress", "on(${1:eventNames: string | GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["addEventListener(eventNames: string, callback: function, thisArg?: any): any\tClass WrapLayout", "addEventListener(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_setCurrentLayoutBounds(left: number, top: number, right: number, bottom: number): void\tClass View", "_setCurrentLayoutBounds(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["addEventListener(eventNames: string, callback: function, thisArg?: any): any\tClass TimePicker", "addEventListener(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["addEventListener(eventNames: string, callback: function, thisArg?: any): any\tClass ActionItem", "addEventListener(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["addEventListener(eventNames: string, callback: function, thisArg?: any): any\tClass SearchBar", "addEventListener(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["layoutNativeView(left: number, top: number, right: number, bottom: number): void\tClass ActivityIndicator", "layoutNativeView(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["addEventListener(eventNames: string, callback: function, thisArg?: any): any\tClass TextField", "addEventListener(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["addEventListener(eventNames: string, callback: function, thisArg?: any): any\tClass ActionBar", "addEventListener(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["on(eventNames: string | GestureTypes, callback: function, thisArg?: any): any\tClass Switch", "on(${1:eventNames: string | GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["addEventListener(eventNames: string, callback: function, thisArg?: any): any\tClass Progress", "addEventListener(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["addEventListener(eventNames: string, callback: function, thisArg?: any): any\tClass Bindable", "addEventListener(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["on(eventNames: string | GestureTypes, callback: function, thisArg?: any): any\tClass Border", "on(${1:eventNames: string | GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["addEventListener(eventNames: string, callback: function, thisArg?: any): any\tClass HtmlView", "addEventListener(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["on(eventNames: string | GestureTypes, callback: function, thisArg?: any): any\tClass Slider", "on(${1:eventNames: string | GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["addEventListener(eventNames: string, callback: function, thisArg?: any): any\tClass TextView", "addEventListener(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["addEventListener(eventNames: string, callback: function, thisArg?: any): any\tClass TextBase", "addEventListener(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["layoutNativeView(left: number, top: number, right: number, bottom: number): void\tClass EditableTextBase", "layoutNativeView(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["layoutNativeView(left: number, top: number, right: number, bottom: number): void\tClass CustomLayoutView", "layoutNativeView(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["addFormattedStringToView(view: FormattedStringView, name: string, value: any): void\tClass FormattedString", "addFormattedStringToView(${1:view: FormattedStringView}, ${2:name: string}, ${3:value: any})"],
    ["addEventListener(eventNames: string, callback: function, thisArg?: any): any\tClass ListView", "addEventListener(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["addEventListener(eventNames: string, callback: function, thisArg?: any): any\tClass Repeater", "addEventListener(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["on(eventNames: string | GestureTypes, callback: function, thisArg?: any): any\tClass Layout", "on(${1:eventNames: string | GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["on(eventNames: string | GestureTypes, callback: function, thisArg?: any): any\tClass Label", "on(${1:eventNames: string | GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["addEventListener(eventNames: string, callback: function, thisArg?: any): any\tClass TabView", "addEventListener(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["onSaveInstanceState(activity: any, outState: any, superFunc: Function): void\tInterface AndroidActivityCallbacks", "onSaveInstanceState(${1:activity: any}, ${2:outState: any}, ${3:superFunc: Function})"],
    ["on(eventNames: string | GestureTypes, callback: function, thisArg?: any): any\tClass Image", "on(${1:eventNames: string | GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["addNotificationObserver(notificationName: string, onReceiveCallback: function): any\tInterface iOSApplication", "addNotificationObserver(${1:notificationName: string}, ${2:onReceiveCallback: function})"],
    ["onSaveInstanceState(fragment: any, outState: any, superFunc: Function): void\tInterface AndroidFragmentCallbacks", "onSaveInstanceState(${1:fragment: any}, ${2:outState: any}, ${3:superFunc: Function})"],
    ["addEventListener(eventNames: string, callback: function, thisArg?: any): any\tClass WebView", "addEventListener(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_setCurrentMeasureSpecs(widthMeasureSpec: number, heightMeasureSpec: number): boolean\tClass ProxyViewContainer", "_setCurrentMeasureSpecs(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["_setCurrentMeasureSpecs(widthMeasureSpec: number, heightMeasureSpec: number): boolean\tClass ActivityIndicator", "_setCurrentMeasureSpecs(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["addEventListener(eventNames: string, callback: function, thisArg?: any): any\tClass Switch", "addEventListener(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["addEventListener(eventNames: string, callback: function, thisArg?: any): any\tClass Slider", "addEventListener(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["off(eventNames: string, callback?: any, thisArg?: any): any\tClass DependencyObservable", "off(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["addEventListener(eventNames: string, callback: function, thisArg?: any): any\tClass Button", "addEventListener(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["layoutNativeView(left: number, top: number, right: number, bottom: number): void\tClass AbsoluteLayout", "layoutNativeView(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["on(event: activityBackPressed, callback: function, thisArg?: any): any\tClass AndroidApplication", "on(${1:event: activityBackPressed}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["addEventListener(eventNames: string, callback: function, thisArg?: any): any\tClass Border", "addEventListener(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["on(eventNames: string | GestureTypes, callback: function, thisArg?: any): any\tClass View", "on(${1:eventNames: string | GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["addEventListener(eventNames: string, callback: function, thisArg?: any): any\tClass Layout", "addEventListener(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["addEventListener(eventNames: string, callback: function, thisArg?: any): any\tClass Style", "addEventListener(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["addEventListener(eventNames: string, callback: function, thisArg?: any): any\tClass Style", "addEventListener(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["onCreate(activity: any, savedInstanceState: any, superFunc: Function): void\tInterface AndroidActivityCallbacks", "onCreate(${1:activity: any}, ${2:savedInstanceState: any}, ${3:superFunc: Function})"],
    ["onCreate(fragment: any, savedInstanceState: any, superFunc: Function): void\tInterface AndroidFragmentCallbacks", "onCreate(${1:fragment: any}, ${2:savedInstanceState: any}, ${3:superFunc: Function})"],
    ["_setCurrentMeasureSpecs(widthMeasureSpec: number, heightMeasureSpec: number): boolean\tClass EditableTextBase", "_setCurrentMeasureSpecs(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["addEventListener(eventNames: string, callback: function, thisArg?: any): any\tClass Cache", "addEventListener(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["addEventListener(eventNames: string, callback: function, thisArg?: any): any\tClass Frame", "addEventListener(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_setCurrentMeasureSpecs(widthMeasureSpec: number, heightMeasureSpec: number): boolean\tClass CustomLayoutView", "_setCurrentMeasureSpecs(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["addEventListener(eventNames: string, callback: function, thisArg?: any): any\tClass Label", "addEventListener(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["addEventListener(eventNames: string, callback: function, thisArg?: any): any\tClass Image", "addEventListener(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["then(onFulfilled?: function, onRejected?: function): AnimationPromise\tClass AnimationPromise", "then(${1:onFulfilled?: function}, ${2:onRejected?: function})"],
    ["then(onFulfilled?: function, onRejected?: function): AnimationPromise\tClass AnimationPromise", "then(${1:onFulfilled?: function}, ${2:onRejected?: function})"],
    ["addEventListener(eventNames: string, callback: function, thisArg?: any): any\tClass View", "addEventListener(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_onFragmentHidden(fragment: any, isBack: boolean, destroyed: boolean): void\tModule ui/transition", "_onFragmentHidden(${1:fragment: any}, ${2:isBack: boolean}, ${3:destroyed: boolean})"],
    ["addEventListener(eventNames: string, callback: function, thisArg?: any): any\tClass Page", "addEventListener(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["registerBroadcastReceiver(intentFilter: string, onReceiveCallback: function): void\tClass AndroidApplication", "registerBroadcastReceiver(${1:intentFilter: string}, ${2:onReceiveCallback: function})"],
    ["createSelectorsFromCss(css: string, cssFileName: string, keyframes: Object): RuleSet[]\tClass StyleScope", "createSelectorsFromCss(${1:css: string}, ${2:cssFileName: string}, ${3:keyframes: Object})"],
    ["layoutNativeView(left: number, top: number, right: number, bottom: number): void\tClass SegmentedBar", "layoutNativeView(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["off(eventNames: string, callback?: any, thisArg?: any): any\tClass AndroidApplication", "off(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["then<U>(onFulfilled?: function, onRejected?: function): Promise<U>\tClass AnimationPromise", "then<U>(${1:onFulfilled?: function}, ${2:onRejected?: function})"],
    ["registerShorthandCallback(name: string, callback: function): void\tModule ui/styling/style-property", "registerShorthandCallback(${1:name: string}, ${2:callback: function})"],
    ["off(eventNames: string, callback?: any, thisArg?: any): any\tClass ObservableArray<T>", "off(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["addEventListener(eventNames: string, callback: function, thisArg?: any): any\tClass Span", "addEventListener(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_setCurrentMeasureSpecs(widthMeasureSpec: number, heightMeasureSpec: number): boolean\tClass AbsoluteLayout", "_setCurrentMeasureSpecs(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["layoutNativeView(left: number, top: number, right: number, bottom: number): void\tClass StackLayout", "layoutNativeView(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["layoutNativeView(left: number, top: number, right: number, bottom: number): void\tClass ContentView", "layoutNativeView(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["onHiddenChanged(fragment: any, hidden: boolean, superFunc: Function): void\tInterface AndroidFragmentCallbacks", "onHiddenChanged(${1:fragment: any}, ${2:hidden: boolean}, ${3:superFunc: Function})"],
    ["layoutNativeView(left: number, top: number, right: number, bottom: number): void\tClass Placeholder", "layoutNativeView(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["off(eventNames: string, callback?: any, thisArg?: any): any\tClass SegmentedBarItem", "off(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["layoutNativeView(left: number, top: number, right: number, bottom: number): void\tClass TimePicker", "layoutNativeView(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["layoutNativeView(left: number, top: number, right: number, bottom: number): void\tClass DockLayout", "layoutNativeView(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["on(event: saveActivityState, callback: function, thisArg?: any): any\tClass AndroidApplication", "on(${1:event: saveActivityState}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["getShorthandPairs(name: string, value: any): Array<KeyValuePair<Property, any>>\tModule ui/styling/style-property", "getShorthandPairs(${1:name: string}, ${2:value: any})"],
    ["eachEntity(path: string, onEntity: function, onError?: function): any\tClass FileSystemAccess", "eachEntity(${1:path: string}, ${2:onEntity: function}, ${3:onError?: function})"],
    ["layoutNativeView(left: number, top: number, right: number, bottom: number): void\tClass WrapLayout", "layoutNativeView(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["on(event: activityDestroyed, callback: function, thisArg?: any): any\tClass AndroidApplication", "on(${1:event: activityDestroyed}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["layoutNativeView(left: number, top: number, right: number, bottom: number): void\tClass GridLayout", "layoutNativeView(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["layoutNativeView(left: number, top: number, right: number, bottom: number): void\tClass DatePicker", "layoutNativeView(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["layoutNativeView(left: number, top: number, right: number, bottom: number): void\tClass ListPicker", "layoutNativeView(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["off(eventNames: string, callback?: any, thisArg?: any): any\tClass NavigationButton", "off(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["off(eventNames: string, callback?: any, thisArg?: any): any\tInterface AndroidFrame", "off(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["layoutNativeView(left: number, top: number, right: number, bottom: number): void\tClass ScrollView", "layoutNativeView(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["on(event: selectedIndexChanged, callback: function, thisArg?: any): any\tClass SegmentedBar", "on(${1:event: selectedIndexChanged}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["layoutNativeView(left: number, top: number, right: number, bottom: number): void\tClass LayoutBase", "layoutNativeView(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["off(eventNames: string, callback?: any, thisArg?: any): any\tClass FormattedString", "off(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["layoutNativeView(left: number, top: number, right: number, bottom: number): void\tClass ActionBar", "layoutNativeView(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["off(eventNames: string, callback?: any, thisArg?: any): any\tClass VirtualArray<T>", "off(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["layoutNativeView(left: number, top: number, right: number, bottom: number): void\tClass SearchBar", "layoutNativeView(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["layoutNativeView(left: number, top: number, right: number, bottom: number): void\tClass TextField", "layoutNativeView(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["_setCurrentMeasureSpecs(widthMeasureSpec: number, heightMeasureSpec: number): boolean\tClass SegmentedBar", "_setCurrentMeasureSpecs(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["observe(type: GestureTypes, callback: function, thisArg?: any): any\tClass ProxyViewContainer", "observe(${1:type: GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_setCurrentMeasureSpecs(widthMeasureSpec: number, heightMeasureSpec: number): boolean\tClass StackLayout", "_setCurrentMeasureSpecs(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["layoutNativeView(left: number, top: number, right: number, bottom: number): void\tClass Repeater", "layoutNativeView(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["getFile(options: HttpRequestOptions, destinationFilePath?: string): Promise<File>\tModule http", "getFile(${1:options: HttpRequestOptions}, ${2:destinationFilePath?: string})"],
    ["layoutNativeView(left: number, top: number, right: number, bottom: number): void\tClass TextBase", "layoutNativeView(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["layoutNativeView(left: number, top: number, right: number, bottom: number): void\tClass TextView", "layoutNativeView(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["layoutNativeView(left: number, top: number, right: number, bottom: number): void\tClass HtmlView", "layoutNativeView(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["_setCurrentMeasureSpecs(widthMeasureSpec: number, heightMeasureSpec: number): boolean\tClass ContentView", "_setCurrentMeasureSpecs(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["_setCurrentMeasureSpecs(widthMeasureSpec: number, heightMeasureSpec: number): boolean\tClass Placeholder", "_setCurrentMeasureSpecs(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["layoutNativeView(left: number, top: number, right: number, bottom: number): void\tClass Progress", "layoutNativeView(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["layoutNativeView(left: number, top: number, right: number, bottom: number): void\tClass ListView", "layoutNativeView(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["layoutNativeView(left: number, top: number, right: number, bottom: number): void\tClass TabView", "layoutNativeView(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["observe(type: GestureTypes, callback: function, thisArg?: any): any\tClass ActivityIndicator", "observe(${1:type: GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_setCurrentMeasureSpecs(widthMeasureSpec: number, heightMeasureSpec: number): boolean\tClass ScrollView", "_setCurrentMeasureSpecs(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["_setCurrentMeasureSpecs(widthMeasureSpec: number, heightMeasureSpec: number): boolean\tClass LayoutBase", "_setCurrentMeasureSpecs(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["_setCurrentMeasureSpecs(widthMeasureSpec: number, heightMeasureSpec: number): boolean\tClass WrapLayout", "_setCurrentMeasureSpecs(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["_setCurrentMeasureSpecs(widthMeasureSpec: number, heightMeasureSpec: number): boolean\tClass DockLayout", "_setCurrentMeasureSpecs(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["_setCurrentMeasureSpecs(widthMeasureSpec: number, heightMeasureSpec: number): boolean\tClass TimePicker", "_setCurrentMeasureSpecs(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["_setCurrentMeasureSpecs(widthMeasureSpec: number, heightMeasureSpec: number): boolean\tClass GridLayout", "_setCurrentMeasureSpecs(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["layoutNativeView(left: number, top: number, right: number, bottom: number): void\tClass WebView", "layoutNativeView(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["_setCurrentMeasureSpecs(widthMeasureSpec: number, heightMeasureSpec: number): boolean\tClass ListPicker", "_setCurrentMeasureSpecs(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["_setCurrentMeasureSpecs(widthMeasureSpec: number, heightMeasureSpec: number): boolean\tClass DatePicker", "_setCurrentMeasureSpecs(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["on(event: propertyChange, callback: function, thisArg?: any): any\tClass DependencyObservable", "on(${1:event: propertyChange}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_setCurrentMeasureSpecs(widthMeasureSpec: number, heightMeasureSpec: number): boolean\tClass TextField", "_setCurrentMeasureSpecs(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["layoutNativeView(left: number, top: number, right: number, bottom: number): void\tClass Slider", "layoutNativeView(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["layoutNativeView(left: number, top: number, right: number, bottom: number): void\tClass Layout", "layoutNativeView(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["layoutNativeView(left: number, top: number, right: number, bottom: number): void\tClass Button", "layoutNativeView(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["observe(type: GestureTypes, callback: function, thisArg?: any): any\tClass CustomLayoutView", "observe(${1:type: GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_setCurrentMeasureSpecs(widthMeasureSpec: number, heightMeasureSpec: number): boolean\tClass SearchBar", "_setCurrentMeasureSpecs(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["on(event: activityCreated, callback: function, thisArg?: any): any\tClass AndroidApplication", "on(${1:event: activityCreated}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["on(event: activityStarted, callback: function, thisArg?: any): any\tClass AndroidApplication", "on(${1:event: activityStarted}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["off(eventNames: string, callback?: any, thisArg?: any): any\tModule application", "off(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["layoutNativeView(left: number, top: number, right: number, bottom: number): void\tClass Border", "layoutNativeView(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["observe(type: GestureTypes, callback: function, thisArg?: any): any\tClass EditableTextBase", "observe(${1:type: GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["on(event: activityStopped, callback: function, thisArg?: any): any\tClass AndroidApplication", "on(${1:event: activityStopped}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_setCurrentMeasureSpecs(widthMeasureSpec: number, heightMeasureSpec: number): boolean\tClass ActionBar", "_setCurrentMeasureSpecs(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["layoutNativeView(left: number, top: number, right: number, bottom: number): void\tClass Switch", "layoutNativeView(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["on(event: orientationChanged, callback: function, thisArg?: any): any\tModule application", "on(${1:event: orientationChanged}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["on(event: activityResumed, callback: function, thisArg?: any): any\tClass AndroidApplication", "on(${1:event: activityResumed}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["layoutNativeView(left: number, top: number, right: number, bottom: number): void\tClass Label", "layoutNativeView(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["on(event: selectedIndexChanged, callback: function, thisArg?: any): any\tClass TabView", "on(${1:event: selectedIndexChanged}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_setCurrentMeasureSpecs(widthMeasureSpec: number, heightMeasureSpec: number): boolean\tClass ListView", "_setCurrentMeasureSpecs(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["off(eventNames: string, callback?: any, thisArg?: any): any\tClass TabViewItem", "off(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["_setCurrentMeasureSpecs(widthMeasureSpec: number, heightMeasureSpec: number): boolean\tClass Progress", "_setCurrentMeasureSpecs(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["_setCurrentMeasureSpecs(widthMeasureSpec: number, heightMeasureSpec: number): boolean\tClass TextView", "_setCurrentMeasureSpecs(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["layoutNativeView(left: number, top: number, right: number, bottom: number): void\tClass Frame", "layoutNativeView(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["_setCurrentMeasureSpecs(widthMeasureSpec: number, heightMeasureSpec: number): boolean\tClass HtmlView", "_setCurrentMeasureSpecs(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["_setCurrentMeasureSpecs(widthMeasureSpec: number, heightMeasureSpec: number): boolean\tClass TextBase", "_setCurrentMeasureSpecs(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["layoutNativeView(left: number, top: number, right: number, bottom: number): void\tClass Image", "layoutNativeView(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["_setCurrentMeasureSpecs(widthMeasureSpec: number, heightMeasureSpec: number): boolean\tClass Repeater", "_setCurrentMeasureSpecs(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["off(eventNames: string, callback?: any, thisArg?: any): any\tClass ProxyObject", "off(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["_setCurrentMeasureSpecs(widthMeasureSpec: number, heightMeasureSpec: number): boolean\tClass WebView", "_setCurrentMeasureSpecs(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["off(eventNames: string, callback?: any, thisArg?: any): any\tClass ActionItem", "off(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["_setCurrentMeasureSpecs(widthMeasureSpec: number, heightMeasureSpec: number): boolean\tClass TabView", "_setCurrentMeasureSpecs(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["layoutNativeView(left: number, top: number, right: number, bottom: number): void\tClass View", "layoutNativeView(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["layoutNativeView(left: number, top: number, right: number, bottom: number): void\tClass Page", "layoutNativeView(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["on(event: activityResult, callback: function, thisArg?: any): any\tClass AndroidApplication", "on(${1:event: activityResult}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["observe(type: GestureTypes, callback: function, thisArg?: any): any\tClass AbsoluteLayout", "observe(${1:type: GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["on(event: activityPaused, callback: function, thisArg?: any): any\tClass AndroidApplication", "on(${1:event: activityPaused}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["off(eventNames: string, callback?: any, thisArg?: any): any\tClass Observable", "off(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["_setCurrentMeasureSpecs(widthMeasureSpec: number, heightMeasureSpec: number): boolean\tClass Layout", "_setCurrentMeasureSpecs(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["_setCurrentMeasureSpecs(widthMeasureSpec: number, heightMeasureSpec: number): boolean\tClass Border", "_setCurrentMeasureSpecs(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["_setCurrentMeasureSpecs(widthMeasureSpec: number, heightMeasureSpec: number): boolean\tClass Switch", "_setCurrentMeasureSpecs(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["_setCurrentMeasureSpecs(widthMeasureSpec: number, heightMeasureSpec: number): boolean\tClass Button", "_setCurrentMeasureSpecs(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["_setCurrentMeasureSpecs(widthMeasureSpec: number, heightMeasureSpec: number): boolean\tClass Slider", "_setCurrentMeasureSpecs(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["_setValue(property: Property, value: any, source?: number): void\tClass DependencyObservable", "_setValue(${1:property: Property}, ${2:value: any}, ${3:source?: number})"],
    ["_onPropertyChanged(property: Property, oldValue: any, newValue: any): void\tClass DependencyObservable", "_onPropertyChanged(${1:property: Property}, ${2:oldValue: any}, ${3:newValue: any})"],
    ["on(event: propertyChange, callback: function, thisArg?: any): any\tClass SegmentedBarItem", "on(${1:event: propertyChange}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["onLayout(left: number, top: number, right: number, bottom: number): void\tClass ProxyViewContainer", "onLayout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["_setCurrentMeasureSpecs(widthMeasureSpec: number, heightMeasureSpec: number): boolean\tClass Image", "_setCurrentMeasureSpecs(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["_setCurrentMeasureSpecs(widthMeasureSpec: number, heightMeasureSpec: number): boolean\tClass Label", "_setCurrentMeasureSpecs(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["_setCurrentMeasureSpecs(widthMeasureSpec: number, heightMeasureSpec: number): boolean\tClass Frame", "_setCurrentMeasureSpecs(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["on(event: propertyChange, callback: function, thisArg?: any): any\tInterface AndroidFrame", "on(${1:event: propertyChange}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["off(eventNames: string, callback?: any, thisArg?: any): any\tClass Bindable", "off(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["observe(type: GestureTypes, callback: function, thisArg?: any): any\tClass SegmentedBar", "observe(${1:type: GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_setValue(property: Property, value: any, source?: number): void\tClass ProxyViewContainer", "_setValue(${1:property: Property}, ${2:value: any}, ${3:source?: number})"],
    ["_setCurrentMeasureSpecs(widthMeasureSpec: number, heightMeasureSpec: number): boolean\tClass View", "_setCurrentMeasureSpecs(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["_onPropertyChanged(property: Property, oldValue: any, newValue: any): void\tClass ProxyViewContainer", "_onPropertyChanged(${1:property: Property}, ${2:oldValue: any}, ${3:newValue: any})"],
    ["_setCurrentMeasureSpecs(widthMeasureSpec: number, heightMeasureSpec: number): boolean\tClass Page", "_setCurrentMeasureSpecs(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["observe(type: GestureTypes, callback: function, thisArg?: any): any\tClass StackLayout", "observe(${1:type: GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["observe(type: GestureTypes, callback: function, thisArg?: any): any\tClass ContentView", "observe(${1:type: GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["onLayout(left: number, top: number, right: number, bottom: number): void\tClass ActivityIndicator", "onLayout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["observe(type: GestureTypes, callback: function, thisArg?: any): any\tClass Placeholder", "observe(${1:type: GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["on(event: propertyChange, callback: function, thisArg?: any): any\tClass FormattedString", "on(${1:event: propertyChange}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["observe(type: GestureTypes, callback: function, thisArg?: any): any\tClass DatePicker", "observe(${1:type: GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["observe(type: GestureTypes, callback: function, thisArg?: any): any\tClass WrapLayout", "observe(${1:type: GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_onPropertyChanged(property: Property, oldValue: any, newValue: any): void\tClass ActivityIndicator", "_onPropertyChanged(${1:property: Property}, ${2:oldValue: any}, ${3:newValue: any})"],
    ["observe(type: GestureTypes, callback: function, thisArg?: any): any\tClass ListPicker", "observe(${1:type: GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["onLayout(left: number, top: number, right: number, bottom: number): void\tClass CustomLayoutView", "onLayout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["observe(type: GestureTypes, callback: function, thisArg?: any): any\tClass GridLayout", "observe(${1:type: GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["observe(type: GestureTypes, callback: function, thisArg?: any): any\tClass TimePicker", "observe(${1:type: GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["observe(type: GestureTypes, callback: function, thisArg?: any): any\tClass ScrollView", "observe(${1:type: GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["on(eventNames: string, callback: function, thisArg?: any): any\tClass DependencyObservable", "on(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["observe(type: GestureTypes, callback: function, thisArg?: any): any\tClass LayoutBase", "observe(${1:type: GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["onLayout(left: number, top: number, right: number, bottom: number): void\tClass EditableTextBase", "onLayout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["_setValue(property: Property, value: any, source?: number): void\tClass ActivityIndicator", "_setValue(${1:property: Property}, ${2:value: any}, ${3:source?: number})"],
    ["observe(type: GestureTypes, callback: function, thisArg?: any): any\tClass DockLayout", "observe(${1:type: GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["off(eventNames: string, callback?: any, thisArg?: any): any\tClass Cache", "off(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["off(eventNames: string, callback?: any, thisArg?: any): any\tClass Style", "off(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["observe(type: GestureTypes, callback: function, thisArg?: any): any\tClass SearchBar", "observe(${1:type: GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["observe(type: GestureTypes, callback: function, thisArg?: any): any\tClass TextField", "observe(${1:type: GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_onPropertyChanged(property: Property, oldValue: any, newValue: any): void\tClass SegmentedBarItem", "_onPropertyChanged(${1:property: Property}, ${2:oldValue: any}, ${3:newValue: any})"],
    ["_onPropertyChanged(property: Property, oldValue: any, newValue: any): void\tClass EditableTextBase", "_onPropertyChanged(${1:property: Property}, ${2:oldValue: any}, ${3:newValue: any})"],
    ["off(eventNames: string, callback?: any, thisArg?: any): any\tClass Style", "off(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["_setValue(property: Property, value: any, source?: number): void\tClass SegmentedBarItem", "_setValue(${1:property: Property}, ${2:value: any}, ${3:source?: number})"],
    ["_setValue(property: Property, value: any, source?: number): void\tClass EditableTextBase", "_setValue(${1:property: Property}, ${2:value: any}, ${3:source?: number})"],
    ["_onPropertyChanged(property: Property, oldValue: any, newValue: any): void\tClass CustomLayoutView", "_onPropertyChanged(${1:property: Property}, ${2:oldValue: any}, ${3:newValue: any})"],
    ["observe(type: GestureTypes, callback: function, thisArg?: any): any\tClass ActionBar", "observe(${1:type: GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_setValue(property: Property, value: any, source?: number): void\tClass NavigationButton", "_setValue(${1:property: Property}, ${2:value: any}, ${3:source?: number})"],
    ["_onPropertyChanged(property: Property, oldValue: any, newValue: any): void\tClass NavigationButton", "_onPropertyChanged(${1:property: Property}, ${2:oldValue: any}, ${3:newValue: any})"],
    ["_setValue(property: Property, value: any, source?: number): void\tClass CustomLayoutView", "_setValue(${1:property: Property}, ${2:value: any}, ${3:source?: number})"],
    ["observe(type: GestureTypes, callback: function, thisArg?: any): any\tClass HtmlView", "observe(${1:type: GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["on(eventNames: string, callback: function, thisArg?: any): any\tClass ObservableArray<T>", "on(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["off(eventNames: string, callback?: any, thisArg?: any): any\tClass Span", "off(${1:eventNames: string}, ${2:callback?: any}, ${3:thisArg?: any})"],
    ["observe(type: GestureTypes, callback: function, thisArg?: any): any\tClass TextView", "observe(${1:type: GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["observe(type: GestureTypes, callback: function, thisArg?: any): any\tClass Progress", "observe(${1:type: GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["observe(type: GestureTypes, callback: function, thisArg?: any): any\tClass TextBase", "observe(${1:type: GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["layout(left: number, top: number, right: number, bottom: number): void\tClass ProxyViewContainer", "layout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["observe(type: GestureTypes, callback: function, thisArg?: any): any\tClass Repeater", "observe(${1:type: GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["observe(type: GestureTypes, callback: function, thisArg?: any): any\tClass ListView", "observe(${1:type: GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["onLayout(left: number, top: number, right: number, bottom: number): void\tClass AbsoluteLayout", "onLayout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["on(eventNames: string, callback: function, thisArg?: any): any\tClass AndroidApplication", "on(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["on(event: propertyChange, callback: function, thisArg?: any): any\tClass TabViewItem", "on(${1:event: propertyChange}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["on(event: propertyChange, callback: function, thisArg?: any): any\tClass ProxyObject", "on(${1:event: propertyChange}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["on(event: itemsLoading, callback: function, thisArg?: any): any\tClass VirtualArray<T>", "on(${1:event: itemsLoading}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["observe(type: GestureTypes, callback: function, thisArg?: any): any\tClass WebView", "observe(${1:type: GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["layout(left: number, top: number, right: number, bottom: number): void\tClass ActivityIndicator", "layout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["rename(path: string, newPath: string, onError?: function): void\tClass FileSystemAccess", "rename(${1:path: string}, ${2:newPath: string}, ${3:onError?: function})"],
    ["_onPropertyChanged(property: Property, oldValue: any, newValue: any): void\tClass AbsoluteLayout", "_onPropertyChanged(${1:property: Property}, ${2:oldValue: any}, ${3:newValue: any})"],
    ["saveToFile(path: string, format: string, quality?: number): boolean\tClass ImageSource", "saveToFile(${1:path: string}, ${2:format: string}, ${3:quality?: number})"],
    ["_setValue(property: Property, value: any, source?: number): void\tClass AbsoluteLayout", "_setValue(${1:property: Property}, ${2:value: any}, ${3:source?: number})"],
    ["observe(type: GestureTypes, callback: function, thisArg?: any): any\tClass TabView", "observe(${1:type: GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["observe(type: GestureTypes, callback: function, thisArg?: any): any\tClass Slider", "observe(${1:type: GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["onLayout(left: number, top: number, right: number, bottom: number): void\tClass SegmentedBar", "onLayout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["observe(type: GestureTypes, callback: function, thisArg?: any): any\tClass Switch", "observe(${1:type: GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["on(eventNames: string, callback: function, thisArg?: any): any\tClass SegmentedBarItem", "on(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["on(event: uncaughtError, callback: function, thisArg?: any): any\tModule application", "on(${1:event: uncaughtError}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["observe(type: GestureTypes, callback: function, thisArg?: any): any\tClass Border", "observe(${1:type: GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["observe(type: GestureTypes, callback: function, thisArg?: any): any\tClass Button", "observe(${1:type: GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["observe(type: GestureTypes, callback: function, thisArg?: any): any\tClass Layout", "observe(${1:type: GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["layout(left: number, top: number, right: number, bottom: number): void\tClass EditableTextBase", "layout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["on(event: propertyChange, callback: function, thisArg?: any): any\tClass Observable", "on(${1:event: propertyChange}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["on(eventNames: string, callback: function, thisArg?: any): any\tInterface AndroidFrame", "on(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["layout(left: number, top: number, right: number, bottom: number): void\tClass CustomLayoutView", "layout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["onLayout(left: number, top: number, right: number, bottom: number): void\tClass Placeholder", "onLayout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["on(eventNames: string, callback: function, thisArg?: any): any\tClass VirtualArray<T>", "on(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["observe(type: GestureTypes, callback: function, thisArg?: any): any\tClass Frame", "observe(${1:type: GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_addViewToNativeVisualTree(view: View, atIndex?: number): boolean\tClass ProxyViewContainer", "_addViewToNativeVisualTree(${1:view: View}, ${2:atIndex?: number})"],
    ["onLayout(left: number, top: number, right: number, bottom: number): void\tClass StackLayout", "onLayout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["_onPropertyChanged(property: Property, oldValue: any, newValue: any): void\tClass SegmentedBar", "_onPropertyChanged(${1:property: Property}, ${2:oldValue: any}, ${3:newValue: any})"],
    ["on(eventNames: string, callback: function, thisArg?: any): any\tClass FormattedString", "on(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["onLayout(left: number, top: number, right: number, bottom: number): void\tClass ContentView", "onLayout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["observe(type: GestureTypes, callback: function, thisArg?: any): any\tClass Image", "observe(${1:type: GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_setValue(property: Property, value: any, source?: number): void\tClass SegmentedBar", "_setValue(${1:property: Property}, ${2:value: any}, ${3:source?: number})"],
    ["observe(type: GestureTypes, callback: function, thisArg?: any): any\tClass Label", "observe(${1:type: GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["removeNotificationObserver(observer: any, notificationName: string): void\tInterface iOSApplication", "removeNotificationObserver(${1:observer: any}, ${2:notificationName: string})"],
    ["_onPropertyChanged(property: Property, oldValue: any, newValue: any): void\tClass StackLayout", "_onPropertyChanged(${1:property: Property}, ${2:oldValue: any}, ${3:newValue: any})"],
    ["_onPropertyChanged(property: Property, oldValue: any, newValue: any): void\tClass ProxyObject", "_onPropertyChanged(${1:property: Property}, ${2:oldValue: any}, ${3:newValue: any})"],
    ["_onPropertyChanged(property: Property, oldValue: any, newValue: any): void\tClass Placeholder", "_onPropertyChanged(${1:property: Property}, ${2:oldValue: any}, ${3:newValue: any})"],
    ["_setValue(property: Property, value: any, source?: number): void\tClass StackLayout", "_setValue(${1:property: Property}, ${2:value: any}, ${3:source?: number})"],
    ["_setValue(property: Property, value: any, source?: number): void\tClass Placeholder", "_setValue(${1:property: Property}, ${2:value: any}, ${3:source?: number})"],
    ["observe(type: GestureTypes, callback: function, thisArg?: any): any\tClass Page", "observe(${1:type: GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["layout(left: number, top: number, right: number, bottom: number): void\tClass AbsoluteLayout", "layout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["_setValue(property: Property, value: any, source?: number): void\tClass ProxyObject", "_setValue(${1:property: Property}, ${2:value: any}, ${3:source?: number})"],
    ["onLayout(left: number, top: number, right: number, bottom: number): void\tClass GridLayout", "onLayout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["onLayout(left: number, top: number, right: number, bottom: number): void\tClass DockLayout", "onLayout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["_onPropertyChanged(property: Property, oldValue: any, newValue: any): void\tClass TabViewItem", "_onPropertyChanged(${1:property: Property}, ${2:oldValue: any}, ${3:newValue: any})"],
    ["on(event: propertyChange, callback: function, thisArg?: any): any\tClass Bindable", "on(${1:event: propertyChange}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["onLayout(left: number, top: number, right: number, bottom: number): void\tClass WrapLayout", "onLayout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["observe(type: GestureTypes, callback: function, thisArg?: any): any\tClass View", "observe(${1:type: GestureTypes}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_setValue(property: Property, value: any, source?: number): void\tClass TabViewItem", "_setValue(${1:property: Property}, ${2:value: any}, ${3:source?: number})"],
    ["setMeasuredDimension(measuredWidth: number, measuredHeight: number): void\tClass ProxyViewContainer", "setMeasuredDimension(${1:measuredWidth: number}, ${2:measuredHeight: number})"],
    ["onLayout(left: number, top: number, right: number, bottom: number): void\tClass TimePicker", "onLayout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["onLayout(left: number, top: number, right: number, bottom: number): void\tClass LayoutBase", "onLayout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["onLayout(left: number, top: number, right: number, bottom: number): void\tClass DatePicker", "onLayout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["_setValue(property: Property, value: any, source?: number): void\tClass ContentView", "_setValue(${1:property: Property}, ${2:value: any}, ${3:source?: number})"],
    ["_onPropertyChanged(property: Property, oldValue: any, newValue: any): void\tClass ContentView", "_onPropertyChanged(${1:property: Property}, ${2:oldValue: any}, ${3:newValue: any})"],
    ["onLayout(left: number, top: number, right: number, bottom: number): void\tClass ScrollView", "onLayout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["_addViewToNativeVisualTree(view: View, atIndex?: number): boolean\tClass ActivityIndicator", "_addViewToNativeVisualTree(${1:view: View}, ${2:atIndex?: number})"],
    ["onLayout(left: number, top: number, right: number, bottom: number): void\tClass ListPicker", "onLayout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["_onPropertyChanged(property: Property, oldValue: any, newValue: any): void\tClass ActionItem", "_onPropertyChanged(${1:property: Property}, ${2:oldValue: any}, ${3:newValue: any})"],
    ["_onPropertyChanged(property: Property, oldValue: any, newValue: any): void\tClass WrapLayout", "_onPropertyChanged(${1:property: Property}, ${2:oldValue: any}, ${3:newValue: any})"],
    ["_setValue(property: Property, value: any, source?: number): void\tClass ScrollView", "_setValue(${1:property: Property}, ${2:value: any}, ${3:source?: number})"],
    ["_setValue(property: Property, value: any, source?: number): void\tClass TimePicker", "_setValue(${1:property: Property}, ${2:value: any}, ${3:source?: number})"],
    ["setMeasuredDimension(measuredWidth: number, measuredHeight: number): void\tClass ActivityIndicator", "setMeasuredDimension(${1:measuredWidth: number}, ${2:measuredHeight: number})"],
    ["_setValue(property: Property, value: any, source?: number): void\tClass ActionItem", "_setValue(${1:property: Property}, ${2:value: any}, ${3:source?: number})"],
    ["_onPropertyChanged(property: Property, oldValue: any, newValue: any): void\tClass TimePicker", "_onPropertyChanged(${1:property: Property}, ${2:oldValue: any}, ${3:newValue: any})"],
    ["_onPropertyChanged(property: Property, oldValue: any, newValue: any): void\tClass ScrollView", "_onPropertyChanged(${1:property: Property}, ${2:oldValue: any}, ${3:newValue: any})"],
    ["_onPropertyChanged(property: Property, oldValue: any, newValue: any): void\tClass ListPicker", "_onPropertyChanged(${1:property: Property}, ${2:oldValue: any}, ${3:newValue: any})"],
    ["_setValue(property: Property, value: any, source?: number): void\tClass LayoutBase", "_setValue(${1:property: Property}, ${2:value: any}, ${3:source?: number})"],
    ["_setValue(property: Property, value: any, source?: number): void\tClass DatePicker", "_setValue(${1:property: Property}, ${2:value: any}, ${3:source?: number})"],
    ["_onPropertyChanged(property: Property, oldValue: any, newValue: any): void\tClass DatePicker", "_onPropertyChanged(${1:property: Property}, ${2:oldValue: any}, ${3:newValue: any})"],
    ["_onPropertyChanged(property: Property, oldValue: any, newValue: any): void\tClass LayoutBase", "_onPropertyChanged(${1:property: Property}, ${2:oldValue: any}, ${3:newValue: any})"],
    ["_onPropertyChanged(property: Property, oldValue: any, newValue: any): void\tClass DockLayout", "_onPropertyChanged(${1:property: Property}, ${2:oldValue: any}, ${3:newValue: any})"],
    ["prompt(message: string, defaultText?: string): Promise<PromptResult>\tModule ui/dialogs", "prompt(${1:message: string}, ${2:defaultText?: string})"],
    ["_addViewToNativeVisualTree(view: View, atIndex?: number): boolean\tClass CustomLayoutView", "_addViewToNativeVisualTree(${1:view: View}, ${2:atIndex?: number})"],
    ["onLayout(left: number, top: number, right: number, bottom: number): void\tClass TextField", "onLayout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["_setValue(property: Property, value: any, source?: number): void\tClass DockLayout", "_setValue(${1:property: Property}, ${2:value: any}, ${3:source?: number})"],
    ["_setValue(property: Property, value: any, source?: number): void\tClass GridLayout", "_setValue(${1:property: Property}, ${2:value: any}, ${3:source?: number})"],
    ["onLayout(left: number, top: number, right: number, bottom: number): void\tClass SearchBar", "onLayout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["_setValue(property: Property, value: any, source?: number): void\tClass ListPicker", "_setValue(${1:property: Property}, ${2:value: any}, ${3:source?: number})"],
    ["_addViewToNativeVisualTree(view: View, atIndex?: number): boolean\tClass EditableTextBase", "_addViewToNativeVisualTree(${1:view: View}, ${2:atIndex?: number})"],
    ["_onPropertyChanged(property: Property, oldValue: any, newValue: any): void\tClass GridLayout", "_onPropertyChanged(${1:property: Property}, ${2:oldValue: any}, ${3:newValue: any})"],
    ["onLayout(left: number, top: number, right: number, bottom: number): void\tClass ActionBar", "onLayout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["_setValue(property: Property, value: any, source?: number): void\tClass WrapLayout", "_setValue(${1:property: Property}, ${2:value: any}, ${3:source?: number})"],
    ["_onPropertyChanged(property: Property, oldValue: any, newValue: any): void\tClass TextField", "_onPropertyChanged(${1:property: Property}, ${2:oldValue: any}, ${3:newValue: any})"],
    ["getHandler(property: Property, view: View): StylePropertyChangedHandler\tModule ui/styling/style", "getHandler(${1:property: Property}, ${2:view: View})"],
    ["on(eventNames: string, callback: function, thisArg?: any): any\tModule application", "on(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_setValue(property: Property, value: any, source?: number): void\tClass ActionBar", "_setValue(${1:property: Property}, ${2:value: any}, ${3:source?: number})"],
    ["setMeasuredDimension(measuredWidth: number, measuredHeight: number): void\tClass CustomLayoutView", "setMeasuredDimension(${1:measuredWidth: number}, ${2:measuredHeight: number})"],
    ["on(event: unloaded, callback: function, thisArg?: any): any\tClass ProxyViewContainer", "on(${1:event: unloaded}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_onPropertyChanged(property: Property, oldValue: any, newValue: any): void\tClass ActionBar", "_onPropertyChanged(${1:property: Property}, ${2:oldValue: any}, ${3:newValue: any})"],
    ["onLayout(left: number, top: number, right: number, bottom: number): void\tClass Repeater", "onLayout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["onLayout(left: number, top: number, right: number, bottom: number): void\tClass TextBase", "onLayout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["on(event: loadMoreItems, callback: function, thisArg?: any): any\tClass ListView", "on(${1:event: loadMoreItems}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["onLayout(left: number, top: number, right: number, bottom: number): void\tClass Progress", "onLayout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["_setValue(property: Property, value: any, source?: number): void\tClass TextField", "_setValue(${1:property: Property}, ${2:value: any}, ${3:source?: number})"],
    ["onLayout(left: number, top: number, right: number, bottom: number): void\tClass HtmlView", "onLayout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["onLayout(left: number, top: number, right: number, bottom: number): void\tClass ListView", "onLayout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["layout(left: number, top: number, right: number, bottom: number): void\tClass SegmentedBar", "layout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["_setValue(property: Property, value: any, source?: number): void\tClass SearchBar", "_setValue(${1:property: Property}, ${2:value: any}, ${3:source?: number})"],
    ["_onPropertyChanged(property: Property, oldValue: any, newValue: any): void\tClass SearchBar", "_onPropertyChanged(${1:property: Property}, ${2:oldValue: any}, ${3:newValue: any})"],
    ["on(eventNames: string, callback: function, thisArg?: any): any\tClass SegmentedBar", "on(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["onLayout(left: number, top: number, right: number, bottom: number): void\tClass TextView", "onLayout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["setMeasuredDimension(measuredWidth: number, measuredHeight: number): void\tClass EditableTextBase", "setMeasuredDimension(${1:measuredWidth: number}, ${2:measuredHeight: number})"],
    ["onLayout(left: number, top: number, right: number, bottom: number): void\tClass TabView", "onLayout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["on(event: unloaded, callback: function, thisArg?: any): any\tClass ActivityIndicator", "on(${1:event: unloaded}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_setValue(property: Property, value: any, source?: number): void\tClass Progress", "_setValue(${1:property: Property}, ${2:value: any}, ${3:source?: number})"],
    ["_setValue(property: Property, value: any, source?: number): void\tClass TextBase", "_setValue(${1:property: Property}, ${2:value: any}, ${3:source?: number})"],
    ["_onPropertyChanged(property: Property, oldValue: any, newValue: any): void\tClass TextBase", "_onPropertyChanged(${1:property: Property}, ${2:oldValue: any}, ${3:newValue: any})"],
    ["layout(left: number, top: number, right: number, bottom: number): void\tClass Placeholder", "layout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["_setValue(property: Property, value: any, source?: number): void\tClass ListView", "_setValue(${1:property: Property}, ${2:value: any}, ${3:source?: number})"],
    ["on(event: showingModally, callback: function, thisArg?: any): void\tClass Page", "on(${1:event: showingModally}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_onPropertyChanged(property: Property, oldValue: any, newValue: any): void\tClass Progress", "_onPropertyChanged(${1:property: Property}, ${2:oldValue: any}, ${3:newValue: any})"],
    ["onLayout(left: number, top: number, right: number, bottom: number): void\tClass WebView", "onLayout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["_setValue(property: Property, value: any, source?: number): void\tClass Repeater", "_setValue(${1:property: Property}, ${2:value: any}, ${3:source?: number})"],
    ["on(event: navigatingFrom, callback: function, thisArg?: any): void\tClass Page", "on(${1:event: navigatingFrom}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_addViewToNativeVisualTree(view: View, atIndex?: number): boolean\tClass AbsoluteLayout", "_addViewToNativeVisualTree(${1:view: View}, ${2:atIndex?: number})"],
    ["_setValue(property: Property, value: any, source?: number): void\tClass HtmlView", "_setValue(${1:property: Property}, ${2:value: any}, ${3:source?: number})"],
    ["layout(left: number, top: number, right: number, bottom: number): void\tClass ContentView", "layout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["_onPropertyChanged(property: Property, oldValue: any, newValue: any): void\tClass ListView", "_onPropertyChanged(${1:property: Property}, ${2:oldValue: any}, ${3:newValue: any})"],
    ["layout(left: number, top: number, right: number, bottom: number): void\tClass StackLayout", "layout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["_setValue(property: Property, value: any, source?: number): void\tClass TextView", "_setValue(${1:property: Property}, ${2:value: any}, ${3:source?: number})"],
    ["on(event: propertyChange, callback: function, thisArg?: any): any\tClass Style", "on(${1:event: propertyChange}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["on(eventNames: string, callback: function, thisArg?: any): any\tClass TabViewItem", "on(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_onPropertyChanged(property: Property, oldValue: any, newValue: any): void\tClass TextView", "_onPropertyChanged(${1:property: Property}, ${2:oldValue: any}, ${3:newValue: any})"],
    ["on(eventNames: string, callback: function, thisArg?: any): any\tClass ProxyObject", "on(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_setValue(property: Property, value: any, source?: number): void\tClass Bindable", "_setValue(${1:property: Property}, ${2:value: any}, ${3:source?: number})"],
    ["on(event: propertyChange, callback: function, thisArg?: any): any\tClass Style", "on(${1:event: propertyChange}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_onPropertyChanged(property: Property, oldValue: any, newValue: any): void\tClass Repeater", "_onPropertyChanged(${1:property: Property}, ${2:oldValue: any}, ${3:newValue: any})"],
    ["_onPropertyChanged(property: Property, oldValue: any, newValue: any): void\tClass HtmlView", "_onPropertyChanged(${1:property: Property}, ${2:oldValue: any}, ${3:newValue: any})"],
    ["on(event: optionSelected, callback: function, thisArg?: any): any\tClass Frame", "on(${1:event: optionSelected}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_onPropertyChanged(property: Property, oldValue: any, newValue: any): void\tClass Bindable", "_onPropertyChanged(${1:property: Property}, ${2:oldValue: any}, ${3:newValue: any})"],
    ["layout(left: number, top: number, right: number, bottom: number): void\tClass WrapLayout", "layout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["layout(left: number, top: number, right: number, bottom: number): void\tClass TimePicker", "layout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["_setValue(property: Property, value: any, source?: number): void\tClass TabView", "_setValue(${1:property: Property}, ${2:value: any}, ${3:source?: number})"],
    ["onLayout(left: number, top: number, right: number, bottom: number): void\tClass Button", "onLayout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["on(eventNames: string, callback: function, thisArg?: any): any\tClass Observable", "on(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["readTextSync(onError?: function, encoding?: string): string\tClass File", "readTextSync(${1:onError?: function}, ${2:encoding?: string})"],
    ["onLayout(left: number, top: number, right: number, bottom: number): void\tClass Slider", "onLayout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["setMeasuredDimension(measuredWidth: number, measuredHeight: number): void\tClass AbsoluteLayout", "setMeasuredDimension(${1:measuredWidth: number}, ${2:measuredHeight: number})"],
    ["_onPropertyChanged(property: Property, oldValue: any, newValue: any): void\tClass TabView", "_onPropertyChanged(${1:property: Property}, ${2:oldValue: any}, ${3:newValue: any})"],
    ["onLayout(left: number, top: number, right: number, bottom: number): void\tClass Switch", "onLayout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["layout(left: number, top: number, right: number, bottom: number): void\tClass GridLayout", "layout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["layout(left: number, top: number, right: number, bottom: number): void\tClass LayoutBase", "layout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["onLayout(left: number, top: number, right: number, bottom: number): void\tClass Layout", "onLayout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["on(event: propertyChange, callback: function, thisArg?: any): any\tClass Span", "on(${1:event: propertyChange}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["layout(left: number, top: number, right: number, bottom: number): void\tClass DockLayout", "layout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["on(event: unloaded, callback: function, thisArg?: any): any\tClass CustomLayoutView", "on(${1:event: unloaded}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["layout(left: number, top: number, right: number, bottom: number): void\tClass ScrollView", "layout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["on(eventNames: string, callback: function, thisArg?: any): any\tClass ScrollView", "on(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_setValue(property: Property, value: any, source?: number): void\tClass WebView", "_setValue(${1:property: Property}, ${2:value: any}, ${3:source?: number})"],
    ["_onPropertyChanged(property: Property, oldValue: any, newValue: any): void\tClass WebView", "_onPropertyChanged(${1:property: Property}, ${2:oldValue: any}, ${3:newValue: any})"],
    ["onLayout(left: number, top: number, right: number, bottom: number): void\tClass Border", "onLayout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["on(event: unloaded, callback: function, thisArg?: any): any\tClass EditableTextBase", "on(${1:event: unloaded}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["layout(left: number, top: number, right: number, bottom: number): void\tClass ListPicker", "layout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["layout(left: number, top: number, right: number, bottom: number): void\tClass DatePicker", "layout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["onLayout(left: number, top: number, right: number, bottom: number): void\tClass Label", "onLayout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["layout(left: number, top: number, right: number, bottom: number): void\tClass TextField", "layout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["_onPropertyChanged(property: Property, oldValue: any, newValue: any): void\tClass Button", "_onPropertyChanged(${1:property: Property}, ${2:oldValue: any}, ${3:newValue: any})"],
    ["_setValue(property: Property, value: any, source?: number): void\tClass Button", "_setValue(${1:property: Property}, ${2:value: any}, ${3:source?: number})"],
    ["layout(left: number, top: number, right: number, bottom: number): void\tClass ActionBar", "layout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["_onPropertyChanged(property: Property, oldValue: any, newValue: any): void\tClass Switch", "_onPropertyChanged(${1:property: Property}, ${2:oldValue: any}, ${3:newValue: any})"],
    ["on(eventNames: string, callback: function, thisArg?: any): any\tClass SearchBar", "on(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["onLayout(left: number, top: number, right: number, bottom: number): void\tClass Frame", "onLayout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["_setValue(property: Property, value: any, source?: number): void\tClass Switch", "_setValue(${1:property: Property}, ${2:value: any}, ${3:source?: number})"],
    ["layout(left: number, top: number, right: number, bottom: number): void\tClass SearchBar", "layout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["_setValue(property: Property, value: any, source?: number): void\tClass Slider", "_setValue(${1:property: Property}, ${2:value: any}, ${3:source?: number})"],
    ["_onPropertyChanged(property: Property, oldValue: any, newValue: any): void\tClass Slider", "_onPropertyChanged(${1:property: Property}, ${2:oldValue: any}, ${3:newValue: any})"],
    ["_addViewToNativeVisualTree(view: View, atIndex?: number): boolean\tClass SegmentedBar", "_addViewToNativeVisualTree(${1:view: View}, ${2:atIndex?: number})"],
    ["on(event: loadFinished, callback: function, thisArg?: any): any\tClass WebView", "on(${1:event: loadFinished}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_onPropertyChanged(property: Property, oldValue: any, newValue: any): void\tClass Layout", "_onPropertyChanged(${1:property: Property}, ${2:oldValue: any}, ${3:newValue: any})"],
    ["onLayout(left: number, top: number, right: number, bottom: number): void\tClass Image", "onLayout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["on(event: navigatedFrom, callback: function, thisArg?: any): void\tClass Page", "on(${1:event: navigatedFrom}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_setValue(property: Property, value: any, source?: number): void\tClass Layout", "_setValue(${1:property: Property}, ${2:value: any}, ${3:source?: number})"],
    ["_setValue(property: Property, value: any, source?: number): void\tClass Border", "_setValue(${1:property: Property}, ${2:value: any}, ${3:source?: number})"],
    ["_onPropertyChanged(property: Property, oldValue: any, newValue: any): void\tClass Border", "_onPropertyChanged(${1:property: Property}, ${2:oldValue: any}, ${3:newValue: any})"],
    ["on(event: loaded, callback: function, thisArg?: any): any\tClass ProxyViewContainer", "on(${1:event: loaded}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["on(eventNames: string, callback: function, thisArg?: any): any\tClass ListView", "on(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["onLayout(left: number, top: number, right: number, bottom: number): void\tClass Page", "onLayout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["layout(left: number, top: number, right: number, bottom: number): void\tClass Repeater", "layout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["layout(left: number, top: number, right: number, bottom: number): void\tClass ListView", "layout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["layout(left: number, top: number, right: number, bottom: number): void\tClass Progress", "layout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["setMeasuredDimension(measuredWidth: number, measuredHeight: number): void\tClass SegmentedBar", "setMeasuredDimension(${1:measuredWidth: number}, ${2:measuredHeight: number})"],
    ["on(event: lowMemory, callback: function, thisArg?: any): any\tModule application", "on(${1:event: lowMemory}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["layout(left: number, top: number, right: number, bottom: number): void\tClass HtmlView", "layout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["onLayout(left: number, top: number, right: number, bottom: number): void\tClass View", "onLayout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["on(event: change, callback: function, thisArg?: any): any\tClass ObservableArray<T>", "on(${1:event: change}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_onPropertyChanged(property: Property, oldValue: any, newValue: any): void\tClass Label", "_onPropertyChanged(${1:property: Property}, ${2:oldValue: any}, ${3:newValue: any})"],
    ["_setValue(property: Property, value: any, source?: number): void\tClass Label", "_setValue(${1:property: Property}, ${2:value: any}, ${3:source?: number})"],
    ["layout(left: number, top: number, right: number, bottom: number): void\tClass TextView", "layout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["_setValue(property: Property, value: any, source?: number): void\tClass Image", "_setValue(${1:property: Property}, ${2:value: any}, ${3:source?: number})"],
    ["write(path: string, content: any, onError?: function): any\tClass FileSystemAccess", "write(${1:path: string}, ${2:content: any}, ${3:onError?: function})"],
    ["on(eventNames: string, callback: function, thisArg?: any): any\tClass Bindable", "on(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_addViewToNativeVisualTree(view: View, atIndex?: number): boolean\tClass StackLayout", "_addViewToNativeVisualTree(${1:view: View}, ${2:atIndex?: number})"],
    ["_onPropertyChanged(property: Property, oldValue: any, newValue: any): void\tClass Frame", "_onPropertyChanged(${1:property: Property}, ${2:oldValue: any}, ${3:newValue: any})"],
    ["_setValue(property: Property, value: any, source?: number): void\tClass Frame", "_setValue(${1:property: Property}, ${2:value: any}, ${3:source?: number})"],
    ["_onPropertyChanged(property: Property, oldValue: any, newValue: any): void\tClass Style", "_onPropertyChanged(${1:property: Property}, ${2:oldValue: any}, ${3:newValue: any})"],
    ["_addViewToNativeVisualTree(view: View, atIndex?: number): boolean\tClass ContentView", "_addViewToNativeVisualTree(${1:view: View}, ${2:atIndex?: number})"],
    ["_onPropertyChanged(property: Property, oldValue: any, newValue: any): void\tClass Image", "_onPropertyChanged(${1:property: Property}, ${2:oldValue: any}, ${3:newValue: any})"],
    ["layout(left: number, top: number, right: number, bottom: number): void\tClass TextBase", "layout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["on(event: unloaded, callback: function, thisArg?: any): any\tClass AbsoluteLayout", "on(${1:event: unloaded}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_setValue(property: Property, value: any, source?: number): void\tClass Style", "_setValue(${1:property: Property}, ${2:value: any}, ${3:source?: number})"],
    ["_onPropertyChanged(property: Property, oldValue: any, newValue: any): void\tClass Style", "_onPropertyChanged(${1:property: Property}, ${2:oldValue: any}, ${3:newValue: any})"],
    ["_addViewToNativeVisualTree(view: View, atIndex?: number): boolean\tClass Placeholder", "_addViewToNativeVisualTree(${1:view: View}, ${2:atIndex?: number})"],
    ["_setValue(property: Property, value: any, source?: number): void\tClass Style", "_setValue(${1:property: Property}, ${2:value: any}, ${3:source?: number})"],
    ["on(event: itemLoading, callback: function, thisArg?: any): any\tClass ListView", "on(${1:event: itemLoading}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_addViewToNativeVisualTree(view: View, atIndex?: number): boolean\tClass TimePicker", "_addViewToNativeVisualTree(${1:view: View}, ${2:atIndex?: number})"],
    ["_addViewToNativeVisualTree(view: View, atIndex?: number): boolean\tClass ListPicker", "_addViewToNativeVisualTree(${1:view: View}, ${2:atIndex?: number})"],
    ["on(event: navigatingTo, callback: function, thisArg?: any): void\tClass Page", "on(${1:event: navigatingTo}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_setValue(property: Property, value: any, source?: number): void\tClass View", "_setValue(${1:property: Property}, ${2:value: any}, ${3:source?: number})"],
    ["on(eventNames: string, callback: function, thisArg?: any): any\tClass TabView", "on(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_onPropertyChanged(property: Property, oldValue: any, newValue: any): void\tClass View", "_onPropertyChanged(${1:property: Property}, ${2:oldValue: any}, ${3:newValue: any})"],
    ["setMeasuredDimension(measuredWidth: number, measuredHeight: number): void\tClass StackLayout", "setMeasuredDimension(${1:measuredWidth: number}, ${2:measuredHeight: number})"],
    ["_addViewToNativeVisualTree(view: View, atIndex?: number): boolean\tClass GridLayout", "_addViewToNativeVisualTree(${1:view: View}, ${2:atIndex?: number})"],
    ["setMeasuredDimension(measuredWidth: number, measuredHeight: number): void\tClass ContentView", "setMeasuredDimension(${1:measuredWidth: number}, ${2:measuredHeight: number})"],
    ["on(eventNames: string, callback: function, thisArg?: any): any\tClass WebView", "on(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["layout(left: number, top: number, right: number, bottom: number): void\tClass TabView", "layout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["on(event: loaded, callback: function, thisArg?: any): any\tClass ActivityIndicator", "on(${1:event: loaded}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["setMeasuredDimension(measuredWidth: number, measuredHeight: number): void\tClass Placeholder", "setMeasuredDimension(${1:measuredWidth: number}, ${2:measuredHeight: number})"],
    ["_addViewToNativeVisualTree(view: View, atIndex?: number): boolean\tClass ScrollView", "_addViewToNativeVisualTree(${1:view: View}, ${2:atIndex?: number})"],
    ["_setValue(property: Property, value: any, source?: number): void\tClass Span", "_setValue(${1:property: Property}, ${2:value: any}, ${3:source?: number})"],
    ["layout(left: number, top: number, right: number, bottom: number): void\tClass WebView", "layout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["_onPropertyChanged(property: Property, oldValue: any, newValue: any): void\tClass Span", "_onPropertyChanged(${1:property: Property}, ${2:oldValue: any}, ${3:newValue: any})"],
    ["_addViewToNativeVisualTree(view: View, atIndex?: number): boolean\tClass DatePicker", "_addViewToNativeVisualTree(${1:view: View}, ${2:atIndex?: number})"],
    ["_onPropertyChanged(property: Property, oldValue: any, newValue: any): void\tClass Page", "_onPropertyChanged(${1:property: Property}, ${2:oldValue: any}, ${3:newValue: any})"],
    ["_addViewToNativeVisualTree(view: View, atIndex?: number): boolean\tClass DockLayout", "_addViewToNativeVisualTree(${1:view: View}, ${2:atIndex?: number})"],
    ["_addViewToNativeVisualTree(view: View, atIndex?: number): boolean\tClass WrapLayout", "_addViewToNativeVisualTree(${1:view: View}, ${2:atIndex?: number})"],
    ["getAncestor(view: View, criterion: string | Function): View\tModule ui/core/view", "getAncestor(${1:view: View}, ${2:criterion: string | Function})"],
    ["on(event: loadStarted, callback: function, thisArg?: any): any\tClass WebView", "on(${1:event: loadStarted}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_addViewToNativeVisualTree(view: View, atIndex?: number): boolean\tClass LayoutBase", "_addViewToNativeVisualTree(${1:view: View}, ${2:atIndex?: number})"],
    ["_setValue(property: Property, value: any, source?: number): void\tClass Page", "_setValue(${1:property: Property}, ${2:value: any}, ${3:source?: number})"],
    ["getBindingOptions(name: string, value: string): any\tModule ui/builder/binding-builder", "getBindingOptions(${1:name: string}, ${2:value: string})"],
    ["setMeasuredDimension(measuredWidth: number, measuredHeight: number): void\tClass ListPicker", "setMeasuredDimension(${1:measuredWidth: number}, ${2:measuredHeight: number})"],
    ["layout(left: number, top: number, right: number, bottom: number): void\tClass Slider", "layout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["on(event: shownModally, callback: function, thisArg?: any): any\tClass Page", "on(${1:event: shownModally}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["on(event: loaded, callback: function, thisArg?: any): any\tClass CustomLayoutView", "on(${1:event: loaded}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["setMeasuredDimension(measuredWidth: number, measuredHeight: number): void\tClass DockLayout", "setMeasuredDimension(${1:measuredWidth: number}, ${2:measuredHeight: number})"],
    ["layout(left: number, top: number, right: number, bottom: number): void\tClass Layout", "layout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["_addViewToNativeVisualTree(view: View, atIndex?: number): boolean\tClass TextField", "_addViewToNativeVisualTree(${1:view: View}, ${2:atIndex?: number})"],
    ["setMeasuredDimension(measuredWidth: number, measuredHeight: number): void\tClass DatePicker", "setMeasuredDimension(${1:measuredWidth: number}, ${2:measuredHeight: number})"],
    ["_addViewToNativeVisualTree(view: View, atIndex?: number): boolean\tClass ActionBar", "_addViewToNativeVisualTree(${1:view: View}, ${2:atIndex?: number})"],
    ["on(eventNames: string, callback: function, thisArg?: any): any\tClass Button", "on(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["layout(left: number, top: number, right: number, bottom: number): void\tClass Button", "layout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["setMeasuredDimension(measuredWidth: number, measuredHeight: number): void\tClass WrapLayout", "setMeasuredDimension(${1:measuredWidth: number}, ${2:measuredHeight: number})"],
    ["layout(left: number, top: number, right: number, bottom: number): void\tClass Border", "layout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["on(event: loaded, callback: function, thisArg?: any): any\tClass EditableTextBase", "on(${1:event: loaded}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["setMeasuredDimension(measuredWidth: number, measuredHeight: number): void\tClass LayoutBase", "setMeasuredDimension(${1:measuredWidth: number}, ${2:measuredHeight: number})"],
    ["setMeasuredDimension(measuredWidth: number, measuredHeight: number): void\tClass TimePicker", "setMeasuredDimension(${1:measuredWidth: number}, ${2:measuredHeight: number})"],
    ["setMeasuredDimension(measuredWidth: number, measuredHeight: number): void\tClass ScrollView", "setMeasuredDimension(${1:measuredWidth: number}, ${2:measuredHeight: number})"],
    ["_addViewToNativeVisualTree(view: View, atIndex?: number): boolean\tClass SearchBar", "_addViewToNativeVisualTree(${1:view: View}, ${2:atIndex?: number})"],
    ["setMeasuredDimension(measuredWidth: number, measuredHeight: number): void\tClass GridLayout", "setMeasuredDimension(${1:measuredWidth: number}, ${2:measuredHeight: number})"],
    ["_onPropertyChangedFromNative(property: Property, newValue: any): void\tClass ProxyViewContainer", "_onPropertyChangedFromNative(${1:property: Property}, ${2:newValue: any})"],
    ["layout(left: number, top: number, right: number, bottom: number): void\tClass Switch", "layout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["on(event: change, callback: function, thisArg?: any): any\tClass VirtualArray<T>", "on(${1:event: change}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["toString(type: GestureTypes, separator?: string): string\tModule ui/gestures", "toString(${1:type: GestureTypes}, ${2:separator?: string})"],
    ["on(event: unloaded, callback: function, thisArg?: any): any\tClass StackLayout", "on(${1:event: unloaded}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["write(message: any, category: string, type?: number): any\tInterface TraceWriter", "write(${1:message: any}, ${2:category: string}, ${3:type?: number})"],
    ["setMeasuredDimension(measuredWidth: number, measuredHeight: number): void\tClass TextField", "setMeasuredDimension(${1:measuredWidth: number}, ${2:measuredHeight: number})"],
    ["setMeasuredDimension(measuredWidth: number, measuredHeight: number): void\tClass SearchBar", "setMeasuredDimension(${1:measuredWidth: number}, ${2:measuredHeight: number})"],
    ["on(event: navigatedTo, callback: function, thisArg?: any): void\tClass Page", "on(${1:event: navigatedTo}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["on(eventNames: string, callback: function, thisArg?: any): void\tClass Page", "on(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["on(eventNames: string, callback: function, thisArg?: any): any\tClass Style", "on(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["setMeasuredDimension(measuredWidth: number, measuredHeight: number): void\tClass ActionBar", "setMeasuredDimension(${1:measuredWidth: number}, ${2:measuredHeight: number})"],
    ["_addViewToNativeVisualTree(view: View, atIndex?: number): boolean\tClass Repeater", "_addViewToNativeVisualTree(${1:view: View}, ${2:atIndex?: number})"],
    ["layout(left: number, top: number, right: number, bottom: number): void\tClass Image", "layout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["_addViewToNativeVisualTree(view: View, atIndex?: number): boolean\tClass Progress", "_addViewToNativeVisualTree(${1:view: View}, ${2:atIndex?: number})"],
    ["_addViewToNativeVisualTree(view: View, atIndex?: number): boolean\tClass TextView", "_addViewToNativeVisualTree(${1:view: View}, ${2:atIndex?: number})"],
    ["layout(left: number, top: number, right: number, bottom: number): void\tClass Frame", "layout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["layout(left: number, top: number, right: number, bottom: number): void\tClass Label", "layout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["_addViewToNativeVisualTree(view: View, atIndex?: number): boolean\tClass TextBase", "_addViewToNativeVisualTree(${1:view: View}, ${2:atIndex?: number})"],
    ["on(eventNames: string, callback: function, thisArg?: any): any\tClass Frame", "on(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["on(event: unloaded, callback: function, thisArg?: any): any\tClass ContentView", "on(${1:event: unloaded}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_onPropertyChangedFromNative(property: Property, newValue: any): void\tClass ActivityIndicator", "_onPropertyChangedFromNative(${1:property: Property}, ${2:newValue: any})"],
    ["_addViewToNativeVisualTree(view: View, atIndex?: number): boolean\tClass ListView", "_addViewToNativeVisualTree(${1:view: View}, ${2:atIndex?: number})"],
    ["on(eventNames: string, callback: function, thisArg?: any): any\tClass Style", "on(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["on(eventNames: string, callback: function, thisArg?: any): any\tClass Cache", "on(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_addViewToNativeVisualTree(view: View, atIndex?: number): boolean\tClass HtmlView", "_addViewToNativeVisualTree(${1:view: View}, ${2:atIndex?: number})"],
    ["on(event: unloaded, callback: function, thisArg?: any): any\tClass WrapLayout", "on(${1:event: unloaded}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["on(event: unloaded, callback: function, thisArg?: any): any\tClass GridLayout", "on(${1:event: unloaded}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_addViewToNativeVisualTree(view: View, atIndex?: number): boolean\tClass TabView", "_addViewToNativeVisualTree(${1:view: View}, ${2:atIndex?: number})"],
    ["setMeasuredDimension(measuredWidth: number, measuredHeight: number): void\tClass HtmlView", "setMeasuredDimension(${1:measuredWidth: number}, ${2:measuredHeight: number})"],
    ["on(event: suspend, callback: function, thisArg?: any): any\tModule application", "on(${1:event: suspend}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["on(event: loaded, callback: function, thisArg?: any): any\tClass AbsoluteLayout", "on(${1:event: loaded}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["on(eventNames: string, callback: function, thisArg?: any): any\tClass Span", "on(${1:eventNames: string}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["layout(left: number, top: number, right: number, bottom: number): void\tClass View", "layout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["on(event: unloaded, callback: function, thisArg?: any): any\tClass DockLayout", "on(${1:event: unloaded}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_onPropertyChangedFromNative(property: Property, newValue: any): void\tClass EditableTextBase", "_onPropertyChangedFromNative(${1:property: Property}, ${2:newValue: any})"],
    ["_onFragmentCreateAnimator(fragment: any, nextAnim: number): any\tModule ui/transition", "_onFragmentCreateAnimator(${1:fragment: any}, ${2:nextAnim: number})"],
    ["layout(left: number, top: number, right: number, bottom: number): void\tClass Page", "layout(${1:left: number}, ${2:top: number}, ${3:right: number}, ${4:bottom: number})"],
    ["_onPropertyChangedFromNative(property: Property, newValue: any): void\tClass CustomLayoutView", "_onPropertyChangedFromNative(${1:property: Property}, ${2:newValue: any})"],
    ["on(event: unloaded, callback: function, thisArg?: any): any\tClass TimePicker", "on(${1:event: unloaded}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["setMeasuredDimension(measuredWidth: number, measuredHeight: number): void\tClass TextView", "setMeasuredDimension(${1:measuredWidth: number}, ${2:measuredHeight: number})"],
    ["setMeasuredDimension(measuredWidth: number, measuredHeight: number): void\tClass ListView", "setMeasuredDimension(${1:measuredWidth: number}, ${2:measuredHeight: number})"],
    ["on(event: unloaded, callback: function, thisArg?: any): any\tClass ListPicker", "on(${1:event: unloaded}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["setMeasuredDimension(measuredWidth: number, measuredHeight: number): void\tClass Repeater", "setMeasuredDimension(${1:measuredWidth: number}, ${2:measuredHeight: number})"],
    ["on(event: unloaded, callback: function, thisArg?: any): any\tClass DatePicker", "on(${1:event: unloaded}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["setMeasuredDimension(measuredWidth: number, measuredHeight: number): void\tClass Progress", "setMeasuredDimension(${1:measuredWidth: number}, ${2:measuredHeight: number})"],
    ["onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass ProxyViewContainer", "onMeasure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["on(event: unloaded, callback: function, thisArg?: any): any\tClass LayoutBase", "on(${1:event: unloaded}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["setMeasuredDimension(measuredWidth: number, measuredHeight: number): void\tClass TextBase", "setMeasuredDimension(${1:measuredWidth: number}, ${2:measuredHeight: number})"],
    ["_addViewToNativeVisualTree(view: View, atIndex?: number): boolean\tClass WebView", "_addViewToNativeVisualTree(${1:view: View}, ${2:atIndex?: number})"],
    ["_addViewToNativeVisualTree(view: View, atIndex?: number): boolean\tClass Layout", "_addViewToNativeVisualTree(${1:view: View}, ${2:atIndex?: number})"],
    ["_addViewToNativeVisualTree(view: View, atIndex?: number): boolean\tClass Border", "_addViewToNativeVisualTree(${1:view: View}, ${2:atIndex?: number})"],
    ["_addViewToNativeVisualTree(view: View, atIndex?: number): boolean\tClass Button", "_addViewToNativeVisualTree(${1:view: View}, ${2:atIndex?: number})"],
    ["on(event: downloaded, callback: function, thisArg?: any): any\tClass Cache", "on(${1:event: downloaded}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["createSelectorsFromImports(tree: SyntaxTree, keyframes: Object): RuleSet[]\tClass StyleScope", "createSelectorsFromImports(${1:tree: SyntaxTree}, ${2:keyframes: Object})"],
    ["setMeasuredDimension(measuredWidth: number, measuredHeight: number): void\tClass TabView", "setMeasuredDimension(${1:measuredWidth: number}, ${2:measuredHeight: number})"],
    ["setMeasuredDimension(measuredWidth: number, measuredHeight: number): void\tClass WebView", "setMeasuredDimension(${1:measuredWidth: number}, ${2:measuredHeight: number})"],
    ["on(event: unloaded, callback: function, thisArg?: any): any\tClass ActionBar", "on(${1:event: unloaded}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_addViewToNativeVisualTree(view: View, atIndex?: number): boolean\tClass Switch", "_addViewToNativeVisualTree(${1:view: View}, ${2:atIndex?: number})"],
    ["onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass ActivityIndicator", "onMeasure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["_addViewToNativeVisualTree(view: View, atIndex?: number): boolean\tClass Slider", "_addViewToNativeVisualTree(${1:view: View}, ${2:atIndex?: number})"],
    ["on(event: unloaded, callback: function, thisArg?: any): any\tClass TextField", "on(${1:event: unloaded}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["setMeasuredDimension(measuredWidth: number, measuredHeight: number): void\tClass Button", "setMeasuredDimension(${1:measuredWidth: number}, ${2:measuredHeight: number})"],
    ["setMeasuredDimension(measuredWidth: number, measuredHeight: number): void\tClass Slider", "setMeasuredDimension(${1:measuredWidth: number}, ${2:measuredHeight: number})"],
    ["_addViewToNativeVisualTree(view: View, atIndex?: number): boolean\tClass Label", "_addViewToNativeVisualTree(${1:view: View}, ${2:atIndex?: number})"],
    ["_addViewToNativeVisualTree(view: View, atIndex?: number): boolean\tClass Frame", "_addViewToNativeVisualTree(${1:view: View}, ${2:atIndex?: number})"],
    ["_addViewToNativeVisualTree(view: View, atIndex?: number): boolean\tClass Image", "_addViewToNativeVisualTree(${1:view: View}, ${2:atIndex?: number})"],
    ["setMeasuredDimension(measuredWidth: number, measuredHeight: number): void\tClass Switch", "setMeasuredDimension(${1:measuredWidth: number}, ${2:measuredHeight: number})"],
    ["setMeasuredDimension(measuredWidth: number, measuredHeight: number): void\tClass Layout", "setMeasuredDimension(${1:measuredWidth: number}, ${2:measuredHeight: number})"],
    ["on(event: unloaded, callback: function, thisArg?: any): any\tClass TextBase", "on(${1:event: unloaded}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_onPropertyChangedFromNative(property: Property, newValue: any): void\tClass AbsoluteLayout", "_onPropertyChangedFromNative(${1:property: Property}, ${2:newValue: any})"],
    ["on(event: unloaded, callback: function, thisArg?: any): any\tClass Progress", "on(${1:event: unloaded}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["on(event: unloaded, callback: function, thisArg?: any): any\tClass Repeater", "on(${1:event: unloaded}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass CustomLayoutView", "onMeasure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["on(event: unloaded, callback: function, thisArg?: any): any\tClass TextView", "on(${1:event: unloaded}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass EditableTextBase", "onMeasure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["on(event: resume, callback: function, thisArg?: any): any\tModule application", "on(${1:event: resume}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["on(event: launch, callback: function, thisArg?: any): any\tModule application", "on(${1:event: launch}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["setMeasuredDimension(measuredWidth: number, measuredHeight: number): void\tClass Border", "setMeasuredDimension(${1:measuredWidth: number}, ${2:measuredHeight: number})"],
    ["on(event: unloaded, callback: function, thisArg?: any): any\tClass HtmlView", "on(${1:event: unloaded}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["on(event: loaded, callback: function, thisArg?: any): any\tClass StackLayout", "on(${1:event: loaded}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["setMeasuredDimension(measuredWidth: number, measuredHeight: number): void\tClass Label", "setMeasuredDimension(${1:measuredWidth: number}, ${2:measuredHeight: number})"],
    ["setMeasuredDimension(measuredWidth: number, measuredHeight: number): void\tClass Image", "setMeasuredDimension(${1:measuredWidth: number}, ${2:measuredHeight: number})"],
    ["on(event: loaded, callback: function, thisArg?: any): any\tClass ContentView", "on(${1:event: loaded}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_addViewToNativeVisualTree(view: View, atIndex?: number): boolean\tClass Page", "_addViewToNativeVisualTree(${1:view: View}, ${2:atIndex?: number})"],
    ["setMeasuredDimension(measuredWidth: number, measuredHeight: number): void\tClass Frame", "setMeasuredDimension(${1:measuredWidth: number}, ${2:measuredHeight: number})"],
    ["_applyXmlAttribute(attributeName: string, attrValue: any): boolean\tInterface ApplyXmlAttributes", "_applyXmlAttribute(${1:attributeName: string}, ${2:attrValue: any})"],
    ["_addViewToNativeVisualTree(view: View, atIndex?: number): boolean\tClass View", "_addViewToNativeVisualTree(${1:view: View}, ${2:atIndex?: number})"],
    ["tokenize(code: string, options?: Options): Array<Token>\tModule js-libs/esprima", "tokenize(${1:code: string}, ${2:options?: Options})"],
    ["on(event: loaded, callback: function, thisArg?: any): any\tClass GridLayout", "on(${1:event: loaded}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["on(event: unloaded, callback: function, thisArg?: any): any\tClass Layout", "on(${1:event: unloaded}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["setMeasuredDimension(measuredWidth: number, measuredHeight: number): void\tClass Page", "setMeasuredDimension(${1:measuredWidth: number}, ${2:measuredHeight: number})"],
    ["on(event: loaded, callback: function, thisArg?: any): any\tClass ListPicker", "on(${1:event: loaded}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_onPropertyChangedFromNative(property: Property, newValue: any): void\tClass SegmentedBar", "_onPropertyChangedFromNative(${1:property: Property}, ${2:newValue: any})"],
    ["measure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass ProxyViewContainer", "measure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["on(event: loaded, callback: function, thisArg?: any): any\tClass DockLayout", "on(${1:event: loaded}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["getBoolean(key: string, defaultValue?: boolean): boolean\tModule application-settings", "getBoolean(${1:key: string}, ${2:defaultValue?: boolean})"],
    ["on(event: loaded, callback: function, thisArg?: any): any\tClass DatePicker", "on(${1:event: loaded}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["on(event: unloaded, callback: function, thisArg?: any): any\tClass Switch", "on(${1:event: unloaded}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["on(event: loaded, callback: function, thisArg?: any): any\tClass WrapLayout", "on(${1:event: loaded}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["on(event: itemTap, callback: function, thisArg?: any): any\tClass ListView", "on(${1:event: itemTap}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["lastIndexOf(searchElement: T, fromIndex?: number): number\tClass ObservableArray<T>", "lastIndexOf(${1:searchElement: T}, ${2:fromIndex?: number})"],
    ["on(event: loaded, callback: function, thisArg?: any): any\tClass LayoutBase", "on(${1:event: loaded}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass AbsoluteLayout", "onMeasure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["setMeasuredDimension(measuredWidth: number, measuredHeight: number): void\tClass View", "setMeasuredDimension(${1:measuredWidth: number}, ${2:measuredHeight: number})"],
    ["on(event: scroll, callback: function, thisArg?: any): any\tClass ScrollView", "on(${1:event: scroll}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["on(event: unloaded, callback: function, thisArg?: any): any\tClass Border", "on(${1:event: unloaded}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["on(event: loaded, callback: function, thisArg?: any): any\tClass TimePicker", "on(${1:event: loaded}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["on(event: unloaded, callback: function, thisArg?: any): any\tClass Slider", "on(${1:event: unloaded}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_onPropertyChangedFromNative(property: Property, newValue: any): void\tClass StackLayout", "_onPropertyChangedFromNative(${1:property: Property}, ${2:newValue: any})"],
    ["on(event: unloaded, callback: function, thisArg?: any): any\tClass Image", "on(${1:event: unloaded}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_onPropertyChangedFromNative(property: Property, newValue: any): void\tClass Placeholder", "_onPropertyChangedFromNative(${1:property: Property}, ${2:newValue: any})"],
    ["on(event: submit, callback: function, thisArg?: any): any\tClass SearchBar", "on(${1:event: submit}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["getSpecialPropertySetter(name: string): PropertySetter\tModule ui/builder/special-properties", "getSpecialPropertySetter(${1:name: string})"],
    ["reduceRight(callbackfn: function, initialValue?: T): T\tClass ObservableArray<T>", "reduceRight(${1:callbackfn: function}, ${2:initialValue?: T})"],
    ["_onPropertyChangedFromNative(property: Property, newValue: any): void\tClass ContentView", "_onPropertyChangedFromNative(${1:property: Property}, ${2:newValue: any})"],
    ["measure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass ActivityIndicator", "measure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["_onPropertyChangedFromNative(property: Property, newValue: any): void\tClass ProxyObject", "_onPropertyChangedFromNative(${1:property: Property}, ${2:newValue: any})"],
    ["on(event: unloaded, callback: function, thisArg?: any): any\tClass Label", "on(${1:event: unloaded}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["on(event: loaded, callback: function, thisArg?: any): any\tClass TextField", "on(${1:event: loaded}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["PseudoClassHandler(...pseudoClasses: string[]): MethodDecorator\tModule ui/core/view", "PseudoClassHandler(${1:...pseudoClasses: string[]})"],
    ["on(event: loaded, callback: function, thisArg?: any): any\tClass ActionBar", "on(${1:event: loaded}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_resetValue(property: Property, source?: number): void\tClass DependencyObservable", "_resetValue(${1:property: Property}, ${2:source?: number})"],
    ["splice(start: number, deleteCount: number, ...items: T[]): T[]\tClass ObservableArray<T>", "splice(${1:start: number}, ${2:deleteCount: number}, ${3:...items: T[]})"],
    ["_onPropertyChangedFromNative(property: Property, newValue: any): void\tClass WrapLayout", "_onPropertyChangedFromNative(${1:property: Property}, ${2:newValue: any})"],
    ["setInterval(callback: Function, milliseconds?: number): number\tModule timer", "setInterval(${1:callback: Function}, ${2:milliseconds?: number})"],
    ["_onPropertyChangedFromNative(property: Property, newValue: any): void\tClass TimePicker", "_onPropertyChangedFromNative(${1:property: Property}, ${2:newValue: any})"],
    ["assert(test: boolean, message: string, ...formatParams: any[]): void\tClass Console", "assert(${1:test: boolean}, ${2:message: string}, ${3:...formatParams: any[]})"],
    ["on(event: loaded, callback: function, thisArg?: any): any\tClass TextBase", "on(${1:event: loaded}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["parse(value: string | Template, exports?: any): View\tModule ui/builder", "parse(${1:value: string | Template}, ${2:exports?: any})"],
    ["on(event: loaded, callback: function, thisArg?: any): any\tClass TextView", "on(${1:event: loaded}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["measure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass CustomLayoutView", "measure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["_onPropertyChangedFromNative(property: Property, newValue: any): void\tClass LayoutBase", "_onPropertyChangedFromNative(${1:property: Property}, ${2:newValue: any})"],
    ["measure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass EditableTextBase", "measure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass SegmentedBar", "onMeasure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["on(event: loaded, callback: function, thisArg?: any): any\tClass Repeater", "on(${1:event: loaded}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["on(event: loaded, callback: function, thisArg?: any): any\tClass HtmlView", "on(${1:event: loaded}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["notifyEvent(object: Object, name: string, data?: any): any\tModule trace", "notifyEvent(${1:object: Object}, ${2:name: string}, ${3:data?: any})"],
    ["on(event: exit, callback: function, thisArg?: any): any\tModule application", "on(${1:event: exit}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_onPropertyChangedFromNative(property: Property, newValue: any): void\tClass DatePicker", "_onPropertyChangedFromNative(${1:property: Property}, ${2:newValue: any})"],
    ["_onPropertyChangedFromNative(property: Property, newValue: any): void\tClass ListPicker", "_onPropertyChangedFromNative(${1:property: Property}, ${2:newValue: any})"],
    ["_onPropertyChangedFromNative(property: Property, newValue: any): void\tClass GridLayout", "_onPropertyChangedFromNative(${1:property: Property}, ${2:newValue: any})"],
    ["on(event: loaded, callback: function, thisArg?: any): any\tClass Progress", "on(${1:event: loaded}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_onPropertyChangedFromNative(property: Property, newValue: any): void\tClass ScrollView", "_onPropertyChangedFromNative(${1:property: Property}, ${2:newValue: any})"],
    ["_createPropertyChangeData(name: string, value: any): PropertyChangeData\tClass DependencyObservable", "_createPropertyChangeData(${1:name: string}, ${2:value: any})"],
    ["insertTab(tabItem: SegmentedBarItem, index?: number): void\tClass SegmentedBar", "insertTab(${1:tabItem: SegmentedBarItem}, ${2:index?: number})"],
    ["_onPropertyChangedFromNative(property: Property, newValue: any): void\tClass DockLayout", "_onPropertyChangedFromNative(${1:property: Property}, ${2:newValue: any})"],
    ["on(event: unloaded, callback: function, thisArg?: any): any\tClass View", "on(${1:event: unloaded}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_addToSuperview(superview: any, index?: number): boolean\tClass ProxyViewContainer", "_addToSuperview(${1:superview: any}, ${2:index?: number})"],
    ["onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass StackLayout", "onMeasure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["_onPropertyChangedFromNative(property: Property, newValue: any): void\tClass ActionBar", "_onPropertyChangedFromNative(${1:property: Property}, ${2:newValue: any})"],
    ["onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass Placeholder", "onMeasure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["_onPropertyChangedFromNative(property: Property, newValue: any): void\tClass SearchBar", "_onPropertyChangedFromNative(${1:property: Property}, ${2:newValue: any})"],
    ["getEntities(path: string, onError?: function): Array<object>\tClass FileSystemAccess", "getEntities(${1:path: string}, ${2:onError?: function})"],
    ["_onPropertyChangedFromNative(property: Property, newValue: any): void\tClass TextField", "_onPropertyChangedFromNative(${1:property: Property}, ${2:newValue: any})"],
    ["onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass ContentView", "onMeasure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["on(event: close, callback: function, thisArg?: any): any\tClass SearchBar", "on(${1:event: close}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_onPropertyChangedFromNative(property: Property, newValue: any): void\tClass Progress", "_onPropertyChangedFromNative(${1:property: Property}, ${2:newValue: any})"],
    ["onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass LayoutBase", "onMeasure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["_onPropertyChangedFromNative(property: Property, newValue: any): void\tClass HtmlView", "_onPropertyChangedFromNative(${1:property: Property}, ${2:newValue: any})"],
    ["onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass TimePicker", "onMeasure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["on(event: loaded, callback: function, thisArg?: any): any\tClass Border", "on(${1:event: loaded}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["on(event: loaded, callback: function, thisArg?: any): any\tClass Switch", "on(${1:event: loaded}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass DatePicker", "onMeasure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["notifyPropertyChange(propertyName: string, newValue: any): void\tClass DependencyObservable", "notifyPropertyChange(${1:propertyName: string}, ${2:newValue: any})"],
    ["_onPropertyChangedFromNative(property: Property, newValue: any): void\tClass Repeater", "_onPropertyChangedFromNative(${1:property: Property}, ${2:newValue: any})"],
    ["_resetValue(property: Property, source?: number): void\tClass ProxyViewContainer", "_resetValue(${1:property: Property}, ${2:source?: number})"],
    ["on(event: loaded, callback: function, thisArg?: any): any\tClass Slider", "on(${1:event: loaded}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["setTimeout(callback: Function, milliseconds?: number): number\tModule timer", "setTimeout(${1:callback: Function}, ${2:milliseconds?: number})"],
    ["_addToSuperview(superview: any, index?: number): boolean\tClass ActivityIndicator", "_addToSuperview(${1:superview: any}, ${2:index?: number})"],
    ["toStringOverride(fragment: any, superFunc: Function): string\tInterface AndroidFragmentCallbacks", "toStringOverride(${1:fragment: any}, ${2:superFunc: Function})"],
    ["onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass GridLayout", "onMeasure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass ListPicker", "onMeasure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["_createPropertyChangeData(name: string, value: any): PropertyChangeData\tClass ProxyViewContainer", "_createPropertyChangeData(${1:name: string}, ${2:value: any})"],
    ["_onPropertyChangedFromNative(property: Property, newValue: any): void\tClass ListView", "_onPropertyChangedFromNative(${1:property: Property}, ${2:newValue: any})"],
    ["write(message: any, category: string, type?: number): any\tModule trace", "write(${1:message: any}, ${2:category: string}, ${3:type?: number})"],
    ["onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass ScrollView", "onMeasure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass WrapLayout", "onMeasure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["_createPropertyChangeData(name: string, value: any): PropertyChangeData\tClass ObservableArray<T>", "_createPropertyChangeData(${1:name: string}, ${2:value: any})"],
    ["_onPropertyChangedFromNative(property: Property, newValue: any): void\tClass TextView", "_onPropertyChangedFromNative(${1:property: Property}, ${2:newValue: any})"],
    ["_createPropertyChangeData(name: string, value: any): PropertyChangeData\tClass AndroidApplication", "_createPropertyChangeData(${1:name: string}, ${2:value: any})"],
    ["onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass DockLayout", "onMeasure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["_onPropertyChangedFromNative(property: Property, newValue: any): void\tClass TextBase", "_onPropertyChangedFromNative(${1:property: Property}, ${2:newValue: any})"],
    ["getFile(url: string, destinationFilePath?: string): Promise<File>\tModule http", "getFile(${1:url: string}, ${2:destinationFilePath?: string})"],
    ["measure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass AbsoluteLayout", "measure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["on(event: loaded, callback: function, thisArg?: any): any\tClass Layout", "on(${1:event: loaded}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_createPropertyChangeData(name: string, value: any): PropertyChangeData\tClass ActivityIndicator", "_createPropertyChangeData(${1:name: string}, ${2:value: any})"],
    ["_addToSuperview(superview: any, index?: number): boolean\tClass CustomLayoutView", "_addToSuperview(${1:superview: any}, ${2:index?: number})"],
    ["on(event: loaded, callback: function, thisArg?: any): any\tClass Image", "on(${1:event: loaded}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_onPropertyChangedFromNative(property: Property, newValue: any): void\tClass TabView", "_onPropertyChangedFromNative(${1:property: Property}, ${2:newValue: any})"],
    ["_resetValue(property: Property, source?: number): void\tClass ActivityIndicator", "_resetValue(${1:property: Property}, ${2:source?: number})"],
    ["getNumber(key: string, defaultValue?: number): number\tModule application-settings", "getNumber(${1:key: string}, ${2:defaultValue?: number})"],
    ["_addToSuperview(superview: any, index?: number): boolean\tClass EditableTextBase", "_addToSuperview(${1:superview: any}, ${2:index?: number})"],
    ["getString(key: string, defaultValue?: string): string\tModule application-settings", "getString(${1:key: string}, ${2:defaultValue?: string})"],
    ["onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass ActionBar", "onMeasure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["_onPropertyChangedFromNative(property: Property, newValue: any): void\tClass WebView", "_onPropertyChangedFromNative(${1:property: Property}, ${2:newValue: any})"],
    ["applyInlineSyle(view: View, style: string): void\tModule ui/styling/style-scope", "applyInlineSyle(${1:view: View}, ${2:style: string})"],
    ["onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass TextField", "onMeasure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["on(event: loaded, callback: function, thisArg?: any): any\tClass Label", "on(${1:event: loaded}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass SearchBar", "onMeasure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["_onPropertyChangedFromNative(property: Property, newValue: any): void\tClass Button", "_onPropertyChangedFromNative(${1:property: Property}, ${2:newValue: any})"],
    ["_createPropertyChangeData(name: string, value: any): PropertyChangeData\tClass CustomLayoutView", "_createPropertyChangeData(${1:name: string}, ${2:value: any})"],
    ["eachInheritableProperty(callback: function): any\tModule ui/styling/style-property", "eachInheritableProperty(${1:callback: function})"],
    ["_onPropertyChangedFromNative(property: Property, newValue: any): void\tClass Switch", "_onPropertyChangedFromNative(${1:property: Property}, ${2:newValue: any})"],
    ["on(event: loaded, callback: function, thisArg?: any): any\tClass View", "on(${1:event: loaded}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["measure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass SegmentedBar", "measure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass ListView", "onMeasure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["_onPropertyChangedFromNative(property: Property, newValue: any): void\tClass Layout", "_onPropertyChangedFromNative(${1:property: Property}, ${2:newValue: any})"],
    ["notifyPropertyChange(propertyName: string, newValue: any): void\tClass ProxyViewContainer", "notifyPropertyChange(${1:propertyName: string}, ${2:newValue: any})"],
    ["getValue(model: any, isBackConvert: any, changedModel: any): any\tClass Expression", "getValue(${1:model: any}, ${2:isBackConvert: any}, ${3:changedModel: any})"],
    ["_resetValue(property: Property, source?: number): void\tClass EditableTextBase", "_resetValue(${1:property: Property}, ${2:source?: number})"],
    ["_onPropertyChangedFromNative(property: Property, newValue: any): void\tClass Slider", "_onPropertyChangedFromNative(${1:property: Property}, ${2:newValue: any})"],
    ["_createPropertyChangeData(name: string, value: any): PropertyChangeData\tClass NavigationButton", "_createPropertyChangeData(${1:name: string}, ${2:value: any})"],
    ["onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass TextBase", "onMeasure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["_resetValue(property: Property, source?: number): void\tClass CustomLayoutView", "_resetValue(${1:property: Property}, ${2:source?: number})"],
    ["_createPropertyChangeData(name: string, value: any): PropertyChangeData\tClass EditableTextBase", "_createPropertyChangeData(${1:name: string}, ${2:value: any})"],
    ["onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass HtmlView", "onMeasure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["_onPropertyChangedFromNative(property: Property, newValue: any): void\tClass Border", "_onPropertyChangedFromNative(${1:property: Property}, ${2:newValue: any})"],
    ["onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass Progress", "onMeasure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass TextView", "onMeasure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass Repeater", "onMeasure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["_resetValue(property: Property, source?: number): void\tClass NavigationButton", "_resetValue(${1:property: Property}, ${2:source?: number})"],
    ["notifyPropertyChange(propertyName: string, newValue: any): void\tClass ObservableArray<T>", "notifyPropertyChange(${1:propertyName: string}, ${2:newValue: any})"],
    ["_resetValue(property: Property, source?: number): void\tClass SegmentedBarItem", "_resetValue(${1:property: Property}, ${2:source?: number})"],
    ["_createPropertyChangeData(name: string, value: any): PropertyChangeData\tInterface AndroidFrame", "_createPropertyChangeData(${1:name: string}, ${2:value: any})"],
    ["notifyPropertyChange(propertyName: string, newValue: any): void\tClass AndroidApplication", "notifyPropertyChange(${1:propertyName: string}, ${2:newValue: any})"],
    ["_createPropertyChangeData(name: string, value: any): PropertyChangeData\tClass SegmentedBarItem", "_createPropertyChangeData(${1:name: string}, ${2:value: any})"],
    ["_createPropertyChangeData(name: string, value: any): PropertyChangeData\tClass FormattedString", "_createPropertyChangeData(${1:name: string}, ${2:value: any})"],
    ["_addToSuperview(superview: any, index?: number): boolean\tClass AbsoluteLayout", "_addToSuperview(${1:superview: any}, ${2:index?: number})"],
    ["parseCss(cssText: string, cssFileName?: string): RuleSet[]\tModule application", "parseCss(${1:cssText: string}, ${2:cssFileName?: string})"],
    ["_onPropertyChangedFromNative(property: Property, newValue: any): void\tClass Label", "_onPropertyChangedFromNative(${1:property: Property}, ${2:newValue: any})"],
    ["_onPropertyChangedFromNative(property: Property, newValue: any): void\tClass Image", "_onPropertyChangedFromNative(${1:property: Property}, ${2:newValue: any})"],
    ["measure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass StackLayout", "measure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["measure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass Placeholder", "measure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["notifyPropertyChange(propertyName: string, newValue: any): void\tClass ActivityIndicator", "notifyPropertyChange(${1:propertyName: string}, ${2:newValue: any})"],
    ["onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass WebView", "onMeasure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["measure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass ContentView", "measure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass TabView", "onMeasure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["_createPropertyChangeData(name: string, value: any): PropertyChangeData\tClass VirtualArray<T>", "_createPropertyChangeData(${1:name: string}, ${2:value: any})"],
    ["_onPropertyChangedFromNative(property: Property, newValue: any): void\tClass Frame", "_onPropertyChangedFromNative(${1:property: Property}, ${2:newValue: any})"],
    ["notifyPropertyChange(propertyName: string, newValue: any): void\tClass SegmentedBarItem", "notifyPropertyChange(${1:propertyName: string}, ${2:newValue: any})"],
    ["_onPropertyChangedFromNative(property: Property, newValue: any): void\tClass Page", "_onPropertyChangedFromNative(${1:property: Property}, ${2:newValue: any})"],
    ["notifyPropertyChange(propertyName: string, newValue: any): void\tClass CustomLayoutView", "notifyPropertyChange(${1:propertyName: string}, ${2:newValue: any})"],
    ["_checkMetadataOnPropertyChanged(metadata: PropertyMetadata): any\tClass ProxyViewContainer", "_checkMetadataOnPropertyChanged(${1:metadata: PropertyMetadata})"],
    ["_createPropertyChangeData(name: string, value: any): PropertyChangeData\tClass AbsoluteLayout", "_createPropertyChangeData(${1:name: string}, ${2:value: any})"],
    ["notifyPropertyChange(propertyName: string, newValue: any): void\tClass NavigationButton", "notifyPropertyChange(${1:propertyName: string}, ${2:newValue: any})"],
    ["notifyPropertyChange(propertyName: string, newValue: any): void\tInterface AndroidFrame", "notifyPropertyChange(${1:propertyName: string}, ${2:newValue: any})"],
    ["measure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass WrapLayout", "measure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["measure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass ScrollView", "measure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass Button", "onMeasure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass Slider", "onMeasure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["measure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass ListPicker", "measure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["measure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass TimePicker", "measure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["measure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass DockLayout", "measure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["eachDescendant(view: View, callback: function): any\tModule ui/core/view", "eachDescendant(${1:view: View}, ${2:callback: function})"],
    ["resolveFileName(path: string, ext: string): string\tModule file-system/file-name-resolver", "resolveFileName(${1:path: string}, ${2:ext: string})"],
    ["renameSync(newName: string, onError?: function): void\tClass FileSystemEntity", "renameSync(${1:newName: string}, ${2:onError?: function})"],
    ["notifyPropertyChange(propertyName: string, newValue: any): void\tClass EditableTextBase", "notifyPropertyChange(${1:propertyName: string}, ${2:newValue: any})"],
    ["onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass Switch", "onMeasure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass Border", "onMeasure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["indexOf(searchElement: T, fromIndex?: number): number\tClass ObservableArray<T>", "indexOf(${1:searchElement: T}, ${2:fromIndex?: number})"],
    ["onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass Layout", "onMeasure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["_onPropertyChangedFromNative(property: Property, newValue: any): void\tClass View", "_onPropertyChangedFromNative(${1:property: Property}, ${2:newValue: any})"],
    ["measure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass DatePicker", "measure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["measure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass LayoutBase", "measure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["_resetValue(property: Property, source?: number): void\tClass AbsoluteLayout", "_resetValue(${1:property: Property}, ${2:source?: number})"],
    ["measure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass GridLayout", "measure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["bind(options: BindingOptions, source?: Object): any\tClass ProxyViewContainer", "bind(${1:options: BindingOptions}, ${2:source?: Object})"],
    ["onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass Image", "onMeasure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["mergeSort(arr: Array<any>, compareFunc: function): Array<any>\tModule utils/utils", "mergeSort(${1:arr: Array<any>}, ${2:compareFunc: function})"],
    ["measure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass TextField", "measure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass Frame", "onMeasure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["_addToSuperview(superview: any, index?: number): boolean\tClass SegmentedBar", "_addToSuperview(${1:superview: any}, ${2:index?: number})"],
    ["onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass Label", "onMeasure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["toBase64String(format: string, quality?: number): string\tClass ImageSource", "toBase64String(${1:format: string}, ${2:quality?: number})"],
    ["_checkMetadataOnPropertyChanged(metadata: PropertyMetadata): any\tClass ActivityIndicator", "_checkMetadataOnPropertyChanged(${1:metadata: PropertyMetadata})"],
    ["notifyPropertyChange(propertyName: string, newValue: any): void\tClass VirtualArray<T>", "notifyPropertyChange(${1:propertyName: string}, ${2:newValue: any})"],
    ["notifyPropertyChange(propertyName: string, newValue: any): void\tClass FormattedString", "notifyPropertyChange(${1:propertyName: string}, ${2:newValue: any})"],
    ["measure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass ActionBar", "measure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["on(object: Object, name: string, data?: any): any\tInterface EventListener", "on(${1:object: Object}, ${2:name: string}, ${3:data?: any})"],
    ["_addArrayFromBuilder(name: string, value: Array<any>): void\tInterface AddArrayFromBuilder", "_addArrayFromBuilder(${1:name: string}, ${2:value: Array<any>})"],
    ["measure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass SearchBar", "measure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass View", "onMeasure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["notifyPropertyChange(propertyName: string, newValue: any): void\tClass AbsoluteLayout", "notifyPropertyChange(${1:propertyName: string}, ${2:newValue: any})"],
    ["on(event: tap, callback: function, thisArg?: any): any\tClass Button", "on(${1:event: tap}, ${2:callback: function}, ${3:thisArg?: any})"],
    ["_checkMetadataOnPropertyChanged(metadata: PropertyMetadata): any\tClass CustomLayoutView", "_checkMetadataOnPropertyChanged(${1:metadata: PropertyMetadata})"],
    ["bind(options: BindingOptions, source?: Object): any\tClass ActivityIndicator", "bind(${1:options: BindingOptions}, ${2:source?: Object})"],
    ["measure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass TextBase", "measure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["_addToSuperview(superview: any, index?: number): boolean\tClass ContentView", "_addToSuperview(${1:superview: any}, ${2:index?: number})"],
    ["parse(code: string, options?: Options): Program\tModule js-libs/esprima", "parse(${1:code: string}, ${2:options?: Options})"],
    ["_checkMetadataOnPropertyChanged(metadata: PropertyMetadata): any\tClass EditableTextBase", "_checkMetadataOnPropertyChanged(${1:metadata: PropertyMetadata})"],
    ["_addToSuperview(superview: any, index?: number): boolean\tClass Placeholder", "_addToSuperview(${1:superview: any}, ${2:index?: number})"],
    ["_resetValue(property: Property, source?: number): void\tClass SegmentedBar", "_resetValue(${1:property: Property}, ${2:source?: number})"],
    ["measure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass Progress", "measure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass Page", "onMeasure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["measure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass Repeater", "measure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["measure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass ListView", "measure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["measure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass TextView", "measure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["measure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass HtmlView", "measure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["_prepareCurrentFragmentForClearHistory(fragment: any): void\tModule ui/transition", "_prepareCurrentFragmentForClearHistory(${1:fragment: any})"],
    ["_createPropertyChangeData(name: string, value: any): PropertyChangeData\tClass SegmentedBar", "_createPropertyChangeData(${1:name: string}, ${2:value: any})"],
    ["_addToSuperview(superview: any, index?: number): boolean\tClass StackLayout", "_addToSuperview(${1:superview: any}, ${2:index?: number})"],
    ["_addToSuperview(superview: any, index?: number): boolean\tClass LayoutBase", "_addToSuperview(${1:superview: any}, ${2:index?: number})"],
    ["bind(options: BindingOptions, source?: Object): any\tClass EditableTextBase", "bind(${1:options: BindingOptions}, ${2:source?: Object})"],
    ["slice(start?: number, end?: number): T[]\tClass ObservableArray<T>", "slice(${1:start?: number}, ${2:end?: number})"],
    ["_addToSuperview(superview: any, index?: number): boolean\tClass DatePicker", "_addToSuperview(${1:superview: any}, ${2:index?: number})"],
    ["measure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass WebView", "measure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["_addToSuperview(superview: any, index?: number): boolean\tClass TimePicker", "_addToSuperview(${1:superview: any}, ${2:index?: number})"],
    ["_addToSuperview(superview: any, index?: number): boolean\tClass ListPicker", "_addToSuperview(${1:superview: any}, ${2:index?: number})"],
    ["_resetValue(property: Property, source?: number): void\tClass ContentView", "_resetValue(${1:property: Property}, ${2:source?: number})"],
    ["reduce(callbackfn: function, initialValue?: T): T\tClass ObservableArray<T>", "reduce(${1:callbackfn: function}, ${2:initialValue?: T})"],
    ["bind(options: BindingOptions, source?: Object): any\tClass SegmentedBarItem", "bind(${1:options: BindingOptions}, ${2:source?: Object})"],
    ["_createPropertyChangeData(name: string, value: any): PropertyChangeData\tClass ContentView", "_createPropertyChangeData(${1:name: string}, ${2:value: any})"],
    ["bind(options: BindingOptions, source?: Object): any\tClass NavigationButton", "bind(${1:options: BindingOptions}, ${2:source?: Object})"],
    ["_resetValue(property: Property, source?: number): void\tClass StackLayout", "_resetValue(${1:property: Property}, ${2:source?: number})"],
    ["_addToSuperview(superview: any, index?: number): boolean\tClass ScrollView", "_addToSuperview(${1:superview: any}, ${2:index?: number})"],
    ["_createPropertyChangeData(name: string, value: any): PropertyChangeData\tClass ProxyObject", "_createPropertyChangeData(${1:name: string}, ${2:value: any})"],
    ["_createPropertyChangeData(name: string, value: any): PropertyChangeData\tClass Placeholder", "_createPropertyChangeData(${1:name: string}, ${2:value: any})"],
    ["_addToSuperview(superview: any, index?: number): boolean\tClass DockLayout", "_addToSuperview(${1:superview: any}, ${2:index?: number})"],
    ["_resetValue(property: Property, source?: number): void\tClass Placeholder", "_resetValue(${1:property: Property}, ${2:source?: number})"],
    ["_resetValue(property: Property, source?: number): void\tClass TabViewItem", "_resetValue(${1:property: Property}, ${2:source?: number})"],
    ["deleteFolder(path: string, onError?: function): any\tClass FileSystemAccess", "deleteFolder(${1:path: string}, ${2:onError?: function})"],
    ["_addToSuperview(superview: any, index?: number): boolean\tClass GridLayout", "_addToSuperview(${1:superview: any}, ${2:index?: number})"],
    ["_addToSuperview(superview: any, index?: number): boolean\tClass WrapLayout", "_addToSuperview(${1:superview: any}, ${2:index?: number})"],
    ["_createPropertyChangeData(name: string, value: any): PropertyChangeData\tClass StackLayout", "_createPropertyChangeData(${1:name: string}, ${2:value: any})"],
    ["measure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass TabView", "measure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["_createPropertyChangeData(name: string, value: any): PropertyChangeData\tClass TabViewItem", "_createPropertyChangeData(${1:name: string}, ${2:value: any})"],
    ["_resetValue(property: Property, source?: number): void\tClass ProxyObject", "_resetValue(${1:property: Property}, ${2:source?: number})"],
    ["bind(options: BindingOptions, source?: Object): any\tClass CustomLayoutView", "bind(${1:options: BindingOptions}, ${2:source?: Object})"],
    ["_resetValue(property: Property, source?: number): void\tClass WrapLayout", "_resetValue(${1:property: Property}, ${2:source?: number})"],
    ["forEach(callbackfn: function, thisArg?: any): void\tClass ObservableArray<T>", "forEach(${1:callbackfn: function}, ${2:thisArg?: any})"],
    ["_addToSuperview(superview: any, index?: number): boolean\tClass TextField", "_addToSuperview(${1:superview: any}, ${2:index?: number})"],
    ["measure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass Border", "measure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["_resetValue(property: Property, source?: number): void\tClass TimePicker", "_resetValue(${1:property: Property}, ${2:source?: number})"],
    ["_createPropertyChangeData(name: string, value: any): PropertyChangeData\tClass Observable", "_createPropertyChangeData(${1:name: string}, ${2:value: any})"],
    ["_resetValue(property: Property, source?: number): void\tClass ListPicker", "_resetValue(${1:property: Property}, ${2:source?: number})"],
    ["onDestroyView(fragment: any, superFunc: Function): void\tInterface AndroidFragmentCallbacks", "onDestroyView(${1:fragment: any}, ${2:superFunc: Function})"],
    ["measure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass Layout", "measure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["emptyFolder(path: string, onError?: function): void\tClass FileSystemAccess", "emptyFolder(${1:path: string}, ${2:onError?: function})"],
    ["_createPropertyChangeData(name: string, value: any): PropertyChangeData\tClass WrapLayout", "_createPropertyChangeData(${1:name: string}, ${2:value: any})"],
    ["_createPropertyChangeData(name: string, value: any): PropertyChangeData\tClass ScrollView", "_createPropertyChangeData(${1:name: string}, ${2:value: any})"],
    ["_addToSuperview(superview: any, index?: number): boolean\tClass SearchBar", "_addToSuperview(${1:superview: any}, ${2:index?: number})"],
    ["_resetValue(property: Property, source?: number): void\tClass ActionItem", "_resetValue(${1:property: Property}, ${2:source?: number})"],
    ["_createPropertyChangeData(name: string, value: any): PropertyChangeData\tClass GridLayout", "_createPropertyChangeData(${1:name: string}, ${2:value: any})"],
    ["_resetValue(property: Property, source?: number): void\tClass ScrollView", "_resetValue(${1:property: Property}, ${2:source?: number})"],
    ["measure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass Button", "measure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["_resetValue(property: Property, source?: number): void\tClass DockLayout", "_resetValue(${1:property: Property}, ${2:source?: number})"],
    ["isEventOrGesture(name: string, view: View): boolean\tModule ui/core/view", "isEventOrGesture(${1:name: string}, ${2:view: View})"],
    ["_createPropertyChangeData(name: string, value: any): PropertyChangeData\tClass ListPicker", "_createPropertyChangeData(${1:name: string}, ${2:value: any})"],
    ["_checkMetadataOnPropertyChanged(metadata: PropertyMetadata): any\tClass AbsoluteLayout", "_checkMetadataOnPropertyChanged(${1:metadata: PropertyMetadata})"],
    ["_addToSuperview(superview: any, index?: number): boolean\tClass ActionBar", "_addToSuperview(${1:superview: any}, ${2:index?: number})"],
    ["_createPropertyChangeData(name: string, value: any): PropertyChangeData\tClass DockLayout", "_createPropertyChangeData(${1:name: string}, ${2:value: any})"],
    ["onBackPressed(activity: any, superFunc: Function): void\tInterface AndroidActivityCallbacks", "onBackPressed(${1:activity: any}, ${2:superFunc: Function})"],
    ["_createPropertyChangeData(name: string, value: any): PropertyChangeData\tClass ActionItem", "_createPropertyChangeData(${1:name: string}, ${2:value: any})"],
    ["_setNavBarBackgroundColor(navBar: any, color: any): any\tModule ui/action-bar", "_setNavBarBackgroundColor(${1:navBar: any}, ${2:color: any})"],
    ["measure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass Slider", "measure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["_resetValue(property: Property, source?: number): void\tClass LayoutBase", "_resetValue(${1:property: Property}, ${2:source?: number})"],
    ["notifyPropertyChange(propertyName: string, newValue: any): void\tClass SegmentedBar", "notifyPropertyChange(${1:propertyName: string}, ${2:newValue: any})"],
    ["_resetValue(property: Property, source?: number): void\tClass GridLayout", "_resetValue(${1:property: Property}, ${2:source?: number})"],
    ["_createPropertyChangeData(name: string, value: any): PropertyChangeData\tClass LayoutBase", "_createPropertyChangeData(${1:name: string}, ${2:value: any})"],
    ["_resetValue(property: Property, source?: number): void\tClass DatePicker", "_resetValue(${1:property: Property}, ${2:source?: number})"],
    ["_createPropertyChangeData(name: string, value: any): PropertyChangeData\tClass DatePicker", "_createPropertyChangeData(${1:name: string}, ${2:value: any})"],
    ["measure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass Switch", "measure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["_createPropertyChangeData(name: string, value: any): PropertyChangeData\tClass TimePicker", "_createPropertyChangeData(${1:name: string}, ${2:value: any})"],
    ["notifyPropertyChange(propertyName: string, newValue: any): void\tClass TabViewItem", "notifyPropertyChange(${1:propertyName: string}, ${2:newValue: any})"],
    ["_childIndexToNativeChildIndex(index?: number): number\tClass ProxyViewContainer", "_childIndexToNativeChildIndex(${1:index?: number})"],
    ["measure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass Label", "measure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["notifyPropertyChange(propertyName: string, newValue: any): void\tClass ProxyObject", "notifyPropertyChange(${1:propertyName: string}, ${2:newValue: any})"],
    ["measure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass Image", "measure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["_addToSuperview(superview: any, index?: number): boolean\tClass Repeater", "_addToSuperview(${1:superview: any}, ${2:index?: number})"],
    ["_addToSuperview(superview: any, index?: number): boolean\tClass HtmlView", "_addToSuperview(${1:superview: any}, ${2:index?: number})"],
    ["notifyPropertyChange(propertyName: string, newValue: any): void\tClass StackLayout", "notifyPropertyChange(${1:propertyName: string}, ${2:newValue: any})"],
    ["_createPropertyChangeData(name: string, value: any): PropertyChangeData\tClass ActionBar", "_createPropertyChangeData(${1:name: string}, ${2:value: any})"],
    ["every(callbackfn: function, thisArg?: any): boolean\tClass ObservableArray<T>", "every(${1:callbackfn: function}, ${2:thisArg?: any})"],
    ["measure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass Frame", "measure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["_resetValue(property: Property, source?: number): void\tClass ActionBar", "_resetValue(${1:property: Property}, ${2:source?: number})"],
    ["_createPropertyChangeData(name: string, value: any): PropertyChangeData\tClass TextField", "_createPropertyChangeData(${1:name: string}, ${2:value: any})"],
    ["notifyPropertyChange(propertyName: string, newValue: any): void\tClass Placeholder", "notifyPropertyChange(${1:propertyName: string}, ${2:newValue: any})"],
    ["notifyPropertyChange(propertyName: string, newValue: any): void\tClass ContentView", "notifyPropertyChange(${1:propertyName: string}, ${2:newValue: any})"],
    ["_addToSuperview(superview: any, index?: number): boolean\tClass TextBase", "_addToSuperview(${1:superview: any}, ${2:index?: number})"],
    ["bind(options: BindingOptions, source?: Object): any\tClass AbsoluteLayout", "bind(${1:options: BindingOptions}, ${2:source?: Object})"],
    ["_onBindingContextChanged(oldValue: any, newValue: any): any\tClass ProxyViewContainer", "_onBindingContextChanged(${1:oldValue: any}, ${2:newValue: any})"],
    ["_resetValue(property: Property, source?: number): void\tClass TextField", "_resetValue(${1:property: Property}, ${2:source?: number})"],
    ["_addToSuperview(superview: any, index?: number): boolean\tClass Progress", "_addToSuperview(${1:superview: any}, ${2:index?: number})"],
    ["_updateTwoWayBinding(propertyName: string, value: any): any\tClass ProxyViewContainer", "_updateTwoWayBinding(${1:propertyName: string}, ${2:value: any})"],
    ["_resetValue(property: Property, source?: number): void\tClass SearchBar", "_resetValue(${1:property: Property}, ${2:source?: number})"],
    ["_createPropertyChangeData(name: string, value: any): PropertyChangeData\tClass SearchBar", "_createPropertyChangeData(${1:name: string}, ${2:value: any})"],
    ["_addToSuperview(superview: any, index?: number): boolean\tClass ListView", "_addToSuperview(${1:superview: any}, ${2:index?: number})"],
    ["scrollToHorizontalOffset(value: number, animated: boolean): any\tClass ScrollView", "scrollToHorizontalOffset(${1:value: number}, ${2:animated: boolean})"],
    ["_addToSuperview(superview: any, index?: number): boolean\tClass TextView", "_addToSuperview(${1:superview: any}, ${2:index?: number})"],
    ["_createPropertyChangeData(name: string, value: any): PropertyChangeData\tClass TextBase", "_createPropertyChangeData(${1:name: string}, ${2:value: any})"],
    ["_createPropertyChangeData(name: string, value: any): PropertyChangeData\tClass ListView", "_createPropertyChangeData(${1:name: string}, ${2:value: any})"],
    ["_createPropertyChangeData(name: string, value: any): PropertyChangeData\tClass Progress", "_createPropertyChangeData(${1:name: string}, ${2:value: any})"],
    ["_resetValue(property: Property, source?: number): void\tClass HtmlView", "_resetValue(${1:property: Property}, ${2:source?: number})"],
    ["getParent(path: string, onError?: function): object\tClass FileSystemAccess", "getParent(${1:path: string}, ${2:onError?: function})"],
    ["notifyPropertyChange(propertyName: string, newValue: any): void\tClass TimePicker", "notifyPropertyChange(${1:propertyName: string}, ${2:newValue: any})"],
    ["_resetValue(property: Property, source?: number): void\tClass TextView", "_resetValue(${1:property: Property}, ${2:source?: number})"],
    ["getFolder(path: string, onError?: function): object\tClass FileSystemAccess", "getFolder(${1:path: string}, ${2:onError?: function})"],
    ["getKeyframeAnimationWithName(animationName: string): KeyframeAnimationInfo\tClass StyleScope", "getKeyframeAnimationWithName(${1:animationName: string})"],
    ["_onBindingContextChanged(oldValue: any, newValue: any): any\tClass ActivityIndicator", "_onBindingContextChanged(${1:oldValue: any}, ${2:newValue: any})"],
    ["notifyPropertyChange(propertyName: string, newValue: any): void\tClass LayoutBase", "notifyPropertyChange(${1:propertyName: string}, ${2:newValue: any})"],
    ["_createPropertyChangeData(name: string, value: any): PropertyChangeData\tClass Bindable", "_createPropertyChangeData(${1:name: string}, ${2:value: any})"],
    ["_createPropertyChangeData(name: string, value: any): PropertyChangeData\tClass HtmlView", "_createPropertyChangeData(${1:name: string}, ${2:value: any})"],
    ["_resetValue(property: Property, source?: number): void\tClass ListView", "_resetValue(${1:property: Property}, ${2:source?: number})"],
    ["_createPropertyChangeData(name: string, value: any): PropertyChangeData\tClass TextView", "_createPropertyChangeData(${1:name: string}, ${2:value: any})"],
    ["_resetValue(property: Property, source?: number): void\tClass Bindable", "_resetValue(${1:property: Property}, ${2:source?: number})"],
    ["_childIndexToNativeChildIndex(index?: number): number\tClass ActivityIndicator", "_childIndexToNativeChildIndex(${1:index?: number})"],
    ["notifyPropertyChange(propertyName: string, newValue: any): void\tClass ScrollView", "notifyPropertyChange(${1:propertyName: string}, ${2:newValue: any})"],
    ["notifyPropertyChange(propertyName: string, newValue: any): void\tClass ActionItem", "notifyPropertyChange(${1:propertyName: string}, ${2:newValue: any})"],
    ["_createPropertyChangeData(name: string, value: any): PropertyChangeData\tClass Repeater", "_createPropertyChangeData(${1:name: string}, ${2:value: any})"],
    ["notifyPropertyChange(propertyName: string, newValue: any): void\tClass ListPicker", "notifyPropertyChange(${1:propertyName: string}, ${2:newValue: any})"],
    ["notifyPropertyChange(propertyName: string, newValue: any): void\tClass DockLayout", "notifyPropertyChange(${1:propertyName: string}, ${2:newValue: any})"],
    ["_updateTwoWayBinding(propertyName: string, value: any): any\tClass ActivityIndicator", "_updateTwoWayBinding(${1:propertyName: string}, ${2:value: any})"],
    ["_checkMetadataOnPropertyChanged(metadata: PropertyMetadata): any\tClass SegmentedBar", "_checkMetadataOnPropertyChanged(${1:metadata: PropertyMetadata})"],
    ["notifyPropertyChange(propertyName: string, newValue: any): void\tClass GridLayout", "notifyPropertyChange(${1:propertyName: string}, ${2:newValue: any})"],
    ["_resetValue(property: Property, source?: number): void\tClass Progress", "_resetValue(${1:property: Property}, ${2:source?: number})"],
    ["notifyPropertyChange(propertyName: string, newValue: any): void\tClass WrapLayout", "notifyPropertyChange(${1:propertyName: string}, ${2:newValue: any})"],
    ["measure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass View", "measure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["_addToSuperview(superview: any, index?: number): boolean\tClass TabView", "_addToSuperview(${1:superview: any}, ${2:index?: number})"],
    ["measure(widthMeasureSpec: number, heightMeasureSpec: number): void\tClass Page", "measure(${1:widthMeasureSpec: number}, ${2:heightMeasureSpec: number})"],
    ["_addToSuperview(superview: any, index?: number): boolean\tClass WebView", "_addToSuperview(${1:superview: any}, ${2:index?: number})"],
    ["notifyPropertyChange(propertyName: string, newValue: any): void\tClass DatePicker", "notifyPropertyChange(${1:propertyName: string}, ${2:newValue: any})"],
    ["notifyPropertyChange(propertyName: string, newValue: any): void\tClass Observable", "notifyPropertyChange(${1:propertyName: string}, ${2:newValue: any})"],
    ["_resetValue(property: Property, source?: number): void\tClass Repeater", "_resetValue(${1:property: Property}, ${2:source?: number})"],
    ["_resetValue(property: Property, source?: number): void\tClass TextBase", "_resetValue(${1:property: Property}, ${2:source?: number})"],
    ["filter(callbackfn: function, thisArg?: any): T[]\tClass ObservableArray<T>", "filter(${1:callbackfn: function}, ${2:thisArg?: any})"],
    ["_checkMetadataOnPropertyChanged(metadata: PropertyMetadata): any\tClass StackLayout", "_checkMetadataOnPropertyChanged(${1:metadata: PropertyMetadata})"],
    ["deleteFile(path: string, onError?: function): any\tClass FileSystemAccess", "deleteFile(${1:path: string}, ${2:onError?: function})"],
    ["_addToSuperview(superview: any, index?: number): boolean\tClass Layout", "_addToSuperview(${1:superview: any}, ${2:index?: number})"],
    ["_onFragmentShown(fragment: any, isBack: boolean): void\tModule ui/transition", "_onFragmentShown(${1:fragment: any}, ${2:isBack: boolean})"],
    ["bind(options: BindingOptions, source?: Object): any\tClass SegmentedBar", "bind(${1:options: BindingOptions}, ${2:source?: Object})"],
    ["_addToSuperview(superview: any, index?: number): boolean\tClass Switch", "_addToSuperview(${1:superview: any}, ${2:index?: number})"],
    ["notifyPropertyChange(propertyName: string, newValue: any): void\tClass TextField", "notifyPropertyChange(${1:propertyName: string}, ${2:newValue: any})"],
    ["notifyPropertyChange(propertyName: string, newValue: any): void\tClass SearchBar", "notifyPropertyChange(${1:propertyName: string}, ${2:newValue: any})"],
    ["_updateTwoWayBinding(propertyName: string, value: any): any\tClass SegmentedBarItem", "_updateTwoWayBinding(${1:propertyName: string}, ${2:value: any})"],
    ["_onBindingContextChanged(oldValue: any, newValue: any): any\tClass NavigationButton", "_onBindingContextChanged(${1:oldValue: any}, ${2:newValue: any})"],
    ["_createPropertyChangeData(name: string, value: any): PropertyChangeData\tClass TabView", "_createPropertyChangeData(${1:name: string}, ${2:value: any})"],
    ["_checkMetadataOnPropertyChanged(metadata: PropertyMetadata): any\tClass ContentView", "_checkMetadataOnPropertyChanged(${1:metadata: PropertyMetadata})"],
    ["_updateTwoWayBinding(propertyName: string, value: any): any\tClass NavigationButton", "_updateTwoWayBinding(${1:propertyName: string}, ${2:value: any})"],
    ["_resetValue(property: Property, source?: number): void\tClass TabView", "_resetValue(${1:property: Property}, ${2:source?: number})"],
    ["_childIndexToNativeChildIndex(index?: number): number\tClass CustomLayoutView", "_childIndexToNativeChildIndex(${1:index?: number})"],
    ["_onBindingContextChanged(oldValue: any, newValue: any): any\tClass CustomLayoutView", "_onBindingContextChanged(${1:oldValue: any}, ${2:newValue: any})"],
    ["_updateTwoWayBinding(propertyName: string, value: any): any\tClass CustomLayoutView", "_updateTwoWayBinding(${1:propertyName: string}, ${2:value: any})"],
    ["notifyPropertyChange(propertyName: string, newValue: any): void\tClass ActionBar", "notifyPropertyChange(${1:propertyName: string}, ${2:newValue: any})"],
    ["_createPropertyChangeData(name: string, value: any): PropertyChangeData\tClass WebView", "_createPropertyChangeData(${1:name: string}, ${2:value: any})"],
    ["_childIndexToNativeChildIndex(index?: number): number\tClass EditableTextBase", "_childIndexToNativeChildIndex(${1:index?: number})"],
    ["_addToSuperview(superview: any, index?: number): boolean\tClass Slider", "_addToSuperview(${1:superview: any}, ${2:index?: number})"],
    ["_updateTwoWayBinding(propertyName: string, value: any): any\tClass EditableTextBase", "_updateTwoWayBinding(${1:propertyName: string}, ${2:value: any})"],
    ["_resetValue(property: Property, source?: number): void\tClass WebView", "_resetValue(${1:property: Property}, ${2:source?: number})"],
    ["_addToSuperview(superview: any, index?: number): boolean\tClass Button", "_addToSuperview(${1:superview: any}, ${2:index?: number})"],
    ["_onBindingContextChanged(oldValue: any, newValue: any): any\tClass EditableTextBase", "_onBindingContextChanged(${1:oldValue: any}, ${2:newValue: any})"],
    ["_addToSuperview(superview: any, index?: number): boolean\tClass Border", "_addToSuperview(${1:superview: any}, ${2:index?: number})"],
    ["map<U>(callbackfn: function, thisArg?: any): U[]\tClass ObservableArray<T>", "map<U>(${1:callbackfn: function}, ${2:thisArg?: any})"],
    ["_onBindingContextChanged(oldValue: any, newValue: any): any\tClass SegmentedBarItem", "_onBindingContextChanged(${1:oldValue: any}, ${2:newValue: any})"],
    ["_checkMetadataOnPropertyChanged(metadata: PropertyMetadata): any\tClass Placeholder", "_checkMetadataOnPropertyChanged(${1:metadata: PropertyMetadata})"],
    ["some(callbackfn: function, thisArg?: any): boolean\tClass ObservableArray<T>", "some(${1:callbackfn: function}, ${2:thisArg?: any})"],
    ["notifyPropertyChange(propertyName: string, newValue: any): void\tClass TextBase", "notifyPropertyChange(${1:propertyName: string}, ${2:newValue: any})"],
    ["_addToSuperview(superview: any, index?: number): boolean\tClass Frame", "_addToSuperview(${1:superview: any}, ${2:index?: number})"],
    ["_checkMetadataOnPropertyChanged(metadata: PropertyMetadata): any\tClass ListPicker", "_checkMetadataOnPropertyChanged(${1:metadata: PropertyMetadata})"],
    ["_resetValue(property: Property, source?: number): void\tClass Switch", "_resetValue(${1:property: Property}, ${2:source?: number})"],
    ["_checkMetadataOnPropertyChanged(metadata: PropertyMetadata): any\tClass DatePicker", "_checkMetadataOnPropertyChanged(${1:metadata: PropertyMetadata})"],
    ["_createPropertyChangeData(name: string, value: any): PropertyChangeData\tClass Slider", "_createPropertyChangeData(${1:name: string}, ${2:value: any})"],
    ["_resetValue(property: Property, source?: number): void\tClass Border", "_resetValue(${1:property: Property}, ${2:source?: number})"],
    ["_checkMetadataOnPropertyChanged(metadata: PropertyMetadata): any\tClass DockLayout", "_checkMetadataOnPropertyChanged(${1:metadata: PropertyMetadata})"],
    ["_checkMetadataOnPropertyChanged(metadata: PropertyMetadata): any\tClass LayoutBase", "_checkMetadataOnPropertyChanged(${1:metadata: PropertyMetadata})"],
    ["_resetValue(property: Property, source?: number): void\tClass Slider", "_resetValue(${1:property: Property}, ${2:source?: number})"],
    ["_createPropertyChangeData(name: string, value: any): PropertyChangeData\tClass Border", "_createPropertyChangeData(${1:name: string}, ${2:value: any})"],
    ["bind(options: BindingOptions, source?: Object): any\tClass StackLayout", "bind(${1:options: BindingOptions}, ${2:source?: Object})"],
    ["_checkMetadataOnPropertyChanged(metadata: PropertyMetadata): any\tClass ScrollView", "_checkMetadataOnPropertyChanged(${1:metadata: PropertyMetadata})"],
    ["_checkMetadataOnPropertyChanged(metadata: PropertyMetadata): any\tClass GridLayout", "_checkMetadataOnPropertyChanged(${1:metadata: PropertyMetadata})"],
    ["_checkMetadataOnPropertyChanged(metadata: PropertyMetadata): any\tClass WrapLayout", "_checkMetadataOnPropertyChanged(${1:metadata: PropertyMetadata})"],
    ["_removePageNativeViewFromAndroidParent(page: Page): void\tModule ui/transition", "_removePageNativeViewFromAndroidParent(${1:page: Page})"],
    ["bind(options: BindingOptions, source?: Object): any\tClass Placeholder", "bind(${1:options: BindingOptions}, ${2:source?: Object})"],
    ["notifyPropertyChange(propertyName: string, newValue: any): void\tClass Progress", "notifyPropertyChange(${1:propertyName: string}, ${2:newValue: any})"],
    ["_createPropertyChangeData(name: string, value: any): PropertyChangeData\tClass Switch", "_createPropertyChangeData(${1:name: string}, ${2:value: any})"],
    ["notifyPropertyChange(propertyName: string, newValue: any): void\tClass TextView", "notifyPropertyChange(${1:propertyName: string}, ${2:newValue: any})"],
    ["notifyPropertyChange(propertyName: string, newValue: any): void\tClass Bindable", "notifyPropertyChange(${1:propertyName: string}, ${2:newValue: any})"],
    ["_createPropertyChangeData(name: string, value: any): PropertyChangeData\tClass Button", "_createPropertyChangeData(${1:name: string}, ${2:value: any})"],
    ["bind(options: BindingOptions, source?: Object): any\tClass ProxyObject", "bind(${1:options: BindingOptions}, ${2:source?: Object})"],
    ["_resetValue(property: Property, source?: number): void\tClass Button", "_resetValue(${1:property: Property}, ${2:source?: number})"],
    ["_checkMetadataOnPropertyChanged(metadata: PropertyMetadata): any\tClass TimePicker", "_checkMetadataOnPropertyChanged(${1:metadata: PropertyMetadata})"],
    ["notifyPropertyChange(propertyName: string, newValue: any): void\tClass Repeater", "notifyPropertyChange(${1:propertyName: string}, ${2:newValue: any})"],
    ["notifyPropertyChange(propertyName: string, newValue: any): void\tClass HtmlView", "notifyPropertyChange(${1:propertyName: string}, ${2:newValue: any})"],
    ["_addToSuperview(superview: any, index?: number): boolean\tClass Label", "_addToSuperview(${1:superview: any}, ${2:index?: number})"],
    ["_addToSuperview(superview: any, index?: number): boolean\tClass Image", "_addToSuperview(${1:superview: any}, ${2:index?: number})"],
    ["notifyPropertyChange(propertyName: string, newValue: any): void\tClass ListView", "notifyPropertyChange(${1:propertyName: string}, ${2:newValue: any})"],
    ["bind(options: BindingOptions, source?: Object): any\tClass TabViewItem", "bind(${1:options: BindingOptions}, ${2:source?: Object})"],
    ["bind(options: BindingOptions, source?: Object): any\tClass ContentView", "bind(${1:options: BindingOptions}, ${2:source?: Object})"],
    ["_createPropertyChangeData(name: string, value: any): PropertyChangeData\tClass Layout", "_createPropertyChangeData(${1:name: string}, ${2:value: any})"],
    ["_resetValue(property: Property, source?: number): void\tClass Layout", "_resetValue(${1:property: Property}, ${2:source?: number})"],
    ["writeText(content: string, encoding?: string): Promise<any>\tClass File", "writeText(${1:content: string}, ${2:encoding?: string})"],
    ["_addArrayFromBuilder(name: string, value: Array<any>): void\tClass FormattedString", "_addArrayFromBuilder(${1:name: string}, ${2:value: Array<any>})"],
    ["bind(options: BindingOptions, source?: Object): any\tClass DockLayout", "bind(${1:options: BindingOptions}, ${2:source?: Object})"],
    ["bind(options: BindingOptions, source?: Object): any\tClass TimePicker", "bind(${1:options: BindingOptions}, ${2:source?: Object})"],
    ["_resetValue(property: Property, source?: number): void\tClass Style", "_resetValue(${1:property: Property}, ${2:source?: number})"],
    ["bind(options: BindingOptions, source?: Object): any\tClass ActionItem", "bind(${1:options: BindingOptions}, ${2:source?: Object})"],
    ["notifyPropertyChange(propertyName: string, newValue: any): void\tClass WebView", "notifyPropertyChange(${1:propertyName: string}, ${2:newValue: any})"],
    ["_createPropertyChangeData(name: string, value: any): PropertyChangeData\tClass Cache", "_createPropertyChangeData(${1:name: string}, ${2:value: any})"],
    ["_addToSuperview(superview: any, index?: number): boolean\tClass Page", "_addToSuperview(${1:superview: any}, ${2:index?: number})"],
    ["bind(options: BindingOptions, source?: Object): any\tClass ScrollView", "bind(${1:options: BindingOptions}, ${2:source?: Object})"],
    ["_updateTwoWayBinding(propertyName: string, value: any): any\tClass AbsoluteLayout", "_updateTwoWayBinding(${1:propertyName: string}, ${2:value: any})"],
    ["_createPropertyChangeData(name: string, value: any): PropertyChangeData\tClass Style", "_createPropertyChangeData(${1:name: string}, ${2:value: any})"],
    ["_resetValue(property: Property, source?: number): void\tClass Label", "_resetValue(${1:property: Property}, ${2:source?: number})"],
    ["bind(options: BindingOptions, source?: Object): any\tClass WrapLayout", "bind(${1:options: BindingOptions}, ${2:source?: Object})"],
    ["notifyPropertyChange(propertyName: string, newValue: any): void\tClass TabView", "notifyPropertyChange(${1:propertyName: string}, ${2:newValue: any})"],
    ["_createPropertyChangeData(name: string, value: any): PropertyChangeData\tClass Label", "_createPropertyChangeData(${1:name: string}, ${2:value: any})"],
    ["_addToSuperview(superview: any, index?: number): boolean\tClass View", "_addToSuperview(${1:superview: any}, ${2:index?: number})"],
    ["bind(options: BindingOptions, source?: Object): any\tClass GridLayout", "bind(${1:options: BindingOptions}, ${2:source?: Object})"],
    ["reduceRight<U>(callbackfn: function, initialValue: U): U\tClass ObservableArray<T>", "reduceRight<U>(${1:callbackfn: function}, ${2:initialValue: U})"],
    ["_onBindingContextChanged(oldValue: any, newValue: any): any\tClass AbsoluteLayout", "_onBindingContextChanged(${1:oldValue: any}, ${2:newValue: any})"],
    ["_createPropertyChangeData(name: string, value: any): PropertyChangeData\tClass Frame", "_createPropertyChangeData(${1:name: string}, ${2:value: any})"],
    ["bind(options: BindingOptions, source?: Object): any\tClass ListPicker", "bind(${1:options: BindingOptions}, ${2:source?: Object})"],
    ["_checkMetadataOnPropertyChanged(metadata: PropertyMetadata): any\tClass TextField", "_checkMetadataOnPropertyChanged(${1:metadata: PropertyMetadata})"],
    ["bind(options: BindingOptions, source?: Object): any\tClass DatePicker", "bind(${1:options: BindingOptions}, ${2:source?: Object})"],
    ["scrollToVerticalOffset(value: number, animated: boolean): any\tClass ScrollView", "scrollToVerticalOffset(${1:value: number}, ${2:animated: boolean})"],
    ["_checkMetadataOnPropertyChanged(metadata: PropertyMetadata): any\tClass ActionBar", "_checkMetadataOnPropertyChanged(${1:metadata: PropertyMetadata})"],
    ["_resetValue(property: Property, source?: number): void\tClass Style", "_resetValue(${1:property: Property}, ${2:source?: number})"],
    ["_resetValue(property: Property, source?: number): void\tClass Image", "_resetValue(${1:property: Property}, ${2:source?: number})"],
    ["_createPropertyChangeData(name: string, value: any): PropertyChangeData\tClass Style", "_createPropertyChangeData(${1:name: string}, ${2:value: any})"],
    ["_resetValue(property: Property, source?: number): void\tClass Frame", "_resetValue(${1:property: Property}, ${2:source?: number})"],
    ["_createPropertyChangeData(name: string, value: any): PropertyChangeData\tClass Image", "_createPropertyChangeData(${1:name: string}, ${2:value: any})"],
    ["_childIndexToNativeChildIndex(index?: number): number\tClass AbsoluteLayout", "_childIndexToNativeChildIndex(${1:index?: number})"],
    ["_checkMetadataOnPropertyChanged(metadata: PropertyMetadata): any\tClass SearchBar", "_checkMetadataOnPropertyChanged(${1:metadata: PropertyMetadata})"],
    ["bind(options: BindingOptions, source?: Object): any\tClass LayoutBase", "bind(${1:options: BindingOptions}, ${2:source?: Object})"],
    ["_checkMetadataOnPropertyChanged(metadata: PropertyMetadata): any\tClass HtmlView", "_checkMetadataOnPropertyChanged(${1:metadata: PropertyMetadata})"],
    ["_createPropertyChangeData(name: string, value: any): PropertyChangeData\tClass View", "_createPropertyChangeData(${1:name: string}, ${2:value: any})"],
    ["renameSync(newName: string, onError?: function): void\tClass Folder", "renameSync(${1:newName: string}, ${2:onError?: function})"],
    ["notifyPropertyChange(propertyName: string, newValue: any): void\tClass Button", "notifyPropertyChange(${1:propertyName: string}, ${2:newValue: any})"],
    ["_createPropertyChangeData(name: string, value: any): PropertyChangeData\tClass Span", "_createPropertyChangeData(${1:name: string}, ${2:value: any})"],
    ["_resetValue(property: Property, source?: number): void\tClass View", "_resetValue(${1:property: Property}, ${2:source?: number})"],
    ["_checkMetadataOnPropertyChanged(metadata: PropertyMetadata): any\tClass ListView", "_checkMetadataOnPropertyChanged(${1:metadata: PropertyMetadata})"],
    ["_checkMetadataOnPropertyChanged(metadata: PropertyMetadata): any\tClass Repeater", "_checkMetadataOnPropertyChanged(${1:metadata: PropertyMetadata})"],
    ["_checkMetadataOnPropertyChanged(metadata: PropertyMetadata): any\tClass Progress", "_checkMetadataOnPropertyChanged(${1:metadata: PropertyMetadata})"],
    ["getFile(path: string, onError?: function): object\tClass FileSystemAccess", "getFile(${1:path: string}, ${2:onError?: function})"],
    ["bind(options: BindingOptions, source?: Object): any\tClass SearchBar", "bind(${1:options: BindingOptions}, ${2:source?: Object})"],
    ["startMonitoring(connectionTypeChangedCallback: function): void\tModule connectivity", "startMonitoring(${1:connectionTypeChangedCallback: function})"],
    ["notifyPropertyChange(propertyName: string, newValue: any): void\tClass Slider", "notifyPropertyChange(${1:propertyName: string}, ${2:newValue: any})"],
    ["notifyPropertyChange(propertyName: string, newValue: any): void\tClass Switch", "notifyPropertyChange(${1:propertyName: string}, ${2:newValue: any})"],
    ["_createPropertyChangeData(name: string, value: any): PropertyChangeData\tClass Page", "_createPropertyChangeData(${1:name: string}, ${2:value: any})"],
    ["_resetValue(property: Property, source?: number): void\tClass Span", "_resetValue(${1:property: Property}, ${2:source?: number})"],
    ["_checkMetadataOnPropertyChanged(metadata: PropertyMetadata): any\tClass TextBase", "_checkMetadataOnPropertyChanged(${1:metadata: PropertyMetadata})"],
    ["notifyPropertyChange(propertyName: string, newValue: any): void\tClass Border", "notifyPropertyChange(${1:propertyName: string}, ${2:newValue: any})"],
    ["bind(options: BindingOptions, source?: Object): any\tClass ActionBar", "bind(${1:options: BindingOptions}, ${2:source?: Object})"],
    ["_checkMetadataOnPropertyChanged(metadata: PropertyMetadata): any\tClass TextView", "_checkMetadataOnPropertyChanged(${1:metadata: PropertyMetadata})"],
    ["bind(options: BindingOptions, source?: Object): any\tClass TextField", "bind(${1:options: BindingOptions}, ${2:source?: Object})"],
    ["_resetValue(property: Property, source?: number): void\tClass Page", "_resetValue(${1:property: Property}, ${2:source?: number})"],
    ["notifyPropertyChange(propertyName: string, newValue: any): void\tClass Layout", "notifyPropertyChange(${1:propertyName: string}, ${2:newValue: any})"],
    ["_childIndexToNativeChildIndex(index?: number): number\tClass SegmentedBar", "_childIndexToNativeChildIndex(${1:index?: number})"],
    ["getEntitiesSync(onError?: function): Promise<Array<FileSystemEntity>>\tClass Folder", "getEntitiesSync(${1:onError?: function})"],
    ["notifyPropertyChange(propertyName: string, newValue: any): void\tClass Frame", "notifyPropertyChange(${1:propertyName: string}, ${2:newValue: any})"],
    ["notifyPropertyChange(propertyName: string, newValue: any): void\tClass Cache", "notifyPropertyChange(${1:propertyName: string}, ${2:newValue: any})"],
    ["notifyPropertyChange(propertyName: string, newValue: any): void\tClass Image", "notifyPropertyChange(${1:propertyName: string}, ${2:newValue: any})"],
    ["_updateTwoWayBinding(propertyName: string, value: any): any\tClass SegmentedBar", "_updateTwoWayBinding(${1:propertyName: string}, ${2:value: any})"],
    ["isUniversal(sel: SimpleSelector): boolean\tModule ui/styling/css-selector-parser", "isUniversal(${1:sel: SimpleSelector})"],
    ["bind(options: BindingOptions, source?: Object): any\tClass TextView", "bind(${1:options: BindingOptions}, ${2:source?: Object})"],
    ["notifyPropertyChange(propertyName: string, newValue: any): void\tClass Style", "notifyPropertyChange(${1:propertyName: string}, ${2:newValue: any})"],
    ["bind(options: BindingOptions, source?: Object): any\tClass Repeater", "bind(${1:options: BindingOptions}, ${2:source?: Object})"],
    ["_checkMetadataOnPropertyChanged(metadata: PropertyMetadata): any\tClass TabView", "_checkMetadataOnPropertyChanged(${1:metadata: PropertyMetadata})"],
    ["notifyPropertyChange(propertyName: string, newValue: any): void\tClass Label", "notifyPropertyChange(${1:propertyName: string}, ${2:newValue: any})"],
    ["getPropertyByCssName(name: string): Property\tModule ui/styling/style-property", "getPropertyByCssName(${1:name: string})"],
    ["bind(options: BindingOptions, source?: Object): any\tClass TextBase", "bind(${1:options: BindingOptions}, ${2:source?: Object})"],
    ["bind(options: BindingOptions, source?: Object): any\tClass ListView", "bind(${1:options: BindingOptions}, ${2:source?: Object})"],
    ["_onBindingContextChanged(oldValue: any, newValue: any): any\tClass SegmentedBar", "_onBindingContextChanged(${1:oldValue: any}, ${2:newValue: any})"],
    ["notifyPropertyChange(propertyName: string, newValue: any): void\tClass Style", "notifyPropertyChange(${1:propertyName: string}, ${2:newValue: any})"],
    ["bind(options: BindingOptions, source?: Object): any\tClass Bindable", "bind(${1:options: BindingOptions}, ${2:source?: Object})"],
    ["isAttribute(sel: SimpleSelector): boolean\tModule ui/styling/css-selector-parser", "isAttribute(${1:sel: SimpleSelector})"],
    ["_applyXmlAttribute(attribute: string, value: any): boolean\tClass ProxyViewContainer", "_applyXmlAttribute(${1:attribute: string}, ${2:value: any})"],
    ["bind(options: BindingOptions, source?: Object): any\tClass HtmlView", "bind(${1:options: BindingOptions}, ${2:source?: Object})"],
    ["bind(options: BindingOptions, source?: Object): any\tClass Progress", "bind(${1:options: BindingOptions}, ${2:source?: Object})"],
    ["_checkMetadataOnPropertyChanged(metadata: PropertyMetadata): any\tClass WebView", "_checkMetadataOnPropertyChanged(${1:metadata: PropertyMetadata})"],
    ["_onBindingContextChanged(oldValue: any, newValue: any): any\tClass ProxyObject", "_onBindingContextChanged(${1:oldValue: any}, ${2:newValue: any})"],
    ["_checkMetadataOnPropertyChanged(metadata: PropertyMetadata): any\tClass Switch", "_checkMetadataOnPropertyChanged(${1:metadata: PropertyMetadata})"],
    ["_onBindingContextChanged(oldValue: any, newValue: any): any\tClass StackLayout", "_onBindingContextChanged(${1:oldValue: any}, ${2:newValue: any})"],
    ["renameSync(newName: string, onError?: function): void\tClass File", "renameSync(${1:newName: string}, ${2:onError?: function})"],
    ["getKeyframeAnimationWithName(animationName: string): KeyframeAnimationInfo\tClass Page", "getKeyframeAnimationWithName(${1:animationName: string})"],
    ["bind(options: BindingOptions, source?: Object): any\tClass TabView", "bind(${1:options: BindingOptions}, ${2:source?: Object})"],
    ["_updateTwoWayBinding(propertyName: string, value: any): any\tClass Placeholder", "_updateTwoWayBinding(${1:propertyName: string}, ${2:value: any})"],
    ["_updateTwoWayBinding(propertyName: string, value: any): any\tClass ContentView", "_updateTwoWayBinding(${1:propertyName: string}, ${2:value: any})"],
    ["notifyPropertyChange(propertyName: string, newValue: any): void\tClass Page", "notifyPropertyChange(${1:propertyName: string}, ${2:newValue: any})"],
    ["_updateTwoWayBinding(propertyName: string, value: any): any\tClass TabViewItem", "_updateTwoWayBinding(${1:propertyName: string}, ${2:value: any})"],
    ["_updateTwoWayBinding(propertyName: string, value: any): any\tClass StackLayout", "_updateTwoWayBinding(${1:propertyName: string}, ${2:value: any})"],
    ["_checkMetadataOnPropertyChanged(metadata: PropertyMetadata): any\tClass Button", "_checkMetadataOnPropertyChanged(${1:metadata: PropertyMetadata})"],
    ["_checkMetadataOnPropertyChanged(metadata: PropertyMetadata): any\tClass Layout", "_checkMetadataOnPropertyChanged(${1:metadata: PropertyMetadata})"],
    ["bind(options: BindingOptions, source?: Object): any\tClass WebView", "bind(${1:options: BindingOptions}, ${2:source?: Object})"],
    ["notifyPropertyChange(propertyName: string, newValue: any): void\tClass Span", "notifyPropertyChange(${1:propertyName: string}, ${2:newValue: any})"],
    ["_updateTwoWayBinding(propertyName: string, value: any): any\tClass ProxyObject", "_updateTwoWayBinding(${1:propertyName: string}, ${2:value: any})"],
    ["_onBindingContextChanged(oldValue: any, newValue: any): any\tClass Placeholder", "_onBindingContextChanged(${1:oldValue: any}, ${2:newValue: any})"],
    ["_onBindingContextChanged(oldValue: any, newValue: any): any\tClass ContentView", "_onBindingContextChanged(${1:oldValue: any}, ${2:newValue: any})"],
    ["_childIndexToNativeChildIndex(index?: number): number\tClass StackLayout", "_childIndexToNativeChildIndex(${1:index?: number})"],
    ["_childIndexToNativeChildIndex(index?: number): number\tClass Placeholder", "_childIndexToNativeChildIndex(${1:index?: number})"],
    ["_onBindingContextChanged(oldValue: any, newValue: any): any\tClass TabViewItem", "_onBindingContextChanged(${1:oldValue: any}, ${2:newValue: any})"],
    ["_checkMetadataOnPropertyChanged(metadata: PropertyMetadata): any\tClass Border", "_checkMetadataOnPropertyChanged(${1:metadata: PropertyMetadata})"],
    ["onDestroy(fragment: any, superFunc: Function): void\tInterface AndroidFragmentCallbacks", "onDestroy(${1:fragment: any}, ${2:superFunc: Function})"],
    ["_childIndexToNativeChildIndex(index?: number): number\tClass ContentView", "_childIndexToNativeChildIndex(${1:index?: number})"],
    ["load(fileName: string, exports?: any): View\tModule ui/builder", "load(${1:fileName: string}, ${2:exports?: any})"],
    ["_checkMetadataOnPropertyChanged(metadata: PropertyMetadata): any\tClass Slider", "_checkMetadataOnPropertyChanged(${1:metadata: PropertyMetadata})"],
    ["onDestroy(activity: any, superFunc: Function): void\tInterface AndroidActivityCallbacks", "onDestroy(${1:activity: any}, ${2:superFunc: Function})"],
    ["notifyPropertyChange(propertyName: string, newValue: any): void\tClass View", "notifyPropertyChange(${1:propertyName: string}, ${2:newValue: any})"],
    ["_applyXmlAttribute(attribute: string, value: any): boolean\tClass ActivityIndicator", "_applyXmlAttribute(${1:attribute: string}, ${2:value: any})"],
    ["_onBindingContextChanged(oldValue: any, newValue: any): any\tClass GridLayout", "_onBindingContextChanged(${1:oldValue: any}, ${2:newValue: any})"],
    ["_childIndexToNativeChildIndex(index?: number): number\tClass DockLayout", "_childIndexToNativeChildIndex(${1:index?: number})"],
    ["_checkMetadataOnPropertyChanged(metadata: PropertyMetadata): any\tClass Image", "_checkMetadataOnPropertyChanged(${1:metadata: PropertyMetadata})"],
    ["_onBindingContextChanged(oldValue: any, newValue: any): any\tClass DockLayout", "_onBindingContextChanged(${1:oldValue: any}, ${2:newValue: any})"],
    ["_onBindingContextChanged(oldValue: any, newValue: any): any\tClass ScrollView", "_onBindingContextChanged(${1:oldValue: any}, ${2:newValue: any})"],
    ["_onBindingContextChanged(oldValue: any, newValue: any): any\tClass ActionItem", "_onBindingContextChanged(${1:oldValue: any}, ${2:newValue: any})"],
    ["_onBindingContextChanged(oldValue: any, newValue: any): any\tClass DatePicker", "_onBindingContextChanged(${1:oldValue: any}, ${2:newValue: any})"],
    ["_applyXmlAttribute(attribute: string, value: any): boolean\tClass EditableTextBase", "_applyXmlAttribute(${1:attribute: string}, ${2:value: any})"],
    ["_updateTwoWayBinding(propertyName: string, value: any): any\tClass ScrollView", "_updateTwoWayBinding(${1:propertyName: string}, ${2:value: any})"],
    ["_updateTwoWayBinding(propertyName: string, value: any): any\tClass ListPicker", "_updateTwoWayBinding(${1:propertyName: string}, ${2:value: any})"],
    ["bind(options: BindingOptions, source?: Object): any\tClass Border", "bind(${1:options: BindingOptions}, ${2:source?: Object})"],
    ["bind(options: BindingOptions, source?: Object): any\tClass Layout", "bind(${1:options: BindingOptions}, ${2:source?: Object})"],
    ["_onBindingContextChanged(oldValue: any, newValue: any): any\tClass ListPicker", "_onBindingContextChanged(${1:oldValue: any}, ${2:newValue: any})"],
    ["_onBindingContextChanged(oldValue: any, newValue: any): any\tClass LayoutBase", "_onBindingContextChanged(${1:oldValue: any}, ${2:newValue: any})"],
    ["_updateTwoWayBinding(propertyName: string, value: any): any\tClass GridLayout", "_updateTwoWayBinding(${1:propertyName: string}, ${2:value: any})"],
    ["bind(options: BindingOptions, source?: Object): any\tClass Switch", "bind(${1:options: BindingOptions}, ${2:source?: Object})"],
    ["_onBindingContextChanged(oldValue: any, newValue: any): any\tClass TimePicker", "_onBindingContextChanged(${1:oldValue: any}, ${2:newValue: any})"],
    ["bind(options: BindingOptions, source?: Object): any\tClass Button", "bind(${1:options: BindingOptions}, ${2:source?: Object})"],
    ["_updateTwoWayBinding(propertyName: string, value: any): any\tClass TimePicker", "_updateTwoWayBinding(${1:propertyName: string}, ${2:value: any})"],
    ["_childIndexToNativeChildIndex(index?: number): number\tClass GridLayout", "_childIndexToNativeChildIndex(${1:index?: number})"],
    ["_applyXmlAttribute(attribute: string, value: any): boolean\tClass CustomLayoutView", "_applyXmlAttribute(${1:attribute: string}, ${2:value: any})"],
    ["bind(options: BindingOptions, source?: Object): any\tClass Slider", "bind(${1:options: BindingOptions}, ${2:source?: Object})"],
    ["_updateTwoWayBinding(propertyName: string, value: any): any\tClass DatePicker", "_updateTwoWayBinding(${1:propertyName: string}, ${2:value: any})"],
    ["_childIndexToNativeChildIndex(index?: number): number\tClass ListPicker", "_childIndexToNativeChildIndex(${1:index?: number})"],
    ["_childIndexToNativeChildIndex(index?: number): number\tClass LayoutBase", "_childIndexToNativeChildIndex(${1:index?: number})"],
    ["_checkMetadataOnPropertyChanged(metadata: PropertyMetadata): any\tClass Frame", "_checkMetadataOnPropertyChanged(${1:metadata: PropertyMetadata})"],
    ["_childIndexToNativeChildIndex(index?: number): number\tClass DatePicker", "_childIndexToNativeChildIndex(${1:index?: number})"],
    ["_updateTwoWayBinding(propertyName: string, value: any): any\tClass ActionItem", "_updateTwoWayBinding(${1:propertyName: string}, ${2:value: any})"],
    ["_updateTwoWayBinding(propertyName: string, value: any): any\tClass WrapLayout", "_updateTwoWayBinding(${1:propertyName: string}, ${2:value: any})"],
    ["_childIndexToNativeChildIndex(index?: number): number\tClass ScrollView", "_childIndexToNativeChildIndex(${1:index?: number})"],
    ["_checkMetadataOnPropertyChanged(metadata: PropertyMetadata): any\tClass Label", "_checkMetadataOnPropertyChanged(${1:metadata: PropertyMetadata})"],
    ["_childIndexToNativeChildIndex(index?: number): number\tClass TimePicker", "_childIndexToNativeChildIndex(${1:index?: number})"],
    ["_updateTwoWayBinding(propertyName: string, value: any): any\tClass DockLayout", "_updateTwoWayBinding(${1:propertyName: string}, ${2:value: any})"],
    ["_updateTwoWayBinding(propertyName: string, value: any): any\tClass LayoutBase", "_updateTwoWayBinding(${1:propertyName: string}, ${2:value: any})"],
    ["_childIndexToNativeChildIndex(index?: number): number\tClass WrapLayout", "_childIndexToNativeChildIndex(${1:index?: number})"],
    ["_onBindingContextChanged(oldValue: any, newValue: any): any\tClass WrapLayout", "_onBindingContextChanged(${1:oldValue: any}, ${2:newValue: any})"],
    ["_childIndexToNativeChildIndex(index?: number): number\tClass SearchBar", "_childIndexToNativeChildIndex(${1:index?: number})"],
    ["_onBindingContextChanged(oldValue: any, newValue: any): any\tClass ActionBar", "_onBindingContextChanged(${1:oldValue: any}, ${2:newValue: any})"],
    ["_onBindingContextChanged(oldValue: any, newValue: any): any\tClass SearchBar", "_onBindingContextChanged(${1:oldValue: any}, ${2:newValue: any})"],
    ["_updateTwoWayBinding(propertyName: string, value: any): any\tClass SearchBar", "_updateTwoWayBinding(${1:propertyName: string}, ${2:value: any})"],
    ["_updateTwoWayBinding(propertyName: string, value: any): any\tClass TextField", "_updateTwoWayBinding(${1:propertyName: string}, ${2:value: any})"],
    ["_checkMetadataOnPropertyChanged(metadata: PropertyMetadata): any\tClass View", "_checkMetadataOnPropertyChanged(${1:metadata: PropertyMetadata})"],
    ["_childIndexToNativeChildIndex(index?: number): number\tClass TextField", "_childIndexToNativeChildIndex(${1:index?: number})"],
    ["bind(options: BindingOptions, source?: Object): any\tClass Frame", "bind(${1:options: BindingOptions}, ${2:source?: Object})"],
    ["_checkMetadataOnPropertyChanged(metadata: PropertyMetadata): any\tClass Page", "_checkMetadataOnPropertyChanged(${1:metadata: PropertyMetadata})"],
    ["bind(options: BindingOptions, source?: Object): any\tClass Image", "bind(${1:options: BindingOptions}, ${2:source?: Object})"],
    ["_onBindingContextChanged(oldValue: any, newValue: any): any\tClass TextField", "_onBindingContextChanged(${1:oldValue: any}, ${2:newValue: any})"],
    ["bind(options: BindingOptions, source?: Object): any\tClass Label", "bind(${1:options: BindingOptions}, ${2:source?: Object})"],
    ["_childIndexToNativeChildIndex(index?: number): number\tClass ActionBar", "_childIndexToNativeChildIndex(${1:index?: number})"],
    ["_updateTwoWayBinding(propertyName: string, value: any): any\tClass ActionBar", "_updateTwoWayBinding(${1:propertyName: string}, ${2:value: any})"],
    ["_childIndexToNativeChildIndex(index?: number): number\tClass ListView", "_childIndexToNativeChildIndex(${1:index?: number})"],
    ["_onBindingContextChanged(oldValue: any, newValue: any): any\tClass TextBase", "_onBindingContextChanged(${1:oldValue: any}, ${2:newValue: any})"],
    ["bind(options: BindingOptions, source?: Object): any\tClass Span", "bind(${1:options: BindingOptions}, ${2:source?: Object})"],
    ["_childIndexToNativeChildIndex(index?: number): number\tClass TextView", "_childIndexToNativeChildIndex(${1:index?: number})"],
    ["_applyXmlAttribute(attribute: string, value: any): boolean\tClass AbsoluteLayout", "_applyXmlAttribute(${1:attribute: string}, ${2:value: any})"],
    ["_updateTwoWayBinding(propertyName: string, value: any): any\tClass Repeater", "_updateTwoWayBinding(${1:propertyName: string}, ${2:value: any})"],
    ["bind(options: BindingOptions, source?: Object): any\tClass View", "bind(${1:options: BindingOptions}, ${2:source?: Object})"],
    ["_childIndexToNativeChildIndex(index?: number): number\tClass HtmlView", "_childIndexToNativeChildIndex(${1:index?: number})"],
    ["_onBindingContextChanged(oldValue: any, newValue: any): any\tClass Bindable", "_onBindingContextChanged(${1:oldValue: any}, ${2:newValue: any})"],
    ["_updateTwoWayBinding(propertyName: string, value: any): any\tClass Progress", "_updateTwoWayBinding(${1:propertyName: string}, ${2:value: any})"],
    ["_onBindingContextChanged(oldValue: any, newValue: any): any\tClass ListView", "_onBindingContextChanged(${1:oldValue: any}, ${2:newValue: any})"],
    ["_updateTwoWayBinding(propertyName: string, value: any): any\tClass Bindable", "_updateTwoWayBinding(${1:propertyName: string}, ${2:value: any})"],
    ["_updateTwoWayBinding(propertyName: string, value: any): any\tClass ListView", "_updateTwoWayBinding(${1:propertyName: string}, ${2:value: any})"],
    ["_onBindingContextChanged(oldValue: any, newValue: any): any\tClass Repeater", "_onBindingContextChanged(${1:oldValue: any}, ${2:newValue: any})"],
    ["_updateTwoWayBinding(propertyName: string, value: any): any\tClass TextBase", "_updateTwoWayBinding(${1:propertyName: string}, ${2:value: any})"],
    ["_addArrayFromBuilder(name: string, value: Array<any>): void\tClass ActionBar", "_addArrayFromBuilder(${1:name: string}, ${2:value: Array<any>})"],
    ["_updateTwoWayBinding(propertyName: string, value: any): any\tClass HtmlView", "_updateTwoWayBinding(${1:propertyName: string}, ${2:value: any})"],
    ["bind(options: BindingOptions, source?: Object): any\tClass Page", "bind(${1:options: BindingOptions}, ${2:source?: Object})"],
    ["_onBindingContextChanged(oldValue: any, newValue: any): any\tClass HtmlView", "_onBindingContextChanged(${1:oldValue: any}, ${2:newValue: any})"],
    ["_addChildFromBuilder(name: string, value: any): void\tInterface AddChildFromBuilder", "_addChildFromBuilder(${1:name: string}, ${2:value: any})"],
    ["_childIndexToNativeChildIndex(index?: number): number\tClass Repeater", "_childIndexToNativeChildIndex(${1:index?: number})"],
    ["_updateTwoWayBinding(propertyName: string, value: any): any\tClass TextView", "_updateTwoWayBinding(${1:propertyName: string}, ${2:value: any})"],
    ["_childIndexToNativeChildIndex(index?: number): number\tClass TextBase", "_childIndexToNativeChildIndex(${1:index?: number})"],
    ["_onBindingContextChanged(oldValue: any, newValue: any): any\tClass TextView", "_onBindingContextChanged(${1:oldValue: any}, ${2:newValue: any})"],
    ["_onBindingContextChanged(oldValue: any, newValue: any): any\tClass Progress", "_onBindingContextChanged(${1:oldValue: any}, ${2:newValue: any})"],
    ["_childIndexToNativeChildIndex(index?: number): number\tClass Progress", "_childIndexToNativeChildIndex(${1:index?: number})"],
    ["_onBindingContextChanged(oldValue: any, newValue: any): any\tClass WebView", "_onBindingContextChanged(${1:oldValue: any}, ${2:newValue: any})"],
    ["_childIndexToNativeChildIndex(index?: number): number\tClass TabView", "_childIndexToNativeChildIndex(${1:index?: number})"],
    ["_updateTwoWayBinding(propertyName: string, value: any): any\tClass WebView", "_updateTwoWayBinding(${1:propertyName: string}, ${2:value: any})"],
    ["getDrawParams(width: number, height: number): BackgroundDrawParams\tClass Background", "getDrawParams(${1:width: number}, ${2:height: number})"],
    ["onStart(activity: any, superFunc: Function): void\tInterface AndroidActivityCallbacks", "onStart(${1:activity: any}, ${2:superFunc: Function})"],
    ["_setNativeViewFrame(nativeView: any, frame: any): void\tClass ProxyViewContainer", "_setNativeViewFrame(${1:nativeView: any}, ${2:frame: any})"],
    ["_onBindingContextChanged(oldValue: any, newValue: any): any\tClass TabView", "_onBindingContextChanged(${1:oldValue: any}, ${2:newValue: any})"],
    ["_updateTwoWayBinding(propertyName: string, value: any): any\tClass TabView", "_updateTwoWayBinding(${1:propertyName: string}, ${2:value: any})"],
    ["_childIndexToNativeChildIndex(index?: number): number\tClass WebView", "_childIndexToNativeChildIndex(${1:index?: number})"],
    ["_updateTwoWayBinding(propertyName: string, value: any): any\tClass Button", "_updateTwoWayBinding(${1:propertyName: string}, ${2:value: any})"],
    ["_childIndexToNativeChildIndex(index?: number): number\tClass Button", "_childIndexToNativeChildIndex(${1:index?: number})"],
    ["_onBindingContextChanged(oldValue: any, newValue: any): any\tClass Slider", "_onBindingContextChanged(${1:oldValue: any}, ${2:newValue: any})"],
    ["isPseudo(sel: SimpleSelector): boolean\tModule ui/styling/css-selector-parser", "isPseudo(${1:sel: SimpleSelector})"],
    ["_onBindingContextChanged(oldValue: any, newValue: any): any\tClass Button", "_onBindingContextChanged(${1:oldValue: any}, ${2:newValue: any})"],
    ["_onBindingContextChanged(oldValue: any, newValue: any): any\tClass Switch", "_onBindingContextChanged(${1:oldValue: any}, ${2:newValue: any})"],
    ["_updateTwoWayBinding(propertyName: string, value: any): any\tClass Switch", "_updateTwoWayBinding(${1:propertyName: string}, ${2:value: any})"],
    ["_updateTwoWayBinding(propertyName: string, value: any): any\tClass Layout", "_updateTwoWayBinding(${1:propertyName: string}, ${2:value: any})"],
    ["_childIndexToNativeChildIndex(index?: number): number\tClass Border", "_childIndexToNativeChildIndex(${1:index?: number})"],
    ["_onBindingContextChanged(oldValue: any, newValue: any): any\tClass Border", "_onBindingContextChanged(${1:oldValue: any}, ${2:newValue: any})"],
    ["_childIndexToNativeChildIndex(index?: number): number\tClass Switch", "_childIndexToNativeChildIndex(${1:index?: number})"],
    ["_childIndexToNativeChildIndex(index?: number): number\tClass Slider", "_childIndexToNativeChildIndex(${1:index?: number})"],
    ["_updateTwoWayBinding(propertyName: string, value: any): any\tClass Border", "_updateTwoWayBinding(${1:propertyName: string}, ${2:value: any})"],
    ["_onBindingContextChanged(oldValue: any, newValue: any): any\tClass Layout", "_onBindingContextChanged(${1:oldValue: any}, ${2:newValue: any})"],
    ["_childIndexToNativeChildIndex(index?: number): number\tClass Layout", "_childIndexToNativeChildIndex(${1:index?: number})"],
    ["getPropertyByName(name: string): Property\tModule ui/styling/style-property", "getPropertyByName(${1:name: string})"],
    ["_updateTwoWayBinding(propertyName: string, value: any): any\tClass Slider", "_updateTwoWayBinding(${1:propertyName: string}, ${2:value: any})"],
    ["_applyXmlAttribute(attribute: string, value: any): boolean\tClass SegmentedBar", "_applyXmlAttribute(${1:attribute: string}, ${2:value: any})"],
    ["registerNoStylingClass(className: any): any\tModule ui/styling/style", "registerNoStylingClass(${1:className: any})"],
    ["_setNativeViewFrame(nativeView: any, frame: any): void\tClass ActivityIndicator", "_setNativeViewFrame(${1:nativeView: any}, ${2:frame: any})"],
    ["_addView(view: View, atIndex?: number): any\tClass ProxyViewContainer", "_addView(${1:view: View}, ${2:atIndex?: number})"],
    ["_updateTwoWayBinding(propertyName: string, value: any): any\tClass Label", "_updateTwoWayBinding(${1:propertyName: string}, ${2:value: any})"],
    ["_applyXmlAttribute(attribute: string, value: any): boolean\tClass ContentView", "_applyXmlAttribute(${1:attribute: string}, ${2:value: any})"],
    ["_updateTwoWayBinding(propertyName: string, value: any): any\tClass Image", "_updateTwoWayBinding(${1:propertyName: string}, ${2:value: any})"],
    ["_onBindingContextChanged(oldValue: any, newValue: any): any\tClass Label", "_onBindingContextChanged(${1:oldValue: any}, ${2:newValue: any})"],
    ["_childIndexToNativeChildIndex(index?: number): number\tClass Label", "_childIndexToNativeChildIndex(${1:index?: number})"],
    ["_applyXmlAttribute(attribute: string, value: any): boolean\tClass StackLayout", "_applyXmlAttribute(${1:attribute: string}, ${2:value: any})"],
    ["_unregisterAnimation(animation: KeyframeAnimation): any\tClass ProxyViewContainer", "_unregisterAnimation(${1:animation: KeyframeAnimation})"],
    ["_setNativeViewFrame(nativeView: any, frame: any): void\tClass EditableTextBase", "_setNativeViewFrame(${1:nativeView: any}, ${2:frame: any})"],
    ["_setNativeViewFrame(nativeView: any, frame: any): void\tClass CustomLayoutView", "_setNativeViewFrame(${1:nativeView: any}, ${2:frame: any})"],
    ["onStop(activity: any, superFunc: Function): void\tInterface AndroidActivityCallbacks", "onStop(${1:activity: any}, ${2:superFunc: Function})"],
    ["_applyXmlAttribute(attribute: string, value: any): boolean\tClass Placeholder", "_applyXmlAttribute(${1:attribute: string}, ${2:value: any})"],
    ["_addView(view: View, atIndex?: number): any\tClass ActivityIndicator", "_addView(${1:view: View}, ${2:atIndex?: number})"],
    ["_onColumnRemoved(itemSpec: ItemSpec, index: number): void\tClass GridLayout", "_onColumnRemoved(${1:itemSpec: ItemSpec}, ${2:index: number})"],
    ["_onBindingContextChanged(oldValue: any, newValue: any): any\tClass Image", "_onBindingContextChanged(${1:oldValue: any}, ${2:newValue: any})"],
    ["_onBindingContextChanged(oldValue: any, newValue: any): any\tClass Frame", "_onBindingContextChanged(${1:oldValue: any}, ${2:newValue: any})"],
    ["_childIndexToNativeChildIndex(index?: number): number\tClass Image", "_childIndexToNativeChildIndex(${1:index?: number})"],
    ["_childIndexToNativeChildIndex(index?: number): number\tClass Frame", "_childIndexToNativeChildIndex(${1:index?: number})"],
    ["_updateTwoWayBinding(propertyName: string, value: any): any\tClass Frame", "_updateTwoWayBinding(${1:propertyName: string}, ${2:value: any})"],
    ["_addView(view: View, atIndex?: number): any\tClass CustomLayoutView", "_addView(${1:view: View}, ${2:atIndex?: number})"],
    ["_applyXmlAttribute(attribute: string, value: any): boolean\tClass ScrollView", "_applyXmlAttribute(${1:attribute: string}, ${2:value: any})"],
    ["_childIndexToNativeChildIndex(index?: number): number\tClass View", "_childIndexToNativeChildIndex(${1:index?: number})"],
    ["reduce<U>(callbackfn: function, initialValue: U): U\tClass ObservableArray<T>", "reduce<U>(${1:callbackfn: function}, ${2:initialValue: U})"],
    ["_applyXmlAttribute(attribute: string, value: any): boolean\tClass LayoutBase", "_applyXmlAttribute(${1:attribute: string}, ${2:value: any})"],
    ["_childIndexToNativeChildIndex(index?: number): number\tClass Page", "_childIndexToNativeChildIndex(${1:index?: number})"],
    ["_onBindingContextChanged(oldValue: any, newValue: any): any\tClass View", "_onBindingContextChanged(${1:oldValue: any}, ${2:newValue: any})"],
    ["_addView(view: View, atIndex?: number): any\tClass EditableTextBase", "_addView(${1:view: View}, ${2:atIndex?: number})"],
    ["_applyXmlAttribute(attribute: string, value: any): boolean\tClass WrapLayout", "_applyXmlAttribute(${1:attribute: string}, ${2:value: any})"],
    ["_applyXmlAttribute(attribute: string, value: any): boolean\tClass DatePicker", "_applyXmlAttribute(${1:attribute: string}, ${2:value: any})"],
    ["isClass(sel: SimpleSelector): boolean\tModule ui/styling/css-selector-parser", "isClass(${1:sel: SimpleSelector})"],
    ["_applyXmlAttribute(attribute: string, value: any): boolean\tClass DockLayout", "_applyXmlAttribute(${1:attribute: string}, ${2:value: any})"],
    ["_updateTwoWayBinding(propertyName: string, value: any): any\tClass Page", "_updateTwoWayBinding(${1:propertyName: string}, ${2:value: any})"],
    ["_applyXmlAttribute(attribute: string, value: any): boolean\tClass ListPicker", "_applyXmlAttribute(${1:attribute: string}, ${2:value: any})"],
    ["read(path: string, onError?: function): any\tClass FileSystemAccess", "read(${1:path: string}, ${2:onError?: function})"],
    ["_onBindingContextChanged(oldValue: any, newValue: any): any\tClass Page", "_onBindingContextChanged(${1:oldValue: any}, ${2:newValue: any})"],
    ["unregisterBroadcastReceiver(intentFilter: string): void\tClass AndroidApplication", "unregisterBroadcastReceiver(${1:intentFilter: string})"],
    ["_onBindingContextChanged(oldValue: any, newValue: any): any\tClass Span", "_onBindingContextChanged(${1:oldValue: any}, ${2:newValue: any})"],
    ["_applyXmlAttribute(attribute: string, value: any): boolean\tClass GridLayout", "_applyXmlAttribute(${1:attribute: string}, ${2:value: any})"],
    ["_unregisterAnimation(animation: KeyframeAnimation): any\tClass ActivityIndicator", "_unregisterAnimation(${1:animation: KeyframeAnimation})"],
    ["_applyXmlAttribute(attribute: string, value: any): boolean\tClass TimePicker", "_applyXmlAttribute(${1:attribute: string}, ${2:value: any})"],
    ["_updateTwoWayBinding(propertyName: string, value: any): any\tClass Span", "_updateTwoWayBinding(${1:propertyName: string}, ${2:value: any})"],
    ["_updateTwoWayBinding(propertyName: string, value: any): any\tClass View", "_updateTwoWayBinding(${1:propertyName: string}, ${2:value: any})"],
    ["parse(selector: string): SimpleSelector[]\tModule ui/styling/css-selector-parser", "parse(${1:selector: string})"],
    ["takePicture(options?: CameraOptions): Promise<ImageSource>\tModule camera", "takePicture(${1:options?: CameraOptions})"],
    ["writeSync(content: any, onError?: function): void\tClass File", "writeSync(${1:content: any}, ${2:onError?: function})"],
    ["_unregisterAnimation(animation: KeyframeAnimation): any\tClass EditableTextBase", "_unregisterAnimation(${1:animation: KeyframeAnimation})"],
    ["getGestureObservers(type: GestureTypes): Array<GesturesObserver>\tClass ProxyViewContainer", "getGestureObservers(${1:type: GestureTypes})"],
    ["_applyXmlAttribute(attribute: string, value: any): boolean\tClass TextField", "_applyXmlAttribute(${1:attribute: string}, ${2:value: any})"],
    ["_applyXmlAttribute(attribute: string, value: any): boolean\tClass SearchBar", "_applyXmlAttribute(${1:attribute: string}, ${2:value: any})"],
    ["_setNativeViewFrame(nativeView: any, frame: any): void\tClass AbsoluteLayout", "_setNativeViewFrame(${1:nativeView: any}, ${2:frame: any})"],
    ["fromAstNodes(astRules: Node[]): RuleSet[]\tModule ui/styling/css-selector", "fromAstNodes(${1:astRules: Node[]})"],
    ["_unregisterAnimation(animation: KeyframeAnimation): any\tClass CustomLayoutView", "_unregisterAnimation(${1:animation: KeyframeAnimation})"],
    ["eachProperty(callback: function): any\tModule ui/styling/style-property", "eachProperty(${1:callback: function})"],
    ["_applyXmlAttribute(attribute: string, value: any): boolean\tClass ActionBar", "_applyXmlAttribute(${1:attribute: string}, ${2:value: any})"],
    ["getGestureObservers(type: GestureTypes): Array<GesturesObserver>\tClass ActivityIndicator", "getGestureObservers(${1:type: GestureTypes})"],
    ["_applyXmlAttribute(attribute: string, value: any): boolean\tClass ListView", "_applyXmlAttribute(${1:attribute: string}, ${2:value: any})"],
    ["isType(sel: SimpleSelector): boolean\tModule ui/styling/css-selector-parser", "isType(${1:sel: SimpleSelector})"],
    ["_applyXmlAttribute(attribute: string, value: any): boolean\tClass HtmlView", "_applyXmlAttribute(${1:attribute: string}, ${2:value: any})"],
    ["_addView(view: View, atIndex?: number): any\tClass AbsoluteLayout", "_addView(${1:view: View}, ${2:atIndex?: number})"],
    ["_applyXmlAttribute(attribute: string, value: any): boolean\tClass Repeater", "_applyXmlAttribute(${1:attribute: string}, ${2:value: any})"],
    ["_applyXmlAttribute(attribute: string, value: any): boolean\tClass Progress", "_applyXmlAttribute(${1:attribute: string}, ${2:value: any})"],
    ["getViewById(view: View, id: string): View\tModule ui/core/view", "getViewById(${1:view: View}, ${2:id: string})"],
    ["_applyXmlAttribute(attribute: string, value: any): boolean\tClass TextBase", "_applyXmlAttribute(${1:attribute: string}, ${2:value: any})"],
    ["_applyXmlAttribute(attribute: string, value: any): boolean\tClass TextView", "_applyXmlAttribute(${1:attribute: string}, ${2:value: any})"],
    ["_addChildFromBuilder(name: string, value: any): void\tClass EditableTextBase", "_addChildFromBuilder(${1:name: string}, ${2:value: any})"],
    ["_applyXmlAttribute(attribute: string, value: any): boolean\tClass WebView", "_applyXmlAttribute(${1:attribute: string}, ${2:value: any})"],
    ["getGestureObservers(type: GestureTypes): Array<GesturesObserver>\tClass EditableTextBase", "getGestureObservers(${1:type: GestureTypes})"],
    ["getGestureObservers(type: GestureTypes): Array<GesturesObserver>\tClass CustomLayoutView", "getGestureObservers(${1:type: GestureTypes})"],
    ["_registerAnimation(animation: KeyframeAnimation): any\tClass ProxyViewContainer", "_registerAnimation(${1:animation: KeyframeAnimation})"],
    ["_unregisterAnimation(animation: KeyframeAnimation): any\tClass AbsoluteLayout", "_unregisterAnimation(${1:animation: KeyframeAnimation})"],
    ["_applyXmlAttribute(attribute: string, value: any): boolean\tClass TabView", "_applyXmlAttribute(${1:attribute: string}, ${2:value: any})"],
    ["createAnimation(options: AnimationDefinition): Animation\tClass ProxyViewContainer", "createAnimation(${1:options: AnimationDefinition})"],
    ["_setNativeViewFrame(nativeView: any, frame: any): void\tClass SegmentedBar", "_setNativeViewFrame(${1:nativeView: any}, ${2:frame: any})"],
    ["updateSpansBindingContext(newBindingContext: any): void\tClass FormattedString", "updateSpansBindingContext(${1:newBindingContext: any})"],
    ["_applyXmlAttribute(attribute: string, value: any): boolean\tClass Switch", "_applyXmlAttribute(${1:attribute: string}, ${2:value: any})"],
    ["_addChildFromBuilder(name: string, value: any): void\tClass FormattedString", "_addChildFromBuilder(${1:name: string}, ${2:value: any})"],
    ["_setNativeViewFrame(nativeView: any, frame: any): void\tClass ContentView", "_setNativeViewFrame(${1:nativeView: any}, ${2:frame: any})"],
    ["_registerAnimation(animation: KeyframeAnimation): any\tClass ActivityIndicator", "_registerAnimation(${1:animation: KeyframeAnimation})"],
    ["_applyXmlAttribute(attribute: string, value: any): boolean\tClass Slider", "_applyXmlAttribute(${1:attribute: string}, ${2:value: any})"],
    ["_setNativeViewFrame(nativeView: any, frame: any): void\tClass StackLayout", "_setNativeViewFrame(${1:nativeView: any}, ${2:frame: any})"],
    ["_setNativeViewFrame(nativeView: any, frame: any): void\tClass Placeholder", "_setNativeViewFrame(${1:nativeView: any}, ${2:frame: any})"],
    ["_applyXmlAttribute(attribute: string, value: any): boolean\tClass Border", "_applyXmlAttribute(${1:attribute: string}, ${2:value: any})"],
    ["_addView(view: View, atIndex?: number): any\tClass SegmentedBar", "_addView(${1:view: View}, ${2:atIndex?: number})"],
    ["createAnimation(options: AnimationDefinition): Animation\tClass ActivityIndicator", "createAnimation(${1:options: AnimationDefinition})"],
    ["_onTextPropertyChanged(data: PropertyChangeData): void\tClass EditableTextBase", "_onTextPropertyChanged(${1:data: PropertyChangeData})"],
    ["_applyXmlAttribute(attribute: string, value: any): boolean\tClass Layout", "_applyXmlAttribute(${1:attribute: string}, ${2:value: any})"],
    ["_applyXmlAttribute(attribute: string, value: any): boolean\tClass Button", "_applyXmlAttribute(${1:attribute: string}, ${2:value: any})"],
    ["createAnimation(options: AnimationDefinition): Animation\tClass CustomLayoutView", "createAnimation(${1:options: AnimationDefinition})"],
    ["_addView(view: View, atIndex?: number): any\tClass Placeholder", "_addView(${1:view: View}, ${2:atIndex?: number})"],
    ["_addView(view: View, atIndex?: number): any\tClass ContentView", "_addView(${1:view: View}, ${2:atIndex?: number})"],
    ["_registerAnimation(animation: KeyframeAnimation): any\tClass EditableTextBase", "_registerAnimation(${1:animation: KeyframeAnimation})"],
    ["_setNativeViewFrame(nativeView: any, frame: any): void\tClass DatePicker", "_setNativeViewFrame(${1:nativeView: any}, ${2:frame: any})"],
    ["_setNativeViewFrame(nativeView: any, frame: any): void\tClass DockLayout", "_setNativeViewFrame(${1:nativeView: any}, ${2:frame: any})"],
    ["_applyXmlAttribute(attribute: string, value: any): boolean\tClass Image", "_applyXmlAttribute(${1:attribute: string}, ${2:value: any})"],
    ["_onRowRemoved(itemSpec: ItemSpec, index: number): void\tClass GridLayout", "_onRowRemoved(${1:itemSpec: ItemSpec}, ${2:index: number})"],
    ["_setNativeViewFrame(nativeView: any, frame: any): void\tClass ListPicker", "_setNativeViewFrame(${1:nativeView: any}, ${2:frame: any})"],
    ["_setNativeViewFrame(nativeView: any, frame: any): void\tClass ScrollView", "_setNativeViewFrame(${1:nativeView: any}, ${2:frame: any})"],
    ["_setNativeViewFrame(nativeView: any, frame: any): void\tClass GridLayout", "_setNativeViewFrame(${1:nativeView: any}, ${2:frame: any})"],
    ["getGestureObservers(type: GestureTypes): Array<GesturesObserver>\tClass AbsoluteLayout", "getGestureObservers(${1:type: GestureTypes})"],
    ["_addView(view: View, atIndex?: number): any\tClass StackLayout", "_addView(${1:view: View}, ${2:atIndex?: number})"],
    ["_applyXmlAttribute(attribute: string, value: any): boolean\tClass Label", "_applyXmlAttribute(${1:attribute: string}, ${2:value: any})"],
    ["_setNavBarColor(navBar: any, color: any): any\tModule ui/action-bar", "_setNavBarColor(${1:navBar: any}, ${2:color: any})"],
    ["_setNativeViewFrame(nativeView: any, frame: any): void\tClass LayoutBase", "_setNativeViewFrame(${1:nativeView: any}, ${2:frame: any})"],
    ["_applyXmlAttribute(attribute: string, value: any): boolean\tClass Frame", "_applyXmlAttribute(${1:attribute: string}, ${2:value: any})"],
    ["_setNativeViewFrame(nativeView: any, frame: any): void\tClass WrapLayout", "_setNativeViewFrame(${1:nativeView: any}, ${2:frame: any})"],
    ["createAnimation(options: AnimationDefinition): Animation\tClass EditableTextBase", "createAnimation(${1:options: AnimationDefinition})"],
    ["_unregisterAnimation(animation: KeyframeAnimation): any\tClass SegmentedBar", "_unregisterAnimation(${1:animation: KeyframeAnimation})"],
    ["_setNativeViewFrame(nativeView: any, frame: any): void\tClass TimePicker", "_setNativeViewFrame(${1:nativeView: any}, ${2:frame: any})"],
    ["_registerAnimation(animation: KeyframeAnimation): any\tClass CustomLayoutView", "_registerAnimation(${1:animation: KeyframeAnimation})"],
    ["isId(sel: SimpleSelector): boolean\tModule ui/styling/css-selector-parser", "isId(${1:sel: SimpleSelector})"],
    ["_addView(view: View, atIndex?: number): any\tClass DatePicker", "_addView(${1:view: View}, ${2:atIndex?: number})"],
    ["_unregisterAnimation(animation: KeyframeAnimation): any\tClass ContentView", "_unregisterAnimation(${1:animation: KeyframeAnimation})"],
    ["_unregisterAnimation(animation: KeyframeAnimation): any\tClass Placeholder", "_unregisterAnimation(${1:animation: KeyframeAnimation})"],
    ["_addView(view: View, atIndex?: number): any\tClass DockLayout", "_addView(${1:view: View}, ${2:atIndex?: number})"],
    ["_addView(view: View, atIndex?: number): any\tClass TimePicker", "_addView(${1:view: View}, ${2:atIndex?: number})"],
    ["_addView(view: View, atIndex?: number): any\tClass WrapLayout", "_addView(${1:view: View}, ${2:atIndex?: number})"],
    ["_unregisterAnimation(animation: KeyframeAnimation): any\tClass StackLayout", "_unregisterAnimation(${1:animation: KeyframeAnimation})"],
    ["_applyXmlAttribute(attribute: string, value: any): boolean\tClass Page", "_applyXmlAttribute(${1:attribute: string}, ${2:value: any})"],
    ["_setNativeViewFrame(nativeView: any, frame: any): void\tClass ActionBar", "_setNativeViewFrame(${1:nativeView: any}, ${2:frame: any})"],
    ["_setNativeViewFrame(nativeView: any, frame: any): void\tClass SearchBar", "_setNativeViewFrame(${1:nativeView: any}, ${2:frame: any})"],
    ["_setNativeViewFrame(nativeView: any, frame: any): void\tClass TextField", "_setNativeViewFrame(${1:nativeView: any}, ${2:frame: any})"],
    ["_addView(view: View, atIndex?: number): any\tClass ListPicker", "_addView(${1:view: View}, ${2:atIndex?: number})"],
    ["equals(value1: Background, value2: Background): boolean\tClass Background", "equals(${1:value1: Background}, ${2:value2: Background})"],
    ["_addView(view: View, atIndex?: number): any\tClass LayoutBase", "_addView(${1:view: View}, ${2:atIndex?: number})"],
    ["_applyXmlAttribute(attribute: string, value: any): boolean\tClass View", "_applyXmlAttribute(${1:attribute: string}, ${2:value: any})"],
    ["_addView(view: View, atIndex?: number): any\tClass ScrollView", "_addView(${1:view: View}, ${2:atIndex?: number})"],
    ["resolvePageFromEntry(entry: NavigationEntry): Page\tModule ui/frame", "resolvePageFromEntry(${1:entry: NavigationEntry})"],
    ["_addView(view: View, atIndex?: number): any\tClass GridLayout", "_addView(${1:view: View}, ${2:atIndex?: number})"],
    ["_unregisterAnimation(animation: KeyframeAnimation): any\tClass TimePicker", "_unregisterAnimation(${1:animation: KeyframeAnimation})"],
    ["_onContentChanged(oldView: View, newView: View): any\tClass ContentView", "_onContentChanged(${1:oldView: View}, ${2:newView: View})"],
    ["_addView(view: View, atIndex?: number): any\tClass ActionBar", "_addView(${1:view: View}, ${2:atIndex?: number})"],
    ["_unregisterAnimation(animation: KeyframeAnimation): any\tClass WrapLayout", "_unregisterAnimation(${1:animation: KeyframeAnimation})"],
    ["_setNativeViewFrame(nativeView: any, frame: any): void\tClass TextView", "_setNativeViewFrame(${1:nativeView: any}, ${2:frame: any})"],
    ["_setNativeViewFrame(nativeView: any, frame: any): void\tClass Progress", "_setNativeViewFrame(${1:nativeView: any}, ${2:frame: any})"],
    ["_registerAnimation(animation: KeyframeAnimation): any\tClass AbsoluteLayout", "_registerAnimation(${1:animation: KeyframeAnimation})"],
    ["setLayerType(layerType: number, paint: any): void\tInterface CacheLayerType", "setLayerType(${1:layerType: number}, ${2:paint: any})"],
    ["_setNativeViewFrame(nativeView: any, frame: any): void\tClass HtmlView", "_setNativeViewFrame(${1:nativeView: any}, ${2:frame: any})"],
    ["_addView(view: View, atIndex?: number): any\tClass SearchBar", "_addView(${1:view: View}, ${2:atIndex?: number})"],
    ["getGestureObservers(type: GestureTypes): Array<GesturesObserver>\tClass SegmentedBar", "getGestureObservers(${1:type: GestureTypes})"],
    ["_unregisterAnimation(animation: KeyframeAnimation): any\tClass LayoutBase", "_unregisterAnimation(${1:animation: KeyframeAnimation})"],
    ["_unregisterAnimation(animation: KeyframeAnimation): any\tClass ScrollView", "_unregisterAnimation(${1:animation: KeyframeAnimation})"],
    ["_unregisterAnimation(animation: KeyframeAnimation): any\tClass DatePicker", "_unregisterAnimation(${1:animation: KeyframeAnimation})"],
    ["_addChildFromBuilder(name: string, value: any): void\tClass SegmentedBar", "_addChildFromBuilder(${1:name: string}, ${2:value: any})"],
    ["_setNativeViewFrame(nativeView: any, frame: any): void\tClass ListView", "_setNativeViewFrame(${1:nativeView: any}, ${2:frame: any})"],
    ["_addView(view: View, atIndex?: number): any\tClass TextField", "_addView(${1:view: View}, ${2:atIndex?: number})"],
    ["_unregisterAnimation(animation: KeyframeAnimation): any\tClass ListPicker", "_unregisterAnimation(${1:animation: KeyframeAnimation})"],
    ["_unregisterAnimation(animation: KeyframeAnimation): any\tClass GridLayout", "_unregisterAnimation(${1:animation: KeyframeAnimation})"],
    ["createAnimation(options: AnimationDefinition): Animation\tClass AbsoluteLayout", "createAnimation(${1:options: AnimationDefinition})"],
    ["_unregisterAnimation(animation: KeyframeAnimation): any\tClass DockLayout", "_unregisterAnimation(${1:animation: KeyframeAnimation})"],
    ["_setNativeViewFrame(nativeView: any, frame: any): void\tClass TextBase", "_setNativeViewFrame(${1:nativeView: any}, ${2:frame: any})"],
    ["_setNativeViewFrame(nativeView: any, frame: any): void\tClass Repeater", "_setNativeViewFrame(${1:nativeView: any}, ${2:frame: any})"],
    ["_addView(view: View, atIndex?: number): any\tClass TextView", "_addView(${1:view: View}, ${2:atIndex?: number})"],
    ["_setNativeViewFrame(nativeView: any, frame: any): void\tClass WebView", "_setNativeViewFrame(${1:nativeView: any}, ${2:frame: any})"],
    ["_addView(view: View, atIndex?: number): any\tClass TextBase", "_addView(${1:view: View}, ${2:atIndex?: number})"],
    ["_unregisterAnimation(animation: KeyframeAnimation): any\tClass TextField", "_unregisterAnimation(${1:animation: KeyframeAnimation})"],
    ["_unregisterAnimation(animation: KeyframeAnimation): any\tClass ActionBar", "_unregisterAnimation(${1:animation: KeyframeAnimation})"],
    ["_addView(view: View, atIndex?: number): any\tClass Repeater", "_addView(${1:view: View}, ${2:atIndex?: number})"],
    ["_unregisterAnimation(animation: KeyframeAnimation): any\tClass SearchBar", "_unregisterAnimation(${1:animation: KeyframeAnimation})"],
    ["_setNativeViewFrame(nativeView: any, frame: any): void\tClass TabView", "_setNativeViewFrame(${1:nativeView: any}, ${2:frame: any})"],
    ["getGestureObservers(type: GestureTypes): Array<GesturesObserver>\tClass ContentView", "getGestureObservers(${1:type: GestureTypes})"],
    ["getGestureObservers(type: GestureTypes): Array<GesturesObserver>\tClass StackLayout", "getGestureObservers(${1:type: GestureTypes})"],
    ["_onContentChanged(oldView: View, newView: View): any\tClass ScrollView", "_onContentChanged(${1:oldView: View}, ${2:newView: View})"],
    ["_addChildFromBuilder(name: string, value: any): void\tClass ContentView", "_addChildFromBuilder(${1:name: string}, ${2:value: any})"],
    ["getGestureObservers(type: GestureTypes): Array<GesturesObserver>\tClass Placeholder", "getGestureObservers(${1:type: GestureTypes})"],
    ["_addView(view: View, atIndex?: number): any\tClass HtmlView", "_addView(${1:view: View}, ${2:atIndex?: number})"],
    ["_addView(view: View, atIndex?: number): any\tClass Progress", "_addView(${1:view: View}, ${2:atIndex?: number})"],
    ["restoreOriginalParams(layoutBase: LayoutBase): void\tClass ProxyViewContainer", "restoreOriginalParams(${1:layoutBase: LayoutBase})"],
    ["_addView(view: View, atIndex?: number): any\tClass ListView", "_addView(${1:view: View}, ${2:atIndex?: number})"],
    ["getGestureObservers(type: GestureTypes): Array<GesturesObserver>\tClass LayoutBase", "getGestureObservers(${1:type: GestureTypes})"],
    ["_addView(view: View, atIndex?: number): any\tClass TabView", "_addView(${1:view: View}, ${2:atIndex?: number})"],
    ["_unregisterAnimation(animation: KeyframeAnimation): any\tClass Progress", "_unregisterAnimation(${1:animation: KeyframeAnimation})"],
    ["_setNativeViewFrame(nativeView: any, frame: any): void\tClass Layout", "_setNativeViewFrame(${1:nativeView: any}, ${2:frame: any})"],
    ["getGestureObservers(type: GestureTypes): Array<GesturesObserver>\tClass GridLayout", "getGestureObservers(${1:type: GestureTypes})"],
    ["_registerAnimation(animation: KeyframeAnimation): any\tClass SegmentedBar", "_registerAnimation(${1:animation: KeyframeAnimation})"],
    ["createAnimation(options: AnimationDefinition): Animation\tClass SegmentedBar", "createAnimation(${1:options: AnimationDefinition})"],
    ["_addView(view: View, atIndex?: number): any\tClass WebView", "_addView(${1:view: View}, ${2:atIndex?: number})"],
    ["getGestureObservers(type: GestureTypes): Array<GesturesObserver>\tClass TimePicker", "getGestureObservers(${1:type: GestureTypes})"],
    ["_setNativeViewFrame(nativeView: any, frame: any): void\tClass Button", "_setNativeViewFrame(${1:nativeView: any}, ${2:frame: any})"],
    ["getGestureObservers(type: GestureTypes): Array<GesturesObserver>\tClass ListPicker", "getGestureObservers(${1:type: GestureTypes})"],
    ["_unregisterAnimation(animation: KeyframeAnimation): any\tClass TextBase", "_unregisterAnimation(${1:animation: KeyframeAnimation})"],
    ["getGestureObservers(type: GestureTypes): Array<GesturesObserver>\tClass DatePicker", "getGestureObservers(${1:type: GestureTypes})"],
    ["_unregisterAnimation(animation: KeyframeAnimation): any\tClass Repeater", "_unregisterAnimation(${1:animation: KeyframeAnimation})"],
    ["_setNativeViewFrame(nativeView: any, frame: any): void\tClass Switch", "_setNativeViewFrame(${1:nativeView: any}, ${2:frame: any})"],
    ["onActivityResult: function(requestCode: number, resultCode: number, data: any): void\tClass AndroidApplication", "onActivityResult"],
    ["getGestureObservers(type: GestureTypes): Array<GesturesObserver>\tClass WrapLayout", "getGestureObservers(${1:type: GestureTypes})"],
    ["resolveFileName(path: string, ext: string): string\tClass FileNameResolver", "resolveFileName(${1:path: string}, ${2:ext: string})"],
    ["addCss(cssString: string, cssFileName: string): void\tClass StyleScope", "addCss(${1:cssString: string}, ${2:cssFileName: string})"],
    ["_clearBackwardTransitions(fragment: any): void\tModule ui/transition", "_clearBackwardTransitions(${1:fragment: any})"],
    ["_setNativeViewFrame(nativeView: any, frame: any): void\tClass Border", "_setNativeViewFrame(${1:nativeView: any}, ${2:frame: any})"],
    ["_unregisterAnimation(animation: KeyframeAnimation): any\tClass TextView", "_unregisterAnimation(${1:animation: KeyframeAnimation})"],
    ["_unregisterAnimation(animation: KeyframeAnimation): any\tClass HtmlView", "_unregisterAnimation(${1:animation: KeyframeAnimation})"],
    ["_setNativeViewFrame(nativeView: any, frame: any): void\tClass Slider", "_setNativeViewFrame(${1:nativeView: any}, ${2:frame: any})"],
    ["_unregisterAnimation(animation: KeyframeAnimation): any\tClass ListView", "_unregisterAnimation(${1:animation: KeyframeAnimation})"],
    ["getGestureObservers(type: GestureTypes): Array<GesturesObserver>\tClass ScrollView", "getGestureObservers(${1:type: GestureTypes})"],
    ["getGestureObservers(type: GestureTypes): Array<GesturesObserver>\tClass DockLayout", "getGestureObservers(${1:type: GestureTypes})"],
    ["_addChildFromBuilder(name: string, value: any): void\tClass ScrollView", "_addChildFromBuilder(${1:name: string}, ${2:value: any})"],
    ["_addView(view: View, atIndex?: number): any\tClass Slider", "_addView(${1:view: View}, ${2:atIndex?: number})"],
    ["createAnimation(options: AnimationDefinition): Animation\tClass Placeholder", "createAnimation(${1:options: AnimationDefinition})"],
    ["_addChildFromBuilder(name: string, value: any): void\tClass ActionBar", "_addChildFromBuilder(${1:name: string}, ${2:value: any})"],
    ["_setFormattedTextPropertyToNative(value: any): void\tClass EditableTextBase", "_setFormattedTextPropertyToNative(${1:value: any})"],
    ["_addView(view: View, atIndex?: number): any\tClass Layout", "_addView(${1:view: View}, ${2:atIndex?: number})"],
    ["_registerAnimation(animation: KeyframeAnimation): any\tClass Placeholder", "_registerAnimation(${1:animation: KeyframeAnimation})"],
    ["_setNativeViewFrame(nativeView: any, frame: any): void\tClass Label", "_setNativeViewFrame(${1:nativeView: any}, ${2:frame: any})"],
    ["_unregisterAnimation(animation: KeyframeAnimation): any\tClass TabView", "_unregisterAnimation(${1:animation: KeyframeAnimation})"],
    ["_addView(view: View, atIndex?: number): any\tClass Border", "_addView(${1:view: View}, ${2:atIndex?: number})"],
    ["_addChildFromBuilder(name: string, value: any): void\tClass TextField", "_addChildFromBuilder(${1:name: string}, ${2:value: any})"],
    ["_registerAnimation(animation: KeyframeAnimation): any\tClass ContentView", "_registerAnimation(${1:animation: KeyframeAnimation})"],
    ["getGestureObservers(type: GestureTypes): Array<GesturesObserver>\tClass SearchBar", "getGestureObservers(${1:type: GestureTypes})"],
    ["getGestureObservers(type: GestureTypes): Array<GesturesObserver>\tClass TextField", "getGestureObservers(${1:type: GestureTypes})"],
    ["_addView(view: View, atIndex?: number): any\tClass Switch", "_addView(${1:view: View}, ${2:atIndex?: number})"],
    ["_registerAnimation(animation: KeyframeAnimation): any\tClass StackLayout", "_registerAnimation(${1:animation: KeyframeAnimation})"],
    ["createAnimation(options: AnimationDefinition): Animation\tClass ContentView", "createAnimation(${1:options: AnimationDefinition})"],
    ["getGestureObservers(type: GestureTypes): Array<GesturesObserver>\tClass ActionBar", "getGestureObservers(${1:type: GestureTypes})"],
    ["_onCssStateChange(previous: any, any: any): any\tClass ProxyViewContainer", "_onCssStateChange(${1:previous: any}, ${2:any: any})"],
    ["_setNativeViewFrame(nativeView: any, frame: any): void\tClass Image", "_setNativeViewFrame(${1:nativeView: any}, ${2:frame: any})"],
    ["createAnimation(options: AnimationDefinition): Animation\tClass StackLayout", "createAnimation(${1:options: AnimationDefinition})"],
    ["_setNativeViewFrame(nativeView: any, frame: any): void\tClass Frame", "_setNativeViewFrame(${1:nativeView: any}, ${2:frame: any})"],
    ["_addView(view: View, atIndex?: number): any\tClass Button", "_addView(${1:view: View}, ${2:atIndex?: number})"],
    ["_unregisterAnimation(animation: KeyframeAnimation): any\tClass WebView", "_unregisterAnimation(${1:animation: KeyframeAnimation})"],
    ["_unregisterAnimation(animation: KeyframeAnimation): any\tClass Button", "_unregisterAnimation(${1:animation: KeyframeAnimation})"],
    ["_onTextPropertyChanged(data: PropertyChangeData): void\tClass TextField", "_onTextPropertyChanged(${1:data: PropertyChangeData})"],
    ["_addChildFromBuilder(name: string, value: any): void\tClass TextView", "_addChildFromBuilder(${1:name: string}, ${2:value: any})"],
    ["_unregisterAnimation(animation: KeyframeAnimation): any\tClass Switch", "_unregisterAnimation(${1:animation: KeyframeAnimation})"],
    ["_unregisterAnimation(animation: KeyframeAnimation): any\tClass Slider", "_unregisterAnimation(${1:animation: KeyframeAnimation})"],
    ["createAnimation(options: AnimationDefinition): Animation\tClass TimePicker", "createAnimation(${1:options: AnimationDefinition})"],
    ["createAnimation(options: AnimationDefinition): Animation\tClass DatePicker", "createAnimation(${1:options: AnimationDefinition})"],
    ["_registerAnimation(animation: KeyframeAnimation): any\tClass TimePicker", "_registerAnimation(${1:animation: KeyframeAnimation})"],
    ["createAnimation(options: AnimationDefinition): Animation\tClass DockLayout", "createAnimation(${1:options: AnimationDefinition})"],
    ["_registerAnimation(animation: KeyframeAnimation): any\tClass DockLayout", "_registerAnimation(${1:animation: KeyframeAnimation})"],
    ["_addChildFromBuilder(name: string, value: any): void\tClass TextBase", "_addChildFromBuilder(${1:name: string}, ${2:value: any})"],
    ["_registerAnimation(animation: KeyframeAnimation): any\tClass ScrollView", "_registerAnimation(${1:animation: KeyframeAnimation})"],
    ["createAnimation(options: AnimationDefinition): Animation\tClass ScrollView", "createAnimation(${1:options: AnimationDefinition})"],
    ["getGestureObservers(type: GestureTypes): Array<GesturesObserver>\tClass HtmlView", "getGestureObservers(${1:type: GestureTypes})"],
    ["getGestureObservers(type: GestureTypes): Array<GesturesObserver>\tClass TextView", "getGestureObservers(${1:type: GestureTypes})"],
    ["createAnimation(options: AnimationDefinition): Animation\tClass WrapLayout", "createAnimation(${1:options: AnimationDefinition})"],
    ["_addView(view: View, atIndex?: number): any\tClass Label", "_addView(${1:view: View}, ${2:atIndex?: number})"],
    ["_unregisterAnimation(animation: KeyframeAnimation): any\tClass Layout", "_unregisterAnimation(${1:animation: KeyframeAnimation})"],
    ["_registerAnimation(animation: KeyframeAnimation): any\tClass WrapLayout", "_registerAnimation(${1:animation: KeyframeAnimation})"],
    ["createAnimation(options: AnimationDefinition): Animation\tClass LayoutBase", "createAnimation(${1:options: AnimationDefinition})"],
    ["_registerAnimation(animation: KeyframeAnimation): any\tClass LayoutBase", "_registerAnimation(${1:animation: KeyframeAnimation})"],
    ["getGestureObservers(type: GestureTypes): Array<GesturesObserver>\tClass Progress", "getGestureObservers(${1:type: GestureTypes})"],
    ["insertChild(child: View, atIndex: number): void\tClass ProxyViewContainer", "insertChild(${1:child: View}, ${2:atIndex: number})"],
    ["_onCssStateChange(previous: any, any: any): any\tClass ActivityIndicator", "_onCssStateChange(${1:previous: any}, ${2:any: any})"],
    ["getGestureObservers(type: GestureTypes): Array<GesturesObserver>\tClass TextBase", "getGestureObservers(${1:type: GestureTypes})"],
    ["_addView(view: View, atIndex?: number): any\tClass Image", "_addView(${1:view: View}, ${2:atIndex?: number})"],
    ["_unregisterAnimation(animation: KeyframeAnimation): any\tClass Border", "_unregisterAnimation(${1:animation: KeyframeAnimation})"],
    ["_registerAnimation(animation: KeyframeAnimation): any\tClass DatePicker", "_registerAnimation(${1:animation: KeyframeAnimation})"],
    ["_clearForwardTransitions(fragment: any): void\tModule ui/transition", "_clearForwardTransitions(${1:fragment: any})"],
    ["_registerAnimation(animation: KeyframeAnimation): any\tClass ListPicker", "_registerAnimation(${1:animation: KeyframeAnimation})"],
    ["_registerAnimation(animation: KeyframeAnimation): any\tClass GridLayout", "_registerAnimation(${1:animation: KeyframeAnimation})"],
    ["_setNativeViewFrame(nativeView: any, frame: any): void\tClass Page", "_setNativeViewFrame(${1:nativeView: any}, ${2:frame: any})"],
    ["createAnimation(options: AnimationDefinition): Animation\tClass GridLayout", "createAnimation(${1:options: AnimationDefinition})"],
    ["getGestureObservers(type: GestureTypes): Array<GesturesObserver>\tClass Repeater", "getGestureObservers(${1:type: GestureTypes})"],
    ["createAnimation(options: AnimationDefinition): Animation\tClass ListPicker", "createAnimation(${1:options: AnimationDefinition})"],
    ["getGestureObservers(type: GestureTypes): Array<GesturesObserver>\tClass ListView", "getGestureObservers(${1:type: GestureTypes})"],
    ["_setNativeViewFrame(nativeView: any, frame: any): void\tClass View", "_setNativeViewFrame(${1:nativeView: any}, ${2:frame: any})"],
    ["_addView(view: View, atIndex?: number): any\tClass Frame", "_addView(${1:view: View}, ${2:atIndex?: number})"],
    ["_addView(view: View, atIndex?: number): any\tClass View", "_addView(${1:view: View}, ${2:atIndex?: number})"],
    ["_onContentChanged(oldView: View, newView: View): any\tClass Border", "_onContentChanged(${1:oldView: View}, ${2:newView: View})"],
    ["_unregisterAnimation(animation: KeyframeAnimation): any\tClass Label", "_unregisterAnimation(${1:animation: KeyframeAnimation})"],
    ["on(eventNames: string, callback: function): any\tClass NavigationButton", "on(${1:eventNames: string}, ${2:callback: function})"],
    ["_registerAnimation(animation: KeyframeAnimation): any\tClass TextField", "_registerAnimation(${1:animation: KeyframeAnimation})"],
    ["_unregisterAnimation(animation: KeyframeAnimation): any\tClass Frame", "_unregisterAnimation(${1:animation: KeyframeAnimation})"],
    ["_onCssStateChange(previous: any, any: any): any\tClass EditableTextBase", "_onCssStateChange(${1:previous: any}, ${2:any: any})"],
    ["animate(options: AnimationDefinition): AnimationPromise\tClass ProxyViewContainer", "animate(${1:options: AnimationDefinition})"],
    ["createAnimation(options: AnimationDefinition): Animation\tClass ActionBar", "createAnimation(${1:options: AnimationDefinition})"],
    ["_onTextPropertyChanged(data: PropertyChangeData): void\tClass TextBase", "_onTextPropertyChanged(${1:data: PropertyChangeData})"],
    ["_onStylePropertyChanged(property: Property): void\tClass ProxyViewContainer", "_onStylePropertyChanged(${1:property: Property})"],
    ["restoreOriginalParams(layoutBase: LayoutBase): void\tClass AbsoluteLayout", "restoreOriginalParams(${1:layoutBase: LayoutBase})"],
    ["createAnimation(options: AnimationDefinition): Animation\tClass TextField", "createAnimation(${1:options: AnimationDefinition})"],
    ["_unregisterAnimation(animation: KeyframeAnimation): any\tClass Image", "_unregisterAnimation(${1:animation: KeyframeAnimation})"],
    ["getGestureObservers(type: GestureTypes): Array<GesturesObserver>\tClass TabView", "getGestureObservers(${1:type: GestureTypes})"],
    ["_removeViewFromNativeVisualTree(view: View): void\tClass ProxyViewContainer", "_removeViewFromNativeVisualTree(${1:view: View})"],
    ["catch<U>(onRejected?: function): Promise<U>\tClass AnimationPromise", "catch<U>(${1:onRejected?: function})"],
    ["createAnimation(options: AnimationDefinition): Animation\tClass SearchBar", "createAnimation(${1:options: AnimationDefinition})"],
    ["_onCssStateChange(previous: any, any: any): any\tClass CustomLayoutView", "_onCssStateChange(${1:previous: any}, ${2:any: any})"],
    ["_addView(view: View, atIndex?: number): any\tClass Page", "_addView(${1:view: View}, ${2:atIndex?: number})"],
    ["_registerAnimation(animation: KeyframeAnimation): any\tClass SearchBar", "_registerAnimation(${1:animation: KeyframeAnimation})"],
    ["_onTextPropertyChanged(data: PropertyChangeData): void\tClass TextView", "_onTextPropertyChanged(${1:data: PropertyChangeData})"],
    ["catch(onRejected?: function): AnimationPromise\tClass AnimationPromise", "catch(${1:onRejected?: function})"],
    ["catch(onRejected?: function): AnimationPromise\tClass AnimationPromise", "catch(${1:onRejected?: function})"],
    ["setBoolean(key: string, value: boolean): void\tModule application-settings", "setBoolean(${1:key: string}, ${2:value: boolean})"],
    ["getGestureObservers(type: GestureTypes): Array<GesturesObserver>\tClass WebView", "getGestureObservers(${1:type: GestureTypes})"],
    ["_registerAnimation(animation: KeyframeAnimation): any\tClass ActionBar", "_registerAnimation(${1:animation: KeyframeAnimation})"],
    ["_removeViewFromNativeVisualTree(view: View): void\tClass ActivityIndicator", "_removeViewFromNativeVisualTree(${1:view: View})"],
    ["createAnimation(options: AnimationDefinition): Animation\tClass TextView", "createAnimation(${1:options: AnimationDefinition})"],
    ["getGestureObservers(type: GestureTypes): Array<GesturesObserver>\tClass Slider", "getGestureObservers(${1:type: GestureTypes})"],
    ["createAnimation(options: AnimationDefinition): Animation\tClass ListView", "createAnimation(${1:options: AnimationDefinition})"],
    ["_unregisterAnimation(animation: KeyframeAnimation): any\tClass Page", "_unregisterAnimation(${1:animation: KeyframeAnimation})"],
    ["createAnimation(options: AnimationDefinition): Animation\tClass TextBase", "createAnimation(${1:options: AnimationDefinition})"],
    ["createAnimation(options: AnimationDefinition): Animation\tClass HtmlView", "createAnimation(${1:options: AnimationDefinition})"],
    ["getGestureObservers(type: GestureTypes): Array<GesturesObserver>\tClass Layout", "getGestureObservers(${1:type: GestureTypes})"],
    ["animate(options: AnimationDefinition): AnimationPromise\tClass ActivityIndicator", "animate(${1:options: AnimationDefinition})"],
    ["_registerAnimation(animation: KeyframeAnimation): any\tClass TextView", "_registerAnimation(${1:animation: KeyframeAnimation})"],
    ["createAnimation(options: AnimationDefinition): Animation\tClass Repeater", "createAnimation(${1:options: AnimationDefinition})"],
    ["_registerAnimation(animation: KeyframeAnimation): any\tClass ListView", "_registerAnimation(${1:animation: KeyframeAnimation})"],
    ["getGestureObservers(type: GestureTypes): Array<GesturesObserver>\tClass Border", "getGestureObservers(${1:type: GestureTypes})"],
    ["_onStylePropertyChanged(property: Property): void\tClass ActivityIndicator", "_onStylePropertyChanged(${1:property: Property})"],
    ["_registerAnimation(animation: KeyframeAnimation): any\tClass HtmlView", "_registerAnimation(${1:animation: KeyframeAnimation})"],
    ["_registerAnimation(animation: KeyframeAnimation): any\tClass TextBase", "_registerAnimation(${1:animation: KeyframeAnimation})"],
    ["_registerAnimation(animation: KeyframeAnimation): any\tClass Repeater", "_registerAnimation(${1:animation: KeyframeAnimation})"],
    ["_unregisterAnimation(animation: KeyframeAnimation): any\tClass View", "_unregisterAnimation(${1:animation: KeyframeAnimation})"],
    ["getGestureObservers(type: GestureTypes): Array<GesturesObserver>\tClass Switch", "getGestureObservers(${1:type: GestureTypes})"],
    ["_addChildFromBuilder(name: string, value: any): void\tClass Button", "_addChildFromBuilder(${1:name: string}, ${2:value: any})"],
    ["_propagateInheritableProperties(view: View): any\tClass ProxyViewContainer", "_propagateInheritableProperties(${1:view: View})"],
    ["getGestureObservers(type: GestureTypes): Array<GesturesObserver>\tClass Button", "getGestureObservers(${1:type: GestureTypes})"],
    ["_registerAnimation(animation: KeyframeAnimation): any\tClass Progress", "_registerAnimation(${1:animation: KeyframeAnimation})"],
    ["createAnimation(options: AnimationDefinition): Animation\tClass Progress", "createAnimation(${1:options: AnimationDefinition})"],
    ["_addChildFromBuilder(name: string, value: any): void\tClass Border", "_addChildFromBuilder(${1:name: string}, ${2:value: any})"],
    ["_registerAnimation(animation: KeyframeAnimation): any\tClass TabView", "_registerAnimation(${1:animation: KeyframeAnimation})"],
    ["_onStylePropertyChanged(property: Property): void\tClass EditableTextBase", "_onStylePropertyChanged(${1:property: Property})"],
    ["_removeViewFromNativeVisualTree(view: View): void\tClass EditableTextBase", "_removeViewFromNativeVisualTree(${1:view: View})"],
    ["getGestureObservers(type: GestureTypes): Array<GesturesObserver>\tClass Image", "getGestureObservers(${1:type: GestureTypes})"],
    ["_onContentChanged(oldView: View, newView: View): any\tClass Page", "_onContentChanged(${1:oldView: View}, ${2:newView: View})"],
    ["_eachSetPropertyValue(callback: function): void\tClass DependencyObservable", "_eachSetPropertyValue(${1:callback: function})"],
    ["getGestureObservers(type: GestureTypes): Array<GesturesObserver>\tClass Frame", "getGestureObservers(${1:type: GestureTypes})"],
    ["animate(options: AnimationDefinition): AnimationPromise\tClass EditableTextBase", "animate(${1:options: AnimationDefinition})"],
    ["_registerAnimation(animation: KeyframeAnimation): any\tClass WebView", "_registerAnimation(${1:animation: KeyframeAnimation})"],
    ["_onCssStateChange(previous: any, any: any): any\tClass AbsoluteLayout", "_onCssStateChange(${1:previous: any}, ${2:any: any})"],
    ["_onTextPropertyChanged(data: PropertyChangeData): void\tClass Button", "_onTextPropertyChanged(${1:data: PropertyChangeData})"],
    ["getGestureObservers(type: GestureTypes): Array<GesturesObserver>\tClass Label", "getGestureObservers(${1:type: GestureTypes})"],
    ["animate(options: AnimationDefinition): AnimationPromise\tClass CustomLayoutView", "animate(${1:options: AnimationDefinition})"],
    ["_propagateInheritableProperties(view: View): any\tClass ActivityIndicator", "_propagateInheritableProperties(${1:view: View})"],
    ["getLocation(options?: Options): Promise<Location>\tModule location", "getLocation(${1:options?: Options})"],
    ["_removeViewFromNativeVisualTree(view: View): void\tClass CustomLayoutView", "_removeViewFromNativeVisualTree(${1:view: View})"],
    ["createAnimation(options: AnimationDefinition): Animation\tClass TabView", "createAnimation(${1:options: AnimationDefinition})"],
    ["distance(loc1: Location, loc2: Location): number\tClass LocationManager", "distance(${1:loc1: Location}, ${2:loc2: Location})"],
    ["_addChildFromBuilder(name: string, value: any): void\tClass Label", "_addChildFromBuilder(${1:name: string}, ${2:value: any})"],
    ["createAnimation(options: AnimationDefinition): Animation\tClass WebView", "createAnimation(${1:options: AnimationDefinition})"],
    ["_onStylePropertyChanged(property: Property): void\tClass CustomLayoutView", "_onStylePropertyChanged(${1:property: Property})"],
    ["createAnimation(options: AnimationDefinition): Animation\tClass Border", "createAnimation(${1:options: AnimationDefinition})"],
    ["_registerAnimation(animation: KeyframeAnimation): any\tClass Button", "_registerAnimation(${1:animation: KeyframeAnimation})"],
    ["_registerAnimation(animation: KeyframeAnimation): any\tClass Layout", "_registerAnimation(${1:animation: KeyframeAnimation})"],
    ["_registerAnimation(animation: KeyframeAnimation): any\tClass Slider", "_registerAnimation(${1:animation: KeyframeAnimation})"],
    ["_registerAnimation(animation: KeyframeAnimation): any\tClass Switch", "_registerAnimation(${1:animation: KeyframeAnimation})"],
    ["_propagateInheritableProperties(view: View): any\tClass CustomLayoutView", "_propagateInheritableProperties(${1:view: View})"],
    ["restoreOriginalParams(layoutBase: LayoutBase): void\tClass StackLayout", "restoreOriginalParams(${1:layoutBase: LayoutBase})"],
    ["_registerAnimation(animation: KeyframeAnimation): any\tClass Border", "_registerAnimation(${1:animation: KeyframeAnimation})"],
    ["_onTextPropertyChanged(data: PropertyChangeData): void\tClass Label", "_onTextPropertyChanged(${1:data: PropertyChangeData})"],
    ["_addChildFromBuilder(name: string, value: any): void\tClass Page", "_addChildFromBuilder(${1:name: string}, ${2:value: any})"],
    ["createAnimation(options: AnimationDefinition): Animation\tClass Switch", "createAnimation(${1:options: AnimationDefinition})"],
    ["createAnimation(options: AnimationDefinition): Animation\tClass Slider", "createAnimation(${1:options: AnimationDefinition})"],
    ["on(event: creatingView, callback: function): any\tClass Placeholder", "on(${1:event: creatingView}, ${2:callback: function})"],
    ["getGestureObservers(type: GestureTypes): Array<GesturesObserver>\tClass View", "getGestureObservers(${1:type: GestureTypes})"],
    ["_propagateInheritableProperties(view: View): any\tClass EditableTextBase", "_propagateInheritableProperties(${1:view: View})"],
    ["getGestureObservers(type: GestureTypes): Array<GesturesObserver>\tClass Page", "getGestureObservers(${1:type: GestureTypes})"],
    ["insertChild(child: View, atIndex: number): void\tClass AbsoluteLayout", "insertChild(${1:child: View}, ${2:atIndex: number})"],
    ["createAnimation(options: AnimationDefinition): Animation\tClass Layout", "createAnimation(${1:options: AnimationDefinition})"],
    ["prompt(options: PromptOptions): Promise<PromptResult>\tModule ui/dialogs", "prompt(${1:options: PromptOptions})"],
    ["createAnimation(options: AnimationDefinition): Animation\tClass Button", "createAnimation(${1:options: AnimationDefinition})"],
    ["restoreOriginalParams(layoutBase: LayoutBase): void\tClass GridLayout", "restoreOriginalParams(${1:layoutBase: LayoutBase})"],
    ["setNumber(key: string, value: number): void\tModule application-settings", "setNumber(${1:key: string}, ${2:value: number})"],
    ["animate(options: AnimationDefinition): AnimationPromise\tClass AbsoluteLayout", "animate(${1:options: AnimationDefinition})"],
    ["restoreOriginalParams(layoutBase: LayoutBase): void\tClass DockLayout", "restoreOriginalParams(${1:layoutBase: LayoutBase})"],
    ["createAnimation(options: AnimationDefinition): Animation\tClass Frame", "createAnimation(${1:options: AnimationDefinition})"],
    ["setString(key: string, value: string): void\tModule application-settings", "setString(${1:key: string}, ${2:value: string})"],
    ["_registerAnimation(animation: KeyframeAnimation): any\tClass Image", "_registerAnimation(${1:animation: KeyframeAnimation})"],
    ["_eachSetPropertyValue(callback: function): void\tClass ProxyViewContainer", "_eachSetPropertyValue(${1:callback: function})"],
    ["_onStylePropertyChanged(property: Property): void\tClass AbsoluteLayout", "_onStylePropertyChanged(${1:property: Property})"],
    ["restoreOriginalParams(layoutBase: LayoutBase): void\tClass LayoutBase", "restoreOriginalParams(${1:layoutBase: LayoutBase})"],
    ["_removeViewFromNativeVisualTree(view: View): void\tClass AbsoluteLayout", "_removeViewFromNativeVisualTree(${1:view: View})"],
    ["restoreOriginalParams(layoutBase: LayoutBase): void\tClass WrapLayout", "restoreOriginalParams(${1:layoutBase: LayoutBase})"],
    ["createAnimation(options: AnimationDefinition): Animation\tClass Label", "createAnimation(${1:options: AnimationDefinition})"],
    ["_registerAnimation(animation: KeyframeAnimation): any\tClass Frame", "_registerAnimation(${1:animation: KeyframeAnimation})"],
    ["_registerAnimation(animation: KeyframeAnimation): any\tClass Label", "_registerAnimation(${1:animation: KeyframeAnimation})"],
    ["_onCssStateChange(previous: any, any: any): any\tClass SegmentedBar", "_onCssStateChange(${1:previous: any}, ${2:any: any})"],
    ["createAnimation(options: AnimationDefinition): Animation\tClass Image", "createAnimation(${1:options: AnimationDefinition})"],
    ["confirm(options: ConfirmOptions): Promise<boolean>\tModule ui/dialogs", "confirm(${1:options: ConfirmOptions})"],
    ["_setFormattedTextPropertyToNative(value: any): void\tClass TextField", "_setFormattedTextPropertyToNative(${1:value: any})"],
    ["_onCssStateChange(previous: any, any: any): any\tClass StackLayout", "_onCssStateChange(${1:previous: any}, ${2:any: any})"],
    ["createAndroidAnimator(transitionType: string): any\tClass Transition", "createAndroidAnimator(${1:transitionType: string})"],
    ["_registerAnimation(animation: KeyframeAnimation): any\tClass Page", "_registerAnimation(${1:animation: KeyframeAnimation})"],
    ["createAnimation(options: AnimationDefinition): Animation\tClass View", "createAnimation(${1:options: AnimationDefinition})"],
    ["_onCssStateChange(previous: any, any: any): any\tClass Placeholder", "_onCssStateChange(${1:previous: any}, ${2:any: any})"],
    ["_onCssStateChange(previous: any, any: any): any\tClass ContentView", "_onCssStateChange(${1:previous: any}, ${2:any: any})"],
    ["_eachSetPropertyValue(callback: function): void\tClass ActivityIndicator", "_eachSetPropertyValue(${1:callback: function})"],
    ["_registerAnimation(animation: KeyframeAnimation): any\tClass View", "_registerAnimation(${1:animation: KeyframeAnimation})"],
    ["_propagateInheritableProperties(view: View): any\tClass AbsoluteLayout", "_propagateInheritableProperties(${1:view: View})"],
    ["on(eventNames: string, callback: function): any\tClass Placeholder", "on(${1:eventNames: string}, ${2:callback: function})"],
    ["createAnimation(options: AnimationDefinition): Animation\tClass Page", "createAnimation(${1:options: AnimationDefinition})"],
    ["_onDownloadCompleted(key: string, image: any): any\tClass Cache", "_onDownloadCompleted(${1:key: string}, ${2:image: any})"],
    ["insertChild(child: View, atIndex: number): void\tClass StackLayout", "insertChild(${1:child: View}, ${2:atIndex: number})"],
    ["_onCssStateChange(previous: any, any: any): any\tClass GridLayout", "_onCssStateChange(${1:previous: any}, ${2:any: any})"],
    ["_eachSetPropertyValue(callback: function): void\tClass EditableTextBase", "_eachSetPropertyValue(${1:callback: function})"],
    ["_onCssStateChange(previous: any, any: any): any\tClass DatePicker", "_onCssStateChange(${1:previous: any}, ${2:any: any})"],
    ["_eachSetPropertyValue(callback: function): void\tClass NavigationButton", "_eachSetPropertyValue(${1:callback: function})"],
    ["animate(options: AnimationDefinition): AnimationPromise\tClass SegmentedBar", "animate(${1:options: AnimationDefinition})"],
    ["_setFormattedTextPropertyToNative(value: any): void\tClass TextView", "_setFormattedTextPropertyToNative(${1:value: any})"],
    ["_removeViewFromNativeVisualTree(view: View): void\tClass SegmentedBar", "_removeViewFromNativeVisualTree(${1:view: View})"],
    ["_onCssStateChange(previous: any, any: any): any\tClass ListPicker", "_onCssStateChange(${1:previous: any}, ${2:any: any})"],
    ["_onCssStateChange(previous: any, any: any): any\tClass ScrollView", "_onCssStateChange(${1:previous: any}, ${2:any: any})"],
    ["_onStylePropertyChanged(property: Property): void\tClass SegmentedBar", "_onStylePropertyChanged(${1:property: Property})"],
    ["_eachSetPropertyValue(callback: function): void\tClass CustomLayoutView", "_eachSetPropertyValue(${1:callback: function})"],
    ["_onCssStateChange(previous: any, any: any): any\tClass LayoutBase", "_onCssStateChange(${1:previous: any}, ${2:any: any})"],
    ["_onCssStateChange(previous: any, any: any): any\tClass WrapLayout", "_onCssStateChange(${1:previous: any}, ${2:any: any})"],
    ["_onCssStateChange(previous: any, any: any): any\tClass DockLayout", "_onCssStateChange(${1:previous: any}, ${2:any: any})"],
    ["_setFormattedTextPropertyToNative(value: any): void\tClass TextBase", "_setFormattedTextPropertyToNative(${1:value: any})"],
    ["_onCssStateChange(previous: any, any: any): any\tClass TimePicker", "_onCssStateChange(${1:previous: any}, ${2:any: any})"],
    ["on(eventNames: string, callback: function): any\tClass ActionItem", "on(${1:eventNames: string}, ${2:callback: function})"],
    ["_eachSetPropertyValue(callback: function): void\tClass SegmentedBarItem", "_eachSetPropertyValue(${1:callback: function})"],
    ["error(message: any, ...formatParams: any[]): void\tClass Console", "error(${1:message: any}, ${2:...formatParams: any[]})"],
    ["animate(options: AnimationDefinition): AnimationPromise\tClass StackLayout", "animate(${1:options: AnimationDefinition})"],
    ["copyFrom(source: any, target: any): any\tModule utils/utils", "copyFrom(${1:source: any}, ${2:target: any})"],
    ["insertChild(child: View, atIndex: number): void\tClass DockLayout", "insertChild(${1:child: View}, ${2:atIndex: number})"],
    ["_onCssStateChange(previous: any, any: any): any\tClass ActionBar", "_onCssStateChange(${1:previous: any}, ${2:any: any})"],
    ["_onCssStateChange(previous: any, any: any): any\tClass SearchBar", "_onCssStateChange(${1:previous: any}, ${2:any: any})"],
    ["_propagateInheritableProperties(view: View): any\tClass SegmentedBar", "_propagateInheritableProperties(${1:view: View})"],
    ["_onCssStateChange(previous: any, any: any): any\tClass TextField", "_onCssStateChange(${1:previous: any}, ${2:any: any})"],
    ["_onStylePropertyChanged(property: Property): void\tClass ContentView", "_onStylePropertyChanged(${1:property: Property})"],
    ["animate(options: AnimationDefinition): AnimationPromise\tClass Placeholder", "animate(${1:options: AnimationDefinition})"],
    ["insertChild(child: View, atIndex: number): void\tClass GridLayout", "insertChild(${1:child: View}, ${2:atIndex: number})"],
    ["joinPath(left: string, right: string): string\tClass FileSystemAccess", "joinPath(${1:left: string}, ${2:right: string})"],
    ["animate(options: AnimationDefinition): AnimationPromise\tClass ContentView", "animate(${1:options: AnimationDefinition})"],
    ["_removeViewFromNativeVisualTree(view: View): void\tClass ContentView", "_removeViewFromNativeVisualTree(${1:view: View})"],
    ["_onStylePropertyChanged(property: Property): void\tClass Placeholder", "_onStylePropertyChanged(${1:property: Property})"],
    ["insertChild(child: View, atIndex: number): void\tClass WrapLayout", "insertChild(${1:child: View}, ${2:atIndex: number})"],
    ["_removeViewFromNativeVisualTree(view: View): void\tClass StackLayout", "_removeViewFromNativeVisualTree(${1:view: View})"],
    ["_onStylePropertyChanged(property: Property): void\tClass StackLayout", "_onStylePropertyChanged(${1:property: Property})"],
    ["_removeViewFromNativeVisualTree(view: View): void\tClass Placeholder", "_removeViewFromNativeVisualTree(${1:view: View})"],
    ["insertChild(child: View, atIndex: number): void\tClass LayoutBase", "insertChild(${1:child: View}, ${2:atIndex: number})"],
    ["_removeViewFromNativeVisualTree(view: View): void\tClass LayoutBase", "_removeViewFromNativeVisualTree(${1:view: View})"],
    ["animate(options: AnimationDefinition): AnimationPromise\tClass ListPicker", "animate(${1:options: AnimationDefinition})"],
    ["request: function(options: HttpRequestOptions): Promise<HttpResponse>\tModule http/http-request", "request"],
    ["_removeViewFromNativeVisualTree(view: View): void\tClass DatePicker", "_removeViewFromNativeVisualTree(${1:view: View})"],
    ["_propagateInheritableProperties(view: View): any\tClass ContentView", "_propagateInheritableProperties(${1:view: View})"],
    ["_onCssStateChange(previous: any, any: any): any\tClass TextBase", "_onCssStateChange(${1:previous: any}, ${2:any: any})"],
    ["removeSync(onError?: function): void\tClass FileSystemEntity", "removeSync(${1:onError?: function})"],
    ["animate(options: AnimationDefinition): AnimationPromise\tClass LayoutBase", "animate(${1:options: AnimationDefinition})"],
    ["_onStylePropertyChanged(property: Property): void\tClass TimePicker", "_onStylePropertyChanged(${1:property: Property})"],
    ["_onStylePropertyChanged(property: Property): void\tClass DatePicker", "_onStylePropertyChanged(${1:property: Property})"],
    ["login(options: LoginOptions): Promise<LoginResult>\tModule ui/dialogs", "login(${1:options: LoginOptions})"],
    ["_propagateInheritableProperties(view: View): any\tClass StackLayout", "_propagateInheritableProperties(${1:view: View})"],
    ["_removeViewFromNativeVisualTree(view: View): void\tClass ListPicker", "_removeViewFromNativeVisualTree(${1:view: View})"],
    ["_onCssStateChange(previous: any, any: any): any\tClass TextView", "_onCssStateChange(${1:previous: any}, ${2:any: any})"],
    ["animate(options: AnimationDefinition): AnimationPromise\tClass DockLayout", "animate(${1:options: AnimationDefinition})"],
    ["_removeViewFromNativeVisualTree(view: View): void\tClass WrapLayout", "_removeViewFromNativeVisualTree(${1:view: View})"],
    ["_onCssStateChange(previous: any, any: any): any\tClass HtmlView", "_onCssStateChange(${1:previous: any}, ${2:any: any})"],
    ["_onStylePropertyChanged(property: Property): void\tClass WrapLayout", "_onStylePropertyChanged(${1:property: Property})"],
    ["animate(options: AnimationDefinition): AnimationPromise\tClass TimePicker", "animate(${1:options: AnimationDefinition})"],
    ["animate(options: AnimationDefinition): AnimationPromise\tClass GridLayout", "animate(${1:options: AnimationDefinition})"],
    ["_removeViewFromNativeVisualTree(view: View): void\tClass DockLayout", "_removeViewFromNativeVisualTree(${1:view: View})"],
    ["_onStylePropertyChanged(property: Property): void\tClass LayoutBase", "_onStylePropertyChanged(${1:property: Property})"],
    ["warn(message: any, ...formatParams: any[]): void\tClass Console", "warn(${1:message: any}, ${2:...formatParams: any[]})"],
    ["_onCssStateChange(previous: any, any: any): any\tClass Repeater", "_onCssStateChange(${1:previous: any}, ${2:any: any})"],
    ["_setFormattedTextPropertyToNative(value: any): void\tClass Button", "_setFormattedTextPropertyToNative(${1:value: any})"],
    ["animate(options: AnimationDefinition): AnimationPromise\tClass DatePicker", "animate(${1:options: AnimationDefinition})"],
    ["_onStylePropertyChanged(property: Property): void\tClass ScrollView", "_onStylePropertyChanged(${1:property: Property})"],
    ["isFileOrResourcePath(path: string): boolean\tModule utils/utils", "isFileOrResourcePath(${1:path: string})"],
    ["horizontalAlignmentProperty: Property\tModule ui/styling/style", "horizontalAlignmentProperty"],
    ["info(message: any, ...formatParams: any[]): void\tClass Console", "info(${1:message: any}, ${2:...formatParams: any[]})"],
    ["_propagateInheritableProperties(view: View): any\tClass Placeholder", "_propagateInheritableProperties(${1:view: View})"],
    ["_onCssStateChange(previous: any, any: any): any\tClass ListView", "_onCssStateChange(${1:previous: any}, ${2:any: any})"],
    ["_removeViewFromNativeVisualTree(view: View): void\tClass GridLayout", "_removeViewFromNativeVisualTree(${1:view: View})"],
    ["_removeViewFromNativeVisualTree(view: View): void\tClass TimePicker", "_removeViewFromNativeVisualTree(${1:view: View})"],
    ["_eachSetPropertyValue(callback: function): void\tClass AbsoluteLayout", "_eachSetPropertyValue(${1:callback: function})"],
    ["animate(options: AnimationDefinition): AnimationPromise\tClass ScrollView", "animate(${1:options: AnimationDefinition})"],
    ["_removeViewFromNativeVisualTree(view: View): void\tClass ScrollView", "_removeViewFromNativeVisualTree(${1:view: View})"],
    ["_onCssStateChange(previous: any, any: any): any\tClass Progress", "_onCssStateChange(${1:previous: any}, ${2:any: any})"],
    ["_onStylePropertyChanged(property: Property): void\tClass GridLayout", "_onStylePropertyChanged(${1:property: Property})"],
    ["animate(options: AnimationDefinition): AnimationPromise\tClass WrapLayout", "animate(${1:options: AnimationDefinition})"],
    ["_onStylePropertyChanged(property: Property): void\tClass DockLayout", "_onStylePropertyChanged(${1:property: Property})"],
    ["_onStylePropertyChanged(property: Property): void\tClass ListPicker", "_onStylePropertyChanged(${1:property: Property})"],
    ["restoreOriginalParams(layoutBase: LayoutBase): void\tClass Layout", "restoreOriginalParams(${1:layoutBase: LayoutBase})"],
    ["animate(options: AnimationDefinition): AnimationPromise\tClass ActionBar", "animate(${1:options: AnimationDefinition})"],
    ["_propagateInheritableProperties(view: View): any\tClass DockLayout", "_propagateInheritableProperties(${1:view: View})"],
    ["_removeViewFromNativeVisualTree(view: View): void\tClass SearchBar", "_removeViewFromNativeVisualTree(${1:view: View})"],
    ["_onCssStateChange(previous: any, any: any): any\tClass WebView", "_onCssStateChange(${1:previous: any}, ${2:any: any})"],
    ["_propagateInheritableProperties(view: View): any\tClass WrapLayout", "_propagateInheritableProperties(${1:view: View})"],
    ["_propagateInheritableProperties(view: View): any\tClass ScrollView", "_propagateInheritableProperties(${1:view: View})"],
    ["escapeRegexSymbols(source: string): string\tModule utils/utils", "escapeRegexSymbols(${1:source: string})"],
    ["_setFormattedTextPropertyToNative(value: any): void\tClass Label", "_setFormattedTextPropertyToNative(${1:value: any})"],
    ["_onStylePropertyChanged(property: Property): void\tClass TextField", "_onStylePropertyChanged(${1:property: Property})"],
    ["getLocationRelativeTo(otherView: View): Point\tClass ProxyViewContainer", "getLocationRelativeTo(${1:otherView: View})"],
    ["_removeViewFromNativeVisualTree(view: View): void\tClass TextField", "_removeViewFromNativeVisualTree(${1:view: View})"],
    ["_propagateInheritableProperties(view: View): any\tClass GridLayout", "_propagateInheritableProperties(${1:view: View})"],
    ["_removeViewFromNativeVisualTree(view: View): void\tClass ActionBar", "_removeViewFromNativeVisualTree(${1:view: View})"],
    ["_onCssStateChange(previous: any, any: any): any\tClass TabView", "_onCssStateChange(${1:previous: any}, ${2:any: any})"],
    ["_propagateInheritableProperties(view: View): any\tClass LayoutBase", "_propagateInheritableProperties(${1:view: View})"],
    ["_propagateInheritableProperties(view: View): any\tClass ListPicker", "_propagateInheritableProperties(${1:view: View})"],
    ["action(options: ActionOptions): Promise<string>\tModule ui/dialogs", "action(${1:options: ActionOptions})"],
    ["_propagateInheritableProperties(view: View): any\tClass TimePicker", "_propagateInheritableProperties(${1:view: View})"],
    ["_propagateInheritableProperties(view: View): any\tClass DatePicker", "_propagateInheritableProperties(${1:view: View})"],
    ["_onStylePropertyChanged(property: Property): void\tClass ActionBar", "_onStylePropertyChanged(${1:property: Property})"],
    ["animate(options: AnimationDefinition): AnimationPromise\tClass TextField", "animate(${1:options: AnimationDefinition})"],
    ["getImage(options: HttpRequestOptions): Promise<ImageSource>\tModule http", "getImage(${1:options: HttpRequestOptions})"],
    ["setColumnSpan(view: View, value: number): void\tClass GridLayout", "setColumnSpan(${1:view: View}, ${2:value: number})"],
    ["_onStylePropertyChanged(property: Property): void\tClass SearchBar", "_onStylePropertyChanged(${1:property: Property})"],
    ["animate(options: AnimationDefinition): AnimationPromise\tClass SearchBar", "animate(${1:options: AnimationDefinition})"],
    ["animate(options: AnimationDefinition): AnimationPromise\tClass HtmlView", "animate(${1:options: AnimationDefinition})"],
    ["_removeViewFromNativeVisualTree(view: View): void\tClass HtmlView", "_removeViewFromNativeVisualTree(${1:view: View})"],
    ["animate(options: AnimationDefinition): AnimationPromise\tClass ListView", "animate(${1:options: AnimationDefinition})"],
    ["_onStylePropertyChanged(property: Property): void\tClass TextBase", "_onStylePropertyChanged(${1:property: Property})"],
    ["_onCssStateChange(previous: any, any: any): any\tClass Layout", "_onCssStateChange(${1:previous: any}, ${2:any: any})"],
    ["_removeViewFromNativeVisualTree(view: View): void\tClass ListView", "_removeViewFromNativeVisualTree(${1:view: View})"],
    ["animate(options: AnimationDefinition): AnimationPromise\tClass Progress", "animate(${1:options: AnimationDefinition})"],
    ["animate(options: AnimationDefinition): AnimationPromise\tClass Repeater", "animate(${1:options: AnimationDefinition})"],
    ["backgroundPositionProperty: Property\tModule ui/styling/style", "backgroundPositionProperty"],
    ["animate(options: AnimationDefinition): AnimationPromise\tClass TextView", "animate(${1:options: AnimationDefinition})"],
    ["_onDetached(force?: boolean): void\tClass ProxyViewContainer", "_onDetached(${1:force?: boolean})"],
    ["_onCssStateChange(previous: any, any: any): any\tClass Button", "_onCssStateChange(${1:previous: any}, ${2:any: any})"],
    ["_onCssStateChange(previous: any, any: any): any\tClass Switch", "_onCssStateChange(${1:previous: any}, ${2:any: any})"],
    ["_eachSetPropertyValue(callback: function): void\tClass SegmentedBar", "_eachSetPropertyValue(${1:callback: function})"],
    ["_removeViewFromNativeVisualTree(view: View): void\tClass TextView", "_removeViewFromNativeVisualTree(${1:view: View})"],
    ["log(message: any, ...formatParams: any[]): void\tClass Console", "log(${1:message: any}, ${2:...formatParams: any[]})"],
    ["defaultValueGetter: function(instance: DependencyObservable): NativeValueResult\tClass Property", "defaultValueGetter"],
    ["_propagateInheritableProperties(view: View): any\tClass TextField", "_propagateInheritableProperties(${1:view: View})"],
    ["_onStylePropertyChanged(property: Property): void\tClass Repeater", "_onStylePropertyChanged(${1:property: Property})"],
    ["_onCssStateChange(previous: any, any: any): any\tClass Border", "_onCssStateChange(${1:previous: any}, ${2:any: any})"],
    ["_removeViewFromNativeVisualTree(view: View): void\tClass Repeater", "_removeViewFromNativeVisualTree(${1:view: View})"],
    ["request(options: HttpRequestOptions): Promise<HttpResponse>\tModule http", "request(${1:options: HttpRequestOptions})"],
    ["defaultValueGetter: function(instance: DependencyObservable): NativeValueResult\tClass Property", "defaultValueGetter"],
    ["_removeViewFromNativeVisualTree(view: View): void\tClass Progress", "_removeViewFromNativeVisualTree(${1:view: View})"],
    ["_propagateInheritableProperties(view: View): any\tClass SearchBar", "_propagateInheritableProperties(${1:view: View})"],
    ["getLocationRelativeTo(otherView: View): Point\tClass ActivityIndicator", "getLocationRelativeTo(${1:otherView: View})"],
    ["nativeLayoutParamsProperty: Property\tModule ui/styling/style", "nativeLayoutParamsProperty"],
    ["defaultValueGetter: function(instance: DependencyObservable): NativeValueResult\tClass Property", "defaultValueGetter"],
    ["_onStylePropertyChanged(property: Property): void\tClass ListView", "_onStylePropertyChanged(${1:property: Property})"],
    ["_propagateInheritableProperties(view: View): any\tClass ActionBar", "_propagateInheritableProperties(${1:view: View})"],
    ["_onStylePropertyChanged(property: Property): void\tClass HtmlView", "_onStylePropertyChanged(${1:property: Property})"],
    ["_onStylePropertyChanged(property: Property): void\tClass TextView", "_onStylePropertyChanged(${1:property: Property})"],
    ["animate(options: AnimationDefinition): AnimationPromise\tClass TextBase", "animate(${1:options: AnimationDefinition})"],
    ["backgroundInternalProperty: Property\tModule ui/styling/style", "backgroundInternalProperty"],
    ["onUncaughtError(error: NativeScriptError): void\tModule application", "onUncaughtError(${1:error: NativeScriptError})"],
    ["_onStylePropertyChanged(property: Property): void\tClass Progress", "_onStylePropertyChanged(${1:property: Property})"],
    ["_removeViewFromNativeVisualTree(view: View): void\tClass TextBase", "_removeViewFromNativeVisualTree(${1:view: View})"],
    ["_onCssStateChange(previous: any, any: any): any\tClass Slider", "_onCssStateChange(${1:previous: any}, ${2:any: any})"],
    ["getLocationRelativeTo(otherView: View): Point\tClass CustomLayoutView", "getLocationRelativeTo(${1:otherView: View})"],
    ["fromObjectRecursive(obj: any): Observable\tModule data/observable", "fromObjectRecursive(${1:obj: any})"],
    ["animate(options: AnimationDefinition): AnimationPromise\tClass WebView", "animate(${1:options: AnimationDefinition})"],
    ["_eachSetPropertyValue(callback: function): void\tClass Placeholder", "_eachSetPropertyValue(${1:callback: function})"],
    ["_onStylePropertyChanged(property: Property): void\tClass WebView", "_onStylePropertyChanged(${1:property: Property})"],
    ["_removeViewFromNativeVisualTree(view: View): void\tClass WebView", "_removeViewFromNativeVisualTree(${1:view: View})"],
    ["_onCssStateChange(previous: any, any: any): any\tClass Label", "_onCssStateChange(${1:previous: any}, ${2:any: any})"],
    ["_eachSetPropertyValue(callback: function): void\tClass StackLayout", "_eachSetPropertyValue(${1:callback: function})"],
    ["_propagateInheritableProperties(view: View): any\tClass HtmlView", "_propagateInheritableProperties(${1:view: View})"],
    ["_onStylePropertyChanged(property: Property): void\tClass TabView", "_onStylePropertyChanged(${1:property: Property})"],
    ["_eachSetPropertyValue(callback: function): void\tClass ProxyObject", "_eachSetPropertyValue(${1:callback: function})"],
    ["insertChild(child: View, atIndex: number): void\tClass Layout", "insertChild(${1:child: View}, ${2:atIndex: number})"],
    ["removeEventListener(listener: EventListener): any\tModule trace", "removeEventListener(${1:listener: EventListener})"],
    ["getLocationRelativeTo(otherView: View): Point\tClass EditableTextBase", "getLocationRelativeTo(${1:otherView: View})"],
    ["_propagateInheritableProperties(view: View): any\tClass Repeater", "_propagateInheritableProperties(${1:view: View})"],
    ["_onDetached(force?: boolean): void\tClass ActivityIndicator", "_onDetached(${1:force?: boolean})"],
    ["_eachSetPropertyValue(callback: function): void\tClass TabViewItem", "_eachSetPropertyValue(${1:callback: function})"],
    ["_propagateInheritableProperties(view: View): any\tClass TextBase", "_propagateInheritableProperties(${1:view: View})"],
    ["animate(options: AnimationDefinition): AnimationPromise\tClass TabView", "animate(${1:options: AnimationDefinition})"],
    ["_propagateInheritableProperties(view: View): any\tClass ListView", "_propagateInheritableProperties(${1:view: View})"],
    ["_onCssStateChange(previous: any, any: any): any\tClass Image", "_onCssStateChange(${1:previous: any}, ${2:any: any})"],
    ["_propagateInheritableProperties(view: View): any\tClass TextView", "_propagateInheritableProperties(${1:view: View})"],
    ["_removeViewFromNativeVisualTree(view: View): void\tClass TabView", "_removeViewFromNativeVisualTree(${1:view: View})"],
    ["_onCssStateChange(previous: any, any: any): any\tClass Frame", "_onCssStateChange(${1:previous: any}, ${2:any: any})"],
    ["_resolveAnimationCurve(curve: any): any\tModule ui/animation", "_resolveAnimationCurve(${1:curve: any})"],
    ["_eachSetPropertyValue(callback: function): void\tClass ContentView", "_eachSetPropertyValue(${1:callback: function})"],
    ["_propagateInheritableProperties(view: View): any\tClass Progress", "_propagateInheritableProperties(${1:view: View})"],
    ["_onStylePropertyChanged(property: Property): void\tClass Slider", "_onStylePropertyChanged(${1:property: Property})"],
    ["_onCssStateChange(previous: any, any: any): any\tClass Page", "_onCssStateChange(${1:previous: any}, ${2:any: any})"],
    ["_onStylePropertyChanged(property: Property): void\tClass Switch", "_onStylePropertyChanged(${1:property: Property})"],
    ["_eachSetProperty(callback: function): void\tClass DependencyObservable", "_eachSetProperty(${1:callback: function})"],
    ["_onDetached(force?: boolean): void\tClass CustomLayoutView", "_onDetached(${1:force?: boolean})"],
    ["_eachSetPropertyValue(callback: function): void\tClass ScrollView", "_eachSetPropertyValue(${1:callback: function})"],
    ["_eachSetPropertyValue(callback: function): void\tClass DatePicker", "_eachSetPropertyValue(${1:callback: function})"],
    ["animate(options: AnimationDefinition): AnimationPromise\tClass Border", "animate(${1:options: AnimationDefinition})"],
    ["_onCssStateChange(previous: any, any: any): any\tClass View", "_onCssStateChange(${1:previous: any}, ${2:any: any})"],
    ["_propagateInheritableProperties(view: View): any\tClass TabView", "_propagateInheritableProperties(${1:view: View})"],
    ["_removeViewFromNativeVisualTree(view: View): void\tClass Switch", "_removeViewFromNativeVisualTree(${1:view: View})"],
    ["getString(options: HttpRequestOptions): Promise<string>\tModule http", "getString(${1:options: HttpRequestOptions})"],
    ["setActivityCallbacks(activity: any): void\tModule ui/frame", "setActivityCallbacks(${1:activity: any})"],
    ["_onStylePropertyChanged(property: Property): void\tClass Border", "_onStylePropertyChanged(${1:property: Property})"],
    ["_eachSetPropertyValue(callback: function): void\tClass WrapLayout", "_eachSetPropertyValue(${1:callback: function})"],
    ["_removeViewFromNativeVisualTree(view: View): void\tClass Border", "_removeViewFromNativeVisualTree(${1:view: View})"],
    ["getValidIndex(index?: number): number\tClass SegmentedBar", "getValidIndex(${1:index?: number})"],
    ["_getValueSource(property: Property): number\tClass DependencyObservable", "_getValueSource(${1:property: Property})"],
    ["_propagateInheritableProperties(view: View): any\tClass WebView", "_propagateInheritableProperties(${1:view: View})"],
    ["animate(options: AnimationDefinition): AnimationPromise\tClass Slider", "animate(${1:options: AnimationDefinition})"],
    ["animate(options: AnimationDefinition): AnimationPromise\tClass Layout", "animate(${1:options: AnimationDefinition})"],
    ["_eachSetPropertyValue(callback: function): void\tClass LayoutBase", "_eachSetPropertyValue(${1:callback: function})"],
    ["_removeViewFromNativeVisualTree(view: View): void\tClass Layout", "_removeViewFromNativeVisualTree(${1:view: View})"],
    ["animate(options: AnimationDefinition): AnimationPromise\tClass Switch", "animate(${1:options: AnimationDefinition})"],
    ["_eachSetPropertyValue(callback: function): void\tClass GridLayout", "_eachSetPropertyValue(${1:callback: function})"],
    ["animate(options: AnimationDefinition): AnimationPromise\tClass Button", "animate(${1:options: AnimationDefinition})"],
    ["updateSpanModifiers(parent: FormattedString): void\tClass Span", "updateSpanModifiers(${1:parent: FormattedString})"],
    ["setFragmentCallbacks(fragment: any): void\tModule ui/frame", "setFragmentCallbacks(${1:fragment: any})"],
    ["_eachSetPropertyValue(callback: function): void\tClass TimePicker", "_eachSetPropertyValue(${1:callback: function})"],
    ["_eachSetPropertyValue(callback: function): void\tClass DockLayout", "_eachSetPropertyValue(${1:callback: function})"],
    ["_eachSetPropertyValue(callback: function): void\tClass ListPicker", "_eachSetPropertyValue(${1:callback: function})"],
    ["_onStylePropertyChanged(property: Property): void\tClass Button", "_onStylePropertyChanged(${1:property: Property})"],
    ["_onStylePropertyChanged(property: Property): void\tClass Layout", "_onStylePropertyChanged(${1:property: Property})"],
    ["_removeViewFromNativeVisualTree(view: View): void\tClass Button", "_removeViewFromNativeVisualTree(${1:view: View})"],
    ["verticalAlignmentProperty: Property\tModule ui/styling/style", "verticalAlignmentProperty"],
    ["_eachSetPropertyValue(callback: function): void\tClass ActionItem", "_eachSetPropertyValue(${1:callback: function})"],
    ["_removeViewFromNativeVisualTree(view: View): void\tClass Slider", "_removeViewFromNativeVisualTree(${1:view: View})"],
    ["_onDetached(force?: boolean): void\tClass EditableTextBase", "_onDetached(${1:force?: boolean})"],
    ["_propagateInheritableProperties(view: View): any\tClass Button", "_propagateInheritableProperties(${1:view: View})"],
    ["_onStylePropertyChanged(property: Property): void\tClass Image", "_onStylePropertyChanged(${1:property: Property})"],
    ["_eachSetPropertyValue(callback: function): void\tClass ActionBar", "_eachSetPropertyValue(${1:callback: function})"],
    ["_removeViewFromNativeVisualTree(view: View): void\tClass Frame", "_removeViewFromNativeVisualTree(${1:view: View})"],
    ["getAnimations(ruleset: RuleSet): KeyframeAnimationInfo[]\tClass StyleScope", "getAnimations(${1:ruleset: RuleSet})"],
    ["animate(options: AnimationDefinition): AnimationPromise\tClass Label", "animate(${1:options: AnimationDefinition})"],
    ["_onStylePropertyChanged(property: Property): void\tClass Frame", "_onStylePropertyChanged(${1:property: Property})"],
    ["_eachSetPropertyValue(callback: function): void\tClass SearchBar", "_eachSetPropertyValue(${1:callback: function})"],
    ["_removeViewFromNativeVisualTree(view: View): void\tClass Label", "_removeViewFromNativeVisualTree(${1:view: View})"],
    ["_propagateInheritableProperties(view: View): any\tClass Slider", "_propagateInheritableProperties(${1:view: View})"],
    ["_eachSetPropertyValue(callback: function): void\tClass TextField", "_eachSetPropertyValue(${1:callback: function})"],
    ["animate(options: AnimationDefinition): AnimationPromise\tClass Frame", "animate(${1:options: AnimationDefinition})"],
    ["_removeViewFromNativeVisualTree(view: View): void\tClass Image", "_removeViewFromNativeVisualTree(${1:view: View})"],
    ["_onStylePropertyChanged(property: Property): void\tClass Label", "_onStylePropertyChanged(${1:property: Property})"],
    ["_propagateInheritableProperties(view: View): any\tClass Layout", "_propagateInheritableProperties(${1:view: View})"],
    ["start(entry?: NavigationEntry): any\tModule application", "start(${1:entry?: NavigationEntry})"],
    ["_propagateInheritableProperties(view: View): any\tClass Switch", "_propagateInheritableProperties(${1:view: View})"],
    ["getLocationRelativeTo(otherView: View): Point\tClass AbsoluteLayout", "getLocationRelativeTo(${1:otherView: View})"],
    ["_propagateInheritableProperties(view: View): any\tClass Border", "_propagateInheritableProperties(${1:view: View})"],
    ["animate(options: AnimationDefinition): AnimationPromise\tClass Image", "animate(${1:options: AnimationDefinition})"],
    ["_eachSetPropertyValue(callback: function): void\tClass Bindable", "_eachSetPropertyValue(${1:callback: function})"],
    ["backgroundRepeatProperty: Property\tModule ui/styling/style", "backgroundRepeatProperty"],
    ["_propagateInheritableProperties(view: View): any\tClass Image", "_propagateInheritableProperties(${1:view: View})"],
    ["_propagateInheritableProperties(view: View): any\tClass Frame", "_propagateInheritableProperties(${1:view: View})"],
    ["onNavigatingFrom(isBackNavigation: boolean): void\tClass Page", "onNavigatingFrom(${1:isBackNavigation: boolean})"],
    ["_eachSetPropertyValue(callback: function): void\tClass Repeater", "_eachSetPropertyValue(${1:callback: function})"],
    ["getExpression(expression: string): Expression\tClass PolymerExpressions", "getExpression(${1:expression: string})"],
    ["_eachSetProperty(callback: function): void\tClass ProxyViewContainer", "_eachSetProperty(${1:callback: function})"],
    ["_onDetached(force?: boolean): void\tClass AbsoluteLayout", "_onDetached(${1:force?: boolean})"],
    ["_eachSetPropertyValue(callback: function): void\tClass TextBase", "_eachSetPropertyValue(${1:callback: function})"],
    ["placeholderColorProperty: Property\tModule ui/styling/style", "placeholderColorProperty"],
    ["_eachSetPropertyValue(callback: function): void\tClass Progress", "_eachSetPropertyValue(${1:callback: function})"],
    ["_propagateInheritableProperties(view: View): any\tClass Label", "_propagateInheritableProperties(${1:view: View})"],
    ["_onStylePropertyChanged(property: Property): void\tClass Page", "_onStylePropertyChanged(${1:property: Property})"],
    ["animate(options: AnimationDefinition): AnimationPromise\tClass Page", "animate(${1:options: AnimationDefinition})"],
    ["_removeViewFromNativeVisualTree(view: View): void\tClass Page", "_removeViewFromNativeVisualTree(${1:view: View})"],
    ["_getValueSource(property: Property): number\tClass ProxyViewContainer", "_getValueSource(${1:property: Property})"],
    ["_eachSetPropertyValue(callback: function): void\tClass TextView", "_eachSetPropertyValue(${1:callback: function})"],
    ["animate(options: AnimationDefinition): AnimationPromise\tClass View", "animate(${1:options: AnimationDefinition})"],
    ["_eachSetPropertyValue(callback: function): void\tClass HtmlView", "_eachSetPropertyValue(${1:callback: function})"],
    ["_removeViewFromNativeVisualTree(view: View): void\tClass View", "_removeViewFromNativeVisualTree(${1:view: View})"],
    ["_eachSetPropertyValue(callback: function): void\tClass ListView", "_eachSetPropertyValue(${1:callback: function})"],
    ["_onStylePropertyChanged(property: Property): void\tClass View", "_onStylePropertyChanged(${1:property: Property})"],
    ["readText(encoding?: string): Promise<string>\tClass File", "readText(${1:encoding?: string})"],
    ["_eachSetPropertyValue(callback: function): void\tClass TabView", "_eachSetPropertyValue(${1:callback: function})"],
    ["setRowSpan(view: View, value: number): void\tClass GridLayout", "setRowSpan(${1:view: View}, ${2:value: number})"],
    ["_propagateInheritableProperties(view: View): any\tClass View", "_propagateInheritableProperties(${1:view: View})"],
    ["_eachSetProperty(callback: function): void\tClass ActivityIndicator", "_eachSetProperty(${1:callback: function})"],
    ["getJSON<T>(options: HttpRequestOptions): Promise<T>\tModule http", "getJSON<T>(${1:options: HttpRequestOptions})"],
    ["_eachSetPropertyValue(callback: function): void\tClass WebView", "_eachSetPropertyValue(${1:callback: function})"],
    ["_inheritProperties(parentView: View): any\tClass ProxyViewContainer", "_inheritProperties(${1:parentView: View})"],
    ["getLocationRelativeTo(otherView: View): Point\tClass SegmentedBar", "getLocationRelativeTo(${1:otherView: View})"],
    ["onSaveActivityState: function(activity: any, bundle: any): void\tClass AndroidApplication", "onSaveActivityState"],
    ["_propagateInheritableProperties(view: View): any\tClass Page", "_propagateInheritableProperties(${1:view: View})"],
    ["sort(compareFn?: function): T[]\tClass ObservableArray<T>", "sort(${1:compareFn?: function})"],
    ["_getValueSource(property: Property): number\tClass ActivityIndicator", "_getValueSource(${1:property: Property})"],
    ["alert(options: AlertOptions): Promise<void>\tModule ui/dialogs", "alert(${1:options: AlertOptions})"],
    ["_eachSetPropertyValue(callback: function): void\tClass Layout", "_eachSetPropertyValue(${1:callback: function})"],
    ["backgroundImageProperty: Property\tModule ui/styling/style", "backgroundImageProperty"],
    ["_onDetached(force?: boolean): void\tClass SegmentedBar", "_onDetached(${1:force?: boolean})"],
    ["join(separator?: string): string\tClass ObservableArray<T>", "join(${1:separator?: string})"],
    ["_eachLayoutView(callback: function): void\tClass ProxyViewContainer", "_eachLayoutView(${1:callback: function})"],
    ["backgroundColorProperty: Property\tModule ui/styling/style", "backgroundColorProperty"],
    ["_getValueSource(property: Property): number\tClass CustomLayoutView", "_getValueSource(${1:property: Property})"],
    ["getLocationRelativeTo(otherView: View): Point\tClass ContentView", "getLocationRelativeTo(${1:otherView: View})"],
    ["_eachSetProperty(callback: function): void\tClass CustomLayoutView", "_eachSetProperty(${1:callback: function})"],
    ["_getValueSource(property: Property): number\tClass SegmentedBarItem", "_getValueSource(${1:property: Property})"],
    ["getLocationRelativeTo(otherView: View): Point\tClass Placeholder", "getLocationRelativeTo(${1:otherView: View})"],
    ["_eachSetProperty(callback: function): void\tClass SegmentedBarItem", "_eachSetProperty(${1:callback: function})"],
    ["_unregisterLayoutChild(child: View): void\tClass ProxyViewContainer", "_unregisterLayoutChild(${1:child: View})"],
    ["isUserInteractionEnabledProperty: Property\tClass ProxyViewContainer", "Static isUserInteractionEnabledProperty"],
    ["_inheritProperties(parentView: View): any\tClass ActivityIndicator", "_inheritProperties(${1:parentView: View})"],
    ["_eachSetProperty(callback: function): void\tClass EditableTextBase", "_eachSetProperty(${1:callback: function})"],
    ["_eachSetProperty(callback: function): void\tClass NavigationButton", "_eachSetProperty(${1:callback: function})"],
    ["_eachSetPropertyValue(callback: function): void\tClass Border", "_eachSetPropertyValue(${1:callback: function})"],
    ["_eachSetPropertyValue(callback: function): void\tClass Button", "_eachSetPropertyValue(${1:callback: function})"],
    ["getBaseClasses(object: any): Array<string>\tModule utils/types", "getBaseClasses(${1:object: any})"],
    ["on(event: tap, callback: function): any\tClass NavigationButton", "on(${1:event: tap}, ${2:callback: function})"],
    ["_eachSetPropertyValue(callback: function): void\tClass Slider", "_eachSetPropertyValue(${1:callback: function})"],
    ["getLocationRelativeTo(otherView: View): Point\tClass StackLayout", "getLocationRelativeTo(${1:otherView: View})"],
    ["_getValueSource(property: Property): number\tClass NavigationButton", "_getValueSource(${1:property: Property})"],
    ["_eachSetPropertyValue(callback: function): void\tClass Switch", "_eachSetPropertyValue(${1:callback: function})"],
    ["onNavigatedFrom(isBackNavigation: boolean): void\tClass Page", "onNavigatedFrom(${1:isBackNavigation: boolean})"],
    ["getKnownColor(name: string): string\tModule color/known-colors", "getKnownColor(${1:name: string})"],
    ["_getValueSource(property: Property): number\tClass EditableTextBase", "_getValueSource(${1:property: Property})"],
    ["eachLayoutChild(callback: function): void\tClass ProxyViewContainer", "eachLayoutChild(${1:callback: function})"],
    ["getLocationRelativeTo(otherView: View): Point\tClass DockLayout", "getLocationRelativeTo(${1:otherView: View})"],
    ["_setCore(data: PropertyChangeData): any\tClass DependencyObservable", "_setCore(${1:data: PropertyChangeData})"],
    ["_inheritProperties(parentView: View): any\tClass CustomLayoutView", "_inheritProperties(${1:parentView: View})"],
    ["_eachSetPropertyValue(callback: function): void\tClass Frame", "_eachSetPropertyValue(${1:callback: function})"],
    ["_onDetached(force?: boolean): void\tClass Placeholder", "_onDetached(${1:force?: boolean})"],
    ["_eachSetPropertyValue(callback: function): void\tClass Image", "_eachSetPropertyValue(${1:callback: function})"],
    ["_inheritProperties(parentView: View): any\tClass EditableTextBase", "_inheritProperties(${1:parentView: View})"],
    ["_eachSetPropertyValue(callback: function): void\tClass Label", "_eachSetPropertyValue(${1:callback: function})"],
    ["setColumn(view: View, value: number): void\tClass GridLayout", "setColumn(${1:view: View}, ${2:value: number})"],
    ["_onDetached(force?: boolean): void\tClass StackLayout", "_onDetached(${1:force?: boolean})"],
    ["isUserInteractionEnabledProperty: Property\tClass ActivityIndicator", "Static isUserInteractionEnabledProperty"],
    ["getLocationRelativeTo(otherView: View): Point\tClass LayoutBase", "getLocationRelativeTo(${1:otherView: View})"],
    ["getLocationRelativeTo(otherView: View): Point\tClass ScrollView", "getLocationRelativeTo(${1:otherView: View})"],
    ["getLocationRelativeTo(otherView: View): Point\tClass DatePicker", "getLocationRelativeTo(${1:otherView: View})"],
    ["setLeft(view: View, value: number): void\tClass AbsoluteLayout", "setLeft(${1:view: View}, ${2:value: number})"],
    ["loadCss(cssFile?: string): RuleSet[]\tModule application", "loadCss(${1:cssFile?: string})"],
    ["_eachSetPropertyValue(callback: function): void\tClass Style", "_eachSetPropertyValue(${1:callback: function})"],
    ["getLocationRelativeTo(otherView: View): Point\tClass TimePicker", "getLocationRelativeTo(${1:otherView: View})"],
    ["getLocationRelativeTo(otherView: View): Point\tClass WrapLayout", "getLocationRelativeTo(${1:otherView: View})"],
    ["getLocationRelativeTo(otherView: View): Point\tClass ListPicker", "getLocationRelativeTo(${1:otherView: View})"],
    ["setItem(index: number, value: T): void\tClass ObservableArray<T>", "setItem(${1:index: number}, ${2:value: T})"],
    ["_eachSetPropertyValue(callback: function): void\tClass Style", "_eachSetPropertyValue(${1:callback: function})"],
    ["addEventListener(listener: EventListener): any\tModule trace", "addEventListener(${1:listener: EventListener})"],
    ["getLocationRelativeTo(otherView: View): Point\tClass GridLayout", "getLocationRelativeTo(${1:otherView: View})"],
    ["_eachLayoutView(callback: function): void\tClass ActivityIndicator", "_eachLayoutView(${1:callback: function})"],
    ["_onDetached(force?: boolean): void\tClass ContentView", "_onDetached(${1:force?: boolean})"],
    ["_resetValues(valueSource: number): void\tClass DependencyObservable", "_resetValues(${1:valueSource: number})"],
    ["_onDetached(force?: boolean): void\tClass GridLayout", "_onDetached(${1:force?: boolean})"],
    ["getLocationRelativeTo(otherView: View): Point\tClass TextField", "getLocationRelativeTo(${1:otherView: View})"],
    ["isNullOrUndefined(value: any): boolean\tModule utils/types", "isNullOrUndefined(${1:value: any})"],
    ["_onDetached(force?: boolean): void\tClass LayoutBase", "_onDetached(${1:force?: boolean})"],
    ["_eachSetPropertyValue(callback: function): void\tClass Page", "_eachSetPropertyValue(${1:callback: function})"],
    ["_eachSetProperty(callback: function): void\tClass AbsoluteLayout", "_eachSetProperty(${1:callback: function})"],
    ["_eachSetPropertyValue(callback: function): void\tClass Span", "_eachSetPropertyValue(${1:callback: function})"],
    ["_eachLayoutView(callback: function): void\tClass EditableTextBase", "_eachLayoutView(${1:callback: function})"],
    ["_getValueSource(property: Property): number\tClass AbsoluteLayout", "_getValueSource(${1:property: Property})"],
    ["isUserInteractionEnabledProperty: Property\tClass EditableTextBase", "Static isUserInteractionEnabledProperty"],
    ["_onDetached(force?: boolean): void\tClass ScrollView", "_onDetached(${1:force?: boolean})"],
    ["getLocationRelativeTo(otherView: View): Point\tClass ActionBar", "getLocationRelativeTo(${1:otherView: View})"],
    ["_onDetached(force?: boolean): void\tClass DatePicker", "_onDetached(${1:force?: boolean})"],
    ["textDecorationProperty: Property\tModule ui/styling/style", "textDecorationProperty"],
    ["_onDetached(force?: boolean): void\tClass DockLayout", "_onDetached(${1:force?: boolean})"],
    ["getClassInfo(object: Object): ClassInfo\tModule utils/types", "getClassInfo(${1:object: Object})"],
    ["getLocationRelativeTo(otherView: View): Point\tClass SearchBar", "getLocationRelativeTo(${1:otherView: View})"],
    ["nativePaddingsProperty: Property\tModule ui/styling/style", "nativePaddingsProperty"],
    ["_eachSetPropertyValue(callback: function): void\tClass View", "_eachSetPropertyValue(${1:callback: function})"],
    ["_onDetached(force?: boolean): void\tClass TimePicker", "_onDetached(${1:force?: boolean})"],
    ["_onDetached(force?: boolean): void\tClass ListPicker", "_onDetached(${1:force?: boolean})"],
    ["removeSync(onError?: function): void\tClass Folder", "removeSync(${1:onError?: function})"],
    ["backgroundSizeProperty: Property\tModule ui/styling/style", "backgroundSizeProperty"],
    ["_eachLayoutView(callback: function): void\tClass CustomLayoutView", "_eachLayoutView(${1:callback: function})"],
    ["_onDetached(force?: boolean): void\tClass WrapLayout", "_onDetached(${1:force?: boolean})"],
    ["isUserInteractionEnabledProperty: Property\tClass CustomLayoutView", "Static isUserInteractionEnabledProperty"],
    ["_setCore(data: PropertyChangeData): any\tClass ProxyViewContainer", "_setCore(${1:data: PropertyChangeData})"],
    ["getLocationRelativeTo(otherView: View): Point\tClass TextView", "getLocationRelativeTo(${1:otherView: View})"],
    ["isKnownName(name: string): boolean\tModule color/known-colors", "isKnownName(${1:name: string})"],
    ["equals(value1: Color, value2: Color): boolean\tClass Color", "equals(${1:value1: Color}, ${2:value2: Color})"],
    ["getLocationRelativeTo(otherView: View): Point\tClass ListView", "getLocationRelativeTo(${1:otherView: View})"],
    ["_setCore(data: PropertyChangeData): any\tClass AndroidApplication", "_setCore(${1:data: PropertyChangeData})"],
    ["_onDetached(force?: boolean): void\tClass SearchBar", "_onDetached(${1:force?: boolean})"],
    ["onActivityCreated: function(activity: any, bundle: any): void\tClass AndroidApplication", "onActivityCreated"],
    ["_eachChildView(callback: function): any\tClass ProxyViewContainer", "_eachChildView(${1:callback: function})"],
    ["_onDetached(force?: boolean): void\tClass ActionBar", "_onDetached(${1:force?: boolean})"],
    ["hasListeners(eventName: string): boolean\tClass DependencyObservable", "hasListeners(${1:eventName: string})"],
    ["getLocationRelativeTo(otherView: View): Point\tClass TextBase", "getLocationRelativeTo(${1:otherView: View})"],
    ["getLocationRelativeTo(otherView: View): Point\tClass Progress", "getLocationRelativeTo(${1:otherView: View})"],
    ["_setCore(data: PropertyChangeData): any\tClass ObservableArray<T>", "_setCore(${1:data: PropertyChangeData})"],
    ["_onDetached(force?: boolean): void\tClass TextField", "_onDetached(${1:force?: boolean})"],
    ["_inheritProperties(parentView: View): any\tClass AbsoluteLayout", "_inheritProperties(${1:parentView: View})"],
    ["getLocationRelativeTo(otherView: View): Point\tClass HtmlView", "getLocationRelativeTo(${1:otherView: View})"],
    ["getLocationRelativeTo(otherView: View): Point\tClass Repeater", "getLocationRelativeTo(${1:otherView: View})"],
    ["setTop(view: View, value: number): void\tClass AbsoluteLayout", "setTop(${1:view: View}, ${2:value: number})"],
    ["_getValueSource(property: Property): number\tClass SegmentedBar", "_getValueSource(${1:property: Property})"],
    ["textAlignmentProperty: Property\tModule ui/styling/style", "textAlignmentProperty"],
    ["_registerLayoutChild(child: View): void\tClass ProxyViewContainer", "_registerLayoutChild(${1:child: View})"],
    ["_resetValues(valueSource: number): void\tClass ProxyViewContainer", "_resetValues(${1:valueSource: number})"],
    ["_eachSetProperty(callback: function): void\tClass SegmentedBar", "_eachSetProperty(${1:callback: function})"],
    ["_eachLayoutView(callback: function): void\tClass AbsoluteLayout", "_eachLayoutView(${1:callback: function})"],
    ["_onDetached(force?: boolean): void\tClass HtmlView", "_onDetached(${1:force?: boolean})"],
    ["_onDetached(force?: boolean): void\tClass TextBase", "_onDetached(${1:force?: boolean})"],
    ["eachLayoutChild(callback: function): void\tClass AbsoluteLayout", "eachLayoutChild(${1:callback: function})"],
    ["isUserInteractionEnabledProperty: Property\tClass AbsoluteLayout", "Static isUserInteractionEnabledProperty"],
    ["_unregisterLayoutChild(child: View): void\tClass AbsoluteLayout", "_unregisterLayoutChild(${1:child: View})"],
    ["textTransformProperty: Property\tModule ui/styling/style", "textTransformProperty"],
    ["paddingBottomProperty: Property\tModule ui/styling/style", "paddingBottomProperty"],
    ["activityRequestPermissionsEvent: string\tClass AndroidApplication", "Static activityRequestPermissionsEvent"],
    ["letterSpacingProperty: Property\tModule ui/styling/style", "letterSpacingProperty"],
    ["_eachChildView(callback: function): any\tClass ActivityIndicator", "_eachChildView(${1:callback: function})"],
    ["_setCore(data: PropertyChangeData): any\tClass ActivityIndicator", "_setCore(${1:data: PropertyChangeData})"],
    ["_onDetached(force?: boolean): void\tClass TextView", "_onDetached(${1:force?: boolean})"],
    ["_onDetached(force?: boolean): void\tClass ListView", "_onDetached(${1:force?: boolean})"],
    ["isFileOrResourcePath(path: string): boolean\tModule image-source", "isFileOrResourcePath(${1:path: string})"],
    ["setItem(index: number, value: T): void\tClass VirtualArray<T>", "setItem(${1:index: number}, ${2:value: T})"],
    ["onNavigatedTo(isBackNavigation: boolean): void\tClass Page", "onNavigatedTo(${1:isBackNavigation: boolean})"],
    ["getLocationRelativeTo(otherView: View): Point\tClass WebView", "getLocationRelativeTo(${1:otherView: View})"],
    ["confirm(message: string): Promise<boolean>\tModule ui/dialogs", "confirm(${1:message: string})"],
    ["_onDetached(force?: boolean): void\tClass Repeater", "_onDetached(${1:force?: boolean})"],
    ["getLocationRelativeTo(otherView: View): Point\tClass TabView", "getLocationRelativeTo(${1:otherView: View})"],
    ["fromFileOrResource(path: string): ImageSource\tModule image-source", "fromFileOrResource(${1:path: string})"],
    ["removeSync(onError?: function): void\tClass File", "removeSync(${1:onError?: function})"],
    ["clearSync(onError?: function): void\tClass Folder", "clearSync(${1:onError?: function})"],
    ["_onDetached(force?: boolean): void\tClass Progress", "_onDetached(${1:force?: boolean})"],
    ["_setCore(data: PropertyChangeData): any\tClass EditableTextBase", "_setCore(${1:data: PropertyChangeData})"],
    ["hasListeners(eventName: string): boolean\tClass ObservableArray<T>", "hasListeners(${1:eventName: string})"],
    ["_eachSetProperty(callback: function): void\tClass ContentView", "_eachSetProperty(${1:callback: function})"],
    ["getLocationRelativeTo(otherView: View): Point\tClass Layout", "getLocationRelativeTo(${1:otherView: View})"],
    ["_getValueSource(property: Property): number\tClass ContentView", "_getValueSource(${1:property: Property})"],
    ["_eachSetProperty(callback: function): void\tClass StackLayout", "_eachSetProperty(${1:callback: function})"],
    ["_eachChildView(callback: function): any\tClass CustomLayoutView", "_eachChildView(${1:callback: function})"],
    ["_getValueSource(property: Property): number\tClass StackLayout", "_getValueSource(${1:property: Property})"],
    ["_getValueSource(property: Property): number\tClass TabViewItem", "_getValueSource(${1:property: Property})"],
    ["_eachSetProperty(callback: function): void\tClass TabViewItem", "_eachSetProperty(${1:callback: function})"],
    ["getLocationRelativeTo(otherView: View): Point\tClass Slider", "getLocationRelativeTo(${1:otherView: View})"],
    ["_setCore(data: PropertyChangeData): any\tClass CustomLayoutView", "_setCore(${1:data: PropertyChangeData})"],
    ["set(name: string, value: any): void\tClass DependencyObservable", "set(${1:name: string}, ${2:value: any})"],
    ["_getValueSource(property: Property): number\tClass Placeholder", "_getValueSource(${1:property: Property})"],
    ["_setCore(data: PropertyChangeData): any\tClass NavigationButton", "_setCore(${1:data: PropertyChangeData})"],
    ["_eachSetProperty(callback: function): void\tClass Placeholder", "_eachSetProperty(${1:callback: function})"],
    ["hasListeners(eventName: string): boolean\tClass ProxyViewContainer", "hasListeners(${1:eventName: string})"],
    ["_eachSetProperty(callback: function): void\tClass ProxyObject", "_eachSetProperty(${1:callback: function})"],
    ["_onDetached(force?: boolean): void\tClass WebView", "_onDetached(${1:force?: boolean})"],
    ["_setCore(data: PropertyChangeData): any\tInterface AndroidFrame", "_setCore(${1:data: PropertyChangeData})"],
    ["_setCore(data: PropertyChangeData): any\tClass SegmentedBarItem", "_setCore(${1:data: PropertyChangeData})"],
    ["_eachChildView(callback: function): any\tClass EditableTextBase", "_eachChildView(${1:callback: function})"],
    ["setDock(view: View, value: string): void\tClass DockLayout", "setDock(${1:view: View}, ${2:value: string})"],
    ["getLocationRelativeTo(otherView: View): Point\tClass Button", "getLocationRelativeTo(${1:otherView: View})"],
    ["_inheritProperties(parentView: View): any\tClass SegmentedBar", "_inheritProperties(${1:parentView: View})"],
    ["hasListeners(eventName: string): boolean\tClass AndroidApplication", "hasListeners(${1:eventName: string})"],
    ["_getValueSource(property: Property): number\tClass ProxyObject", "_getValueSource(${1:property: Property})"],
    ["_resetValues(valueSource: number): void\tClass ActivityIndicator", "_resetValues(${1:valueSource: number})"],
    ["getLocationRelativeTo(otherView: View): Point\tClass Border", "getLocationRelativeTo(${1:otherView: View})"],
    ["_onDetached(force?: boolean): void\tClass TabView", "_onDetached(${1:force?: boolean})"],
    ["getLocationRelativeTo(otherView: View): Point\tClass Switch", "getLocationRelativeTo(${1:otherView: View})"],
    ["load(index: number, items: T[]): void\tClass VirtualArray<T>", "load(${1:index: number}, ${2:items: T[]})"],
    ["_onDetached(force?: boolean): void\tClass Border", "_onDetached(${1:force?: boolean})"],
    ["_inheritProperties(parentView: View): any\tClass Placeholder", "_inheritProperties(${1:parentView: View})"],
    ["_eachSetProperty(callback: function): void\tClass GridLayout", "_eachSetProperty(${1:callback: function})"],
    ["isUserInteractionEnabledProperty: Property\tClass SegmentedBar", "Static isUserInteractionEnabledProperty"],
    ["_eachSetProperty(callback: function): void\tClass WrapLayout", "_eachSetProperty(${1:callback: function})"],
    ["_resetValues(valueSource: number): void\tClass CustomLayoutView", "_resetValues(${1:valueSource: number})"],
    ["autocapitalizationTypeProperty: Property\tClass EditableTextBase", "Static autocapitalizationTypeProperty"],
    ["_resetValues(valueSource: number): void\tClass SegmentedBarItem", "_resetValues(${1:valueSource: number})"],
    ["getLocationRelativeTo(otherView: View): Point\tClass Label", "getLocationRelativeTo(${1:otherView: View})"],
    ["_getValueSource(property: Property): number\tClass GridLayout", "_getValueSource(${1:property: Property})"],
    ["_downloadCore(request: DownloadRequest): any\tClass Cache", "_downloadCore(${1:request: DownloadRequest})"],
    ["_setCore(data: PropertyChangeData): any\tClass VirtualArray<T>", "_setCore(${1:data: PropertyChangeData})"],
    ["_updateActionBar(page?: Page): any\tClass Frame", "_updateActionBar(${1:page?: Page})"],
    ["_getValueSource(property: Property): number\tClass ScrollView", "_getValueSource(${1:property: Property})"],
    ["paddingRightProperty: Property\tModule ui/styling/style", "paddingRightProperty"],
    ["_onDetached(force?: boolean): void\tClass Switch", "_onDetached(${1:force?: boolean})"],
    ["_onDetached(force?: boolean): void\tClass Slider", "_onDetached(${1:force?: boolean})"],
    ["_setCore(data: PropertyChangeData): any\tClass FormattedString", "_setCore(${1:data: PropertyChangeData})"],
    ["_getValueSource(property: Property): number\tClass DatePicker", "_getValueSource(${1:property: Property})"],
    ["_onDetached(force?: boolean): void\tClass Button", "_onDetached(${1:force?: boolean})"],
    ["marginBottomProperty: Property\tModule ui/styling/style", "marginBottomProperty"],
    ["_eachSetProperty(callback: function): void\tClass DockLayout", "_eachSetProperty(${1:callback: function})"],
    ["_eachSetProperty(callback: function): void\tClass ActionItem", "_eachSetProperty(${1:callback: function})"],
    ["_getValueSource(property: Property): number\tClass DockLayout", "_getValueSource(${1:property: Property})"],
    ["_eachLayoutView(callback: function): void\tClass SegmentedBar", "_eachLayoutView(${1:callback: function})"],
    ["_resetValues(valueSource: number): void\tClass NavigationButton", "_resetValues(${1:valueSource: number})"],
    ["getLocationRelativeTo(otherView: View): Point\tClass Image", "getLocationRelativeTo(${1:otherView: View})"],
    ["fontInternalProperty: Property\tModule ui/styling/style", "fontInternalProperty"],
    ["_onDetached(force?: boolean): void\tClass Layout", "_onDetached(${1:force?: boolean})"],
    ["_eachSetProperty(callback: function): void\tClass TimePicker", "_eachSetProperty(${1:callback: function})"],
    ["borderRadiusProperty: Property\tModule ui/styling/style", "borderRadiusProperty"],
    ["_eachSetProperty(callback: function): void\tClass ScrollView", "_eachSetProperty(${1:callback: function})"],
    ["_inheritProperties(parentView: View): any\tClass ContentView", "_inheritProperties(${1:parentView: View})"],
    ["_resetValues(valueSource: number): void\tClass EditableTextBase", "_resetValues(${1:valueSource: number})"],
    ["backgroundSpanUnderStatusBarProperty: Property\tClass Page", "Static backgroundSpanUnderStatusBarProperty"],
    ["getLocationRelativeTo(otherView: View): Point\tClass Frame", "getLocationRelativeTo(${1:otherView: View})"],
    ["_getValueSource(property: Property): number\tClass TimePicker", "_getValueSource(${1:property: Property})"],
    ["_getValueSource(property: Property): number\tClass ListPicker", "_getValueSource(${1:property: Property})"],
    ["on(event: tap, callback: function): any\tClass ActionItem", "on(${1:event: tap}, ${2:callback: function})"],
    ["hasListeners(eventName: string): boolean\tClass ActivityIndicator", "hasListeners(${1:eventName: string})"],
    ["_inheritProperties(parentView: View): any\tClass StackLayout", "_inheritProperties(${1:parentView: View})"],
    ["_eachSetProperty(callback: function): void\tClass LayoutBase", "_eachSetProperty(${1:callback: function})"],
    ["_eachSetProperty(callback: function): void\tClass DatePicker", "_eachSetProperty(${1:callback: function})"],
    ["_getValueSource(property: Property): number\tClass ActionItem", "_getValueSource(${1:property: Property})"],
    ["_getValueSource(property: Property): number\tClass WrapLayout", "_getValueSource(${1:property: Property})"],
    ["_getValueSource(property: Property): number\tClass LayoutBase", "_getValueSource(${1:property: Property})"],
    ["_eachSetProperty(callback: function): void\tClass ListPicker", "_eachSetProperty(${1:callback: function})"],
    ["_inheritProperties(parentView: View): any\tClass ListPicker", "_inheritProperties(${1:parentView: View})"],
    ["_inheritProperties(parentView: View): any\tClass TimePicker", "_inheritProperties(${1:parentView: View})"],
    ["isUserInteractionEnabledProperty: Property\tClass ContentView", "Static isUserInteractionEnabledProperty"],
    ["_setCore(data: PropertyChangeData): any\tClass AbsoluteLayout", "_setCore(${1:data: PropertyChangeData})"],
    ["set(name: string, value: any): void\tClass ProxyViewContainer", "set(${1:name: string}, ${2:value: any})"],
    ["isUserInteractionEnabledProperty: Property\tClass Placeholder", "Static isUserInteractionEnabledProperty"],
    ["_eachLayoutView(callback: function): void\tClass Placeholder", "_eachLayoutView(${1:callback: function})"],
    ["hasListeners(eventName: string): boolean\tClass CustomLayoutView", "hasListeners(${1:eventName: string})"],
    ["_inheritProperties(parentView: View): any\tClass WrapLayout", "_inheritProperties(${1:parentView: View})"],
    ["_onDetached(force?: boolean): void\tClass Frame", "_onDetached(${1:force?: boolean})"],
    ["_inheritProperties(parentView: View): any\tClass LayoutBase", "_inheritProperties(${1:parentView: View})"],
    ["_inheritProperties(parentView: View): any\tClass DatePicker", "_inheritProperties(${1:parentView: View})"],
    ["hasListeners(eventName: string): boolean\tClass NavigationButton", "hasListeners(${1:eventName: string})"],
    ["_onDetached(force?: boolean): void\tClass Image", "_onDetached(${1:force?: boolean})"],
    ["set(name: string, value: any): void\tClass ObservableArray<T>", "set(${1:name: string}, ${2:value: any})"],
    ["_eachSetProperty(callback: function): void\tClass ActionBar", "_eachSetProperty(${1:callback: function})"],
    ["_getValueSource(property: Property): number\tClass TextField", "_getValueSource(${1:property: Property})"],
    ["hasListeners(eventName: string): boolean\tClass SegmentedBarItem", "hasListeners(${1:eventName: string})"],
    ["getLocationRelativeTo(otherView: View): Point\tClass Page", "getLocationRelativeTo(${1:otherView: View})"],
    ["_eachChildView(callback: function): any\tClass AbsoluteLayout", "_eachChildView(${1:callback: function})"],
    ["hasListeners(eventName: string): boolean\tClass EditableTextBase", "hasListeners(${1:eventName: string})"],
    ["hasListeners(eventName: string): boolean\tInterface AndroidFrame", "hasListeners(${1:eventName: string})"],
    ["_inheritProperties(parentView: View): any\tClass DockLayout", "_inheritProperties(${1:parentView: View})"],
    ["_eachSetProperty(callback: function): void\tClass TextField", "_eachSetProperty(${1:callback: function})"],
    ["getLocationRelativeTo(otherView: View): Point\tClass View", "getLocationRelativeTo(${1:otherView: View})"],
    ["set(name: string, value: any): void\tClass AndroidApplication", "set(${1:name: string}, ${2:value: any})"],
    ["_eachLayoutView(callback: function): void\tClass ContentView", "_eachLayoutView(${1:callback: function})"],
    ["_inheritProperties(parentView: View): any\tClass GridLayout", "_inheritProperties(${1:parentView: View})"],
    ["_getValueSource(property: Property): number\tClass ActionBar", "_getValueSource(${1:property: Property})"],
    ["_eachSetProperty(callback: function): void\tClass SearchBar", "_eachSetProperty(${1:callback: function})"],
    ["fromString(type: string): GestureTypes\tModule ui/gestures", "fromString(${1:type: string})"],
    ["eachLayoutChild(callback: function): void\tClass StackLayout", "eachLayoutChild(${1:callback: function})"],
    ["isUserInteractionEnabledProperty: Property\tClass StackLayout", "Static isUserInteractionEnabledProperty"],
    ["_onDetached(force?: boolean): void\tClass Label", "_onDetached(${1:force?: boolean})"],
    ["_getValueSource(property: Property): number\tClass SearchBar", "_getValueSource(${1:property: Property})"],
    ["_eachLayoutView(callback: function): void\tClass StackLayout", "_eachLayoutView(${1:callback: function})"],
    ["_inheritProperties(parentView: View): any\tClass ScrollView", "_inheritProperties(${1:parentView: View})"],
    ["_unregisterLayoutChild(child: View): void\tClass StackLayout", "_unregisterLayoutChild(${1:child: View})"],
    ["setRow(view: View, value: number): void\tClass GridLayout", "setRow(${1:view: View}, ${2:value: number})"],
    ["borderColorProperty: Property\tModule ui/styling/style", "borderColorProperty"],
    ["_getValueSource(property: Property): number\tClass Progress", "_getValueSource(${1:property: Property})"],
    ["isUserInteractionEnabledProperty: Property\tClass LayoutBase", "Static isUserInteractionEnabledProperty"],
    ["hasListeners(eventName: string): boolean\tClass FormattedString", "hasListeners(${1:eventName: string})"],
    ["eachLayoutChild(callback: function): void\tClass WrapLayout", "eachLayoutChild(${1:callback: function})"],
    ["_getValueSource(property: Property): number\tClass TextView", "_getValueSource(${1:property: Property})"],
    ["_unregisterLayoutChild(child: View): void\tClass WrapLayout", "_unregisterLayoutChild(${1:child: View})"],
    ["borderWidthProperty: Property\tModule ui/styling/style", "borderWidthProperty"],
    ["_getValueSource(property: Property): number\tClass HtmlView", "_getValueSource(${1:property: Property})"],
    ["_eachSetProperty(callback: function): void\tClass ListView", "_eachSetProperty(${1:callback: function})"],
    ["_eachLayoutView(callback: function): void\tClass ScrollView", "_eachLayoutView(${1:callback: function})"],
    ["_inheritProperties(parentView: View): any\tClass ActionBar", "_inheritProperties(${1:parentView: View})"],
    ["_getValueSource(property: Property): number\tClass Repeater", "_getValueSource(${1:property: Property})"],
    ["_getValueSource(property: Property): number\tClass TextBase", "_getValueSource(${1:property: Property})"],
    ["_eachLayoutView(callback: function): void\tClass DatePicker", "_eachLayoutView(${1:callback: function})"],
    ["_eachSetProperty(callback: function): void\tClass TextView", "_eachSetProperty(${1:callback: function})"],
    ["_eachLayoutView(callback: function): void\tClass DockLayout", "_eachLayoutView(${1:callback: function})"],
    ["_eachLayoutView(callback: function): void\tClass TimePicker", "_eachLayoutView(${1:callback: function})"],
    ["hasListeners(eventName: string): boolean\tClass VirtualArray<T>", "hasListeners(${1:eventName: string})"],
    ["_eachSetProperty(callback: function): void\tClass Progress", "_eachSetProperty(${1:callback: function})"],
    ["marginRightProperty: Property\tModule ui/styling/style", "marginRightProperty"],
    ["_inheritProperties(parentView: View): any\tClass TextField", "_inheritProperties(${1:parentView: View})"],
    ["eachLayoutChild(callback: function): void\tClass GridLayout", "eachLayoutChild(${1:callback: function})"],
    ["isUserInteractionEnabledProperty: Property\tClass WrapLayout", "Static isUserInteractionEnabledProperty"],
    ["selectedBackgroundColorProperty: Property\tClass SegmentedBar", "Static selectedBackgroundColorProperty"],
    ["_eachLayoutView(callback: function): void\tClass GridLayout", "_eachLayoutView(${1:callback: function})"],
    ["paddingLeftProperty: Property\tModule ui/styling/style", "paddingLeftProperty"],
    ["_onDetached(force?: boolean): void\tClass View", "_onDetached(${1:force?: boolean})"],
    ["eachLayoutChild(callback: function): void\tClass LayoutBase", "eachLayoutChild(${1:callback: function})"],
    ["eachLayoutChild(callback: function): void\tClass DockLayout", "eachLayoutChild(${1:callback: function})"],
    ["_getValueSource(property: Property): number\tClass ListView", "_getValueSource(${1:property: Property})"],
    ["_onDetached(force?: boolean): void\tClass Page", "_onDetached(${1:force?: boolean})"],
    ["isUserInteractionEnabledProperty: Property\tClass ScrollView", "Static isUserInteractionEnabledProperty"],
    ["_unregisterLayoutChild(child: View): void\tClass LayoutBase", "_unregisterLayoutChild(${1:child: View})"],
    ["_eachSetProperty(callback: function): void\tClass Repeater", "_eachSetProperty(${1:callback: function})"],
    ["equals(value1: Font, value2: Font): boolean\tClass Font", "equals(${1:value1: Font}, ${2:value2: Font})"],
    ["_getValueSource(property: Property): number\tClass Bindable", "_getValueSource(${1:property: Property})"],
    ["isUserInteractionEnabledProperty: Property\tClass GridLayout", "Static isUserInteractionEnabledProperty"],
    ["_inheritProperties(parentView: View): any\tClass SearchBar", "_inheritProperties(${1:parentView: View})"],
    ["deletePseudoClass(name: string): void\tClass ProxyViewContainer", "deletePseudoClass(${1:name: string})"],
    ["isUserInteractionEnabledProperty: Property\tClass DatePicker", "Static isUserInteractionEnabledProperty"],
    ["_eachLayoutView(callback: function): void\tClass WrapLayout", "_eachLayoutView(${1:callback: function})"],
    ["_parentChanged(oldParent: View): void\tClass ProxyViewContainer", "_parentChanged(${1:oldParent: View})"],
    ["_eachLayoutView(callback: function): void\tClass ListPicker", "_eachLayoutView(${1:callback: function})"],
    ["_eachSetProperty(callback: function): void\tClass TextBase", "_eachSetProperty(${1:callback: function})"],
    ["_eachLayoutView(callback: function): void\tClass LayoutBase", "_eachLayoutView(${1:callback: function})"],
    ["isUserInteractionEnabledProperty: Property\tClass TimePicker", "Static isUserInteractionEnabledProperty"],
    ["_eachSetProperty(callback: function): void\tClass Bindable", "_eachSetProperty(${1:callback: function})"],
    ["isUserInteractionEnabledProperty: Property\tClass DockLayout", "Static isUserInteractionEnabledProperty"],
    ["isUserInteractionEnabledProperty: Property\tClass ListPicker", "Static isUserInteractionEnabledProperty"],
    ["_registerLayoutChild(child: View): void\tClass AbsoluteLayout", "_registerLayoutChild(${1:child: View})"],
    ["set(name: string, value: any): void\tClass ActivityIndicator", "set(${1:name: string}, ${2:value: any})"],
    ["_eachSetProperty(callback: function): void\tClass HtmlView", "_eachSetProperty(${1:callback: function})"],
    ["_unregisterLayoutChild(child: View): void\tClass GridLayout", "_unregisterLayoutChild(${1:child: View})"],
    ["_unregisterLayoutChild(child: View): void\tClass DockLayout", "_unregisterLayoutChild(${1:child: View})"],
    ["_resetValues(valueSource: number): void\tClass AbsoluteLayout", "_resetValues(${1:valueSource: number})"],
    ["_eachChildView(callback: function): any\tClass SegmentedBar", "_eachChildView(${1:callback: function})"],
    ["deletePseudoClass(name: string): void\tClass ActivityIndicator", "deletePseudoClass(${1:name: string})"],
    ["_eachLayoutView(callback: function): void\tClass TextField", "_eachLayoutView(${1:callback: function})"],
    ["_inheritStyleProperties(parent: View): void\tClass Style", "_inheritStyleProperties(${1:parent: View})"],
    ["isUserInteractionEnabledProperty: Property\tClass TextField", "Static isUserInteractionEnabledProperty"],
    ["_inheritProperties(parentView: View): any\tClass Repeater", "_inheritProperties(${1:parentView: View})"],
    ["_inheritProperties(parentView: View): any\tClass TextView", "_inheritProperties(${1:parentView: View})"],
    ["textFieldBackgroundColorProperty: Property\tClass SearchBar", "Static textFieldBackgroundColorProperty"],
    ["_inheritStyleProperties(parent: View): void\tClass Style", "_inheritStyleProperties(${1:parent: View})"],
    ["_eachSetProperty(callback: function): void\tClass TabView", "_eachSetProperty(${1:callback: function})"],
    ["set(name: string, value: any): void\tClass CustomLayoutView", "set(${1:name: string}, ${2:value: any})"],
    ["_eachLayoutView(callback: function): void\tClass SearchBar", "_eachLayoutView(${1:callback: function})"],
    ["set(name: string, value: any): void\tInterface AndroidFrame", "set(${1:name: string}, ${2:value: any})"],
    ["_setCore(data: PropertyChangeData): any\tClass SegmentedBar", "_setCore(${1:data: PropertyChangeData})"],
    ["_inheritProperties(parentView: View): any\tClass TextBase", "_inheritProperties(${1:parentView: View})"],
    ["_getValueSource(property: Property): number\tClass WebView", "_getValueSource(${1:property: Property})"],
    ["ignorePropertyHandler: any\tModule ui/styling/style", "ignorePropertyHandler"],
    ["set(name: string, value: any): void\tClass EditableTextBase", "set(${1:name: string}, ${2:value: any})"],
    ["_inheritProperties(parentView: View): any\tClass Progress", "_inheritProperties(${1:parentView: View})"],
    ["set(name: string, value: any): void\tClass SegmentedBarItem", "set(${1:name: string}, ${2:value: any})"],
    ["hasListeners(eventName: string): boolean\tClass AbsoluteLayout", "hasListeners(${1:eventName: string})"],
    ["isUserInteractionEnabledProperty: Property\tClass SearchBar", "Static isUserInteractionEnabledProperty"],
    ["_parentChanged(oldParent: View): void\tClass ActivityIndicator", "_parentChanged(${1:oldParent: View})"],
    ["isUserInteractionEnabledProperty: Property\tClass ActionBar", "Static isUserInteractionEnabledProperty"],
    ["set(name: string, value: any): void\tClass NavigationButton", "set(${1:name: string}, ${2:value: any})"],
    ["_eachSetProperty(callback: function): void\tClass WebView", "_eachSetProperty(${1:callback: function})"],
    ["parse(css: string, options: any): SyntaxTree\tModule css", "parse(${1:css: string}, ${2:options: any})"],
    ["_inheritProperties(parentView: View): any\tClass HtmlView", "_inheritProperties(${1:parentView: View})"],
    ["_getValueSource(property: Property): number\tClass TabView", "_getValueSource(${1:property: Property})"],
    ["_goToVisualState(state: string): any\tClass ProxyViewContainer", "_goToVisualState(${1:state: string})"],
    ["readSync(onError?: function): any\tClass File", "readSync(${1:onError?: function})"],
    ["_eachLayoutView(callback: function): void\tClass ActionBar", "_eachLayoutView(${1:callback: function})"],
    ["_inheritProperties(parentView: View): any\tClass ListView", "_inheritProperties(${1:parentView: View})"],
    ["isUserInteractionEnabledProperty: Property\tClass TextView", "Static isUserInteractionEnabledProperty"],
    ["_eachSetProperty(callback: function): void\tClass Switch", "_eachSetProperty(${1:callback: function})"],
    ["lazy<T>(action: function): function\tModule utils/lazy", "lazy<T>(${1:action: function})"],
    ["isUserInteractionEnabledProperty: Property\tClass TextBase", "Static isUserInteractionEnabledProperty"],
    ["_eachLayoutView(callback: function): void\tClass HtmlView", "_eachLayoutView(${1:callback: function})"],
    ["isUserInteractionEnabledProperty: Property\tClass ListView", "Static isUserInteractionEnabledProperty"],
    ["_eachChildView(callback: function): any\tClass StackLayout", "_eachChildView(${1:callback: function})"],
    ["_parentChanged(oldParent: View): void\tClass EditableTextBase", "_parentChanged(${1:oldParent: View})"],
    ["_inheritProperties(parentView: View): any\tClass WebView", "_inheritProperties(${1:parentView: View})"],
    ["_onColumnAdded(itemSpec: ItemSpec): void\tClass GridLayout", "_onColumnAdded(${1:itemSpec: ItemSpec})"],
    ["getFileExtension(path: string): string\tClass FileSystemAccess", "getFileExtension(${1:path: string})"],
    ["_parentChanged(oldParent: View): void\tClass CustomLayoutView", "_parentChanged(${1:oldParent: View})"],
    ["_goToVisualState(state: string): any\tClass ActivityIndicator", "_goToVisualState(${1:state: string})"],
    ["_getValueSource(property: Property): number\tClass Layout", "_getValueSource(${1:property: Property})"],
    ["_eachChildView(callback: function): any\tClass Placeholder", "_eachChildView(${1:callback: function})"],
    ["_eachChildView(callback: function): any\tClass ContentView", "_eachChildView(${1:callback: function})"],
    ["_eachSetProperty(callback: function): void\tClass Layout", "_eachSetProperty(${1:callback: function})"],
    ["_eachLayoutView(callback: function): void\tClass TextView", "_eachLayoutView(${1:callback: function})"],
    ["deletePseudoClass(name: string): void\tClass EditableTextBase", "deletePseudoClass(${1:name: string})"],
    ["_setCore(data: PropertyChangeData): any\tClass ContentView", "_setCore(${1:data: PropertyChangeData})"],
    ["_setCore(data: PropertyChangeData): any\tClass TabViewItem", "_setCore(${1:data: PropertyChangeData})"],
    ["_eachLayoutView(callback: function): void\tClass TextBase", "_eachLayoutView(${1:callback: function})"],
    ["goBack(to?: BackstackEntry): any\tClass Frame", "goBack(${1:to?: BackstackEntry})"],
    ["_inheritProperties(parentView: View): any\tClass TabView", "_inheritProperties(${1:parentView: View})"],
    ["_eachLayoutView(callback: function): void\tClass Repeater", "_eachLayoutView(${1:callback: function})"],
    ["_getValueSource(property: Property): number\tClass Border", "_getValueSource(${1:property: Property})"],
    ["whiteSpaceProperty: Property\tModule ui/styling/style", "whiteSpaceProperty"],
    ["fromNativeSource(source: any): ImageSource\tModule image-source", "fromNativeSource(${1:source: any})"],
    ["translateYProperty: Property\tModule ui/styling/style", "translateYProperty"],
    ["isUserInteractionEnabledProperty: Property\tClass Progress", "Static isUserInteractionEnabledProperty"],
    ["_getValueSource(property: Property): number\tClass Button", "_getValueSource(${1:property: Property})"],
    ["set(name: string, value: any): void\tClass VirtualArray<T>", "set(${1:name: string}, ${2:value: any})"],
    ["visibilityProperty: Property\tModule ui/styling/style", "visibilityProperty"],
    ["_getValueSource(property: Property): number\tClass Slider", "_getValueSource(${1:property: Property})"],
    ["isUserInteractionEnabledProperty: Property\tClass HtmlView", "Static isUserInteractionEnabledProperty"],
    ["_eachSetProperty(callback: function): void\tClass Button", "_eachSetProperty(${1:callback: function})"],
    ["translateXProperty: Property\tModule ui/styling/style", "translateXProperty"],
    ["_eachLayoutView(callback: function): void\tClass Progress", "_eachLayoutView(${1:callback: function})"],
    ["_setCore(data: PropertyChangeData): any\tClass StackLayout", "_setCore(${1:data: PropertyChangeData})"],
    ["withBorderRadius(value: number): Background\tClass Background", "withBorderRadius(${1:value: number})"],
    ["fontFamilyProperty: Property\tModule ui/styling/style", "fontFamilyProperty"],
    ["fontWeightProperty: Property\tModule ui/styling/style", "fontWeightProperty"],
    ["_getValueSource(property: Property): number\tClass Switch", "_getValueSource(${1:property: Property})"],
    ["paddingTopProperty: Property\tModule ui/styling/style", "paddingTopProperty"],
    ["deletePseudoClass(name: string): void\tClass CustomLayoutView", "deletePseudoClass(${1:name: string})"],
    ["_setCore(data: PropertyChangeData): any\tClass Placeholder", "_setCore(${1:data: PropertyChangeData})"],
    ["marginLeftProperty: Property\tModule ui/styling/style", "marginLeftProperty"],
    ["onLaunch(context?: any): void\tModule application", "onLaunch(${1:context?: any})"],
    ["_resetValues(valueSource: number): void\tClass SegmentedBar", "_resetValues(${1:valueSource: number})"],
    ["_eachLayoutView(callback: function): void\tClass ListView", "_eachLayoutView(${1:callback: function})"],
    ["_setCore(data: PropertyChangeData): any\tClass ProxyObject", "_setCore(${1:data: PropertyChangeData})"],
    ["_eachSetProperty(callback: function): void\tClass Border", "_eachSetProperty(${1:callback: function})"],
    ["_eachSetProperty(callback: function): void\tClass Slider", "_eachSetProperty(${1:callback: function})"],
    ["on(name: string, cb: Function): void\tClass EasySAXParser", "on(${1:name: string}, ${2:cb: Function})"],
    ["isUserInteractionEnabledProperty: Property\tClass Repeater", "Static isUserInteractionEnabledProperty"],
    ["setFragmentClass(clazz: any): void\tModule ui/frame", "setFragmentClass(${1:clazz: any})"],
    ["set(name: string, value: any): void\tClass FormattedString", "set(${1:name: string}, ${2:value: any})"],
    ["_inheritProperties(parentView: View): any\tClass Layout", "_inheritProperties(${1:parentView: View})"],
    ["_resetValues(valueSource: number): void\tClass ContentView", "_resetValues(${1:valueSource: number})"],
    ["_getValueSource(property: Property): number\tClass Style", "_getValueSource(${1:property: Property})"],
    ["_eachChildView(callback: function): any\tClass LayoutBase", "_eachChildView(${1:callback: function})"],
    ["_getValueSource(property: Property): number\tClass Frame", "_getValueSource(${1:property: Property})"],
    ["androidOnTouchEvent: function(motionEvent: any): void\tClass GesturesObserver", "androidOnTouchEvent"],
    ["_eachChildView(callback: function): any\tClass ScrollView", "_eachChildView(${1:callback: function})"],
    ["_resetValues(valueSource: number): void\tClass TabViewItem", "_resetValues(${1:valueSource: number})"],
    ["_resetValues(valueSource: number): void\tClass StackLayout", "_resetValues(${1:valueSource: number})"],
    ["_goToVisualState(state: string): any\tClass EditableTextBase", "_goToVisualState(${1:state: string})"],
    ["_getValue(property: Property): any\tClass DependencyObservable", "_getValue(${1:property: Property})"],
    ["_setCore(data: PropertyChangeData): any\tClass LayoutBase", "_setCore(${1:data: PropertyChangeData})"],
    ["_eachChildView(callback: function): any\tClass ListPicker", "_eachChildView(${1:callback: function})"],
    ["_inheritProperties(parentView: View): any\tClass Border", "_inheritProperties(${1:parentView: View})"],
    ["_eachChildView(callback: function): any\tClass WrapLayout", "_eachChildView(${1:callback: function})"],
    ["_eachSetProperty(callback: function): void\tClass Style", "_eachSetProperty(${1:callback: function})"],
    ["_setCore(data: PropertyChangeData): any\tClass ScrollView", "_setCore(${1:data: PropertyChangeData})"],
    ["_eachSetProperty(callback: function): void\tClass Label", "_eachSetProperty(${1:callback: function})"],
    ["_eachChildView(callback: function): any\tClass TimePicker", "_eachChildView(${1:callback: function})"],
    ["_getValueSource(property: Property): number\tClass Image", "_getValueSource(${1:property: Property})"],
    ["alert(message: string): Promise<void>\tModule ui/dialogs", "alert(${1:message: string})"],
    ["_setCore(data: PropertyChangeData): any\tClass GridLayout", "_setCore(${1:data: PropertyChangeData})"],
    ["_goToVisualState(state: string): any\tClass CustomLayoutView", "_goToVisualState(${1:state: string})"],
    ["_inheritProperties(parentView: View): any\tClass Button", "_inheritProperties(${1:parentView: View})"],
    ["_setCore(data: PropertyChangeData): any\tClass DatePicker", "_setCore(${1:data: PropertyChangeData})"],
    ["_getValueSource(property: Property): number\tClass Label", "_getValueSource(${1:property: Property})"],
    ["_setCore(data: PropertyChangeData): any\tClass Observable", "_setCore(${1:data: PropertyChangeData})"],
    ["_eachSetProperty(callback: function): void\tClass Frame", "_eachSetProperty(${1:callback: function})"],
    ["_resetValues(valueSource: number): void\tClass ProxyObject", "_resetValues(${1:valueSource: number})"],
    ["set(name: string, value: any): void\tClass AbsoluteLayout", "set(${1:name: string}, ${2:value: any})"],
    ["_eachChildView(callback: function): any\tClass DatePicker", "_eachChildView(${1:callback: function})"],
    ["hasListeners(eventName: string): boolean\tModule application", "hasListeners(${1:eventName: string})"],
    ["hasListeners(eventName: string): boolean\tClass SegmentedBar", "hasListeners(${1:eventName: string})"],
    ["_inheritProperties(parentView: View): any\tClass Switch", "_inheritProperties(${1:parentView: View})"],
    ["_resetValues(valueSource: number): void\tClass Placeholder", "_resetValues(${1:valueSource: number})"],
    ["_registerLayoutChild(child: View): void\tClass StackLayout", "_registerLayoutChild(${1:child: View})"],
    ["_eachSetProperty(callback: function): void\tClass Image", "_eachSetProperty(${1:callback: function})"],
    ["_setCore(data: PropertyChangeData): any\tClass TimePicker", "_setCore(${1:data: PropertyChangeData})"],
    ["_setCore(data: PropertyChangeData): any\tClass WrapLayout", "_setCore(${1:data: PropertyChangeData})"],
    ["_eachSetProperty(callback: function): void\tClass Style", "_eachSetProperty(${1:callback: function})"],
    ["isUserInteractionEnabledProperty: Property\tClass WebView", "Static isUserInteractionEnabledProperty"],
    ["_setCore(data: PropertyChangeData): any\tClass ListPicker", "_setCore(${1:data: PropertyChangeData})"],
    ["verifyCallback(value: any): void\tModule utils/types", "verifyCallback(${1:value: any})"],
    ["_eachLayoutView(callback: function): void\tClass TabView", "_eachLayoutView(${1:callback: function})"],
    ["_inheritProperties(parentView: View): any\tClass Slider", "_inheritProperties(${1:parentView: View})"],
    ["_eachChildView(callback: function): any\tClass GridLayout", "_eachChildView(${1:callback: function})"],
    ["_eachLayoutView(callback: function): void\tClass WebView", "_eachLayoutView(${1:callback: function})"],
    ["isUserInteractionEnabledProperty: Property\tClass TabView", "Static isUserInteractionEnabledProperty"],
    ["_eachChildView(callback: function): any\tClass DockLayout", "_eachChildView(${1:callback: function})"],
    ["_setCore(data: PropertyChangeData): any\tClass DockLayout", "_setCore(${1:data: PropertyChangeData})"],
    ["_getValueSource(property: Property): number\tClass Style", "_getValueSource(${1:property: Property})"],
    ["_setCore(data: PropertyChangeData): any\tClass ActionItem", "_setCore(${1:data: PropertyChangeData})"],
    ["_resetValues(valueSource: number): void\tClass DatePicker", "_resetValues(${1:valueSource: number})"],
    ["isUserInteractionEnabledProperty: Property\tClass Button", "Static isUserInteractionEnabledProperty"],
    ["_eachLayoutView(callback: function): void\tClass Border", "_eachLayoutView(${1:callback: function})"],
    ["hasListeners(eventName: string): boolean\tClass ContentView", "hasListeners(${1:eventName: string})"],
    ["hasListeners(eventName: string): boolean\tClass ProxyObject", "hasListeners(${1:eventName: string})"],
    ["minHeightProperty: Property\tModule ui/styling/style", "minHeightProperty"],
    ["marginTopProperty: Property\tModule ui/styling/style", "marginTopProperty"],
    ["_eachSetProperty(callback: function): void\tClass Page", "_eachSetProperty(${1:callback: function})"],
    ["_eachSetProperty(callback: function): void\tClass Span", "_eachSetProperty(${1:callback: function})"],
    ["setInlineStyle(style: string): void\tClass ProxyViewContainer", "setInlineStyle(${1:style: string})"],
    ["isUserInteractionEnabledProperty: Property\tClass Layout", "Static isUserInteractionEnabledProperty"],
    ["_resetValues(valueSource: number): void\tClass DockLayout", "_resetValues(${1:valueSource: number})"],
    ["_registerLayoutChild(child: View): void\tClass WrapLayout", "_registerLayoutChild(${1:child: View})"],
    ["isUserInteractionEnabledProperty: Property\tClass Switch", "Static isUserInteractionEnabledProperty"],
    ["_parentChanged(oldParent: View): void\tClass AbsoluteLayout", "_parentChanged(${1:oldParent: View})"],
    ["_registerLayoutChild(child: View): void\tClass DockLayout", "_registerLayoutChild(${1:child: View})"],
    ["_registerLayoutChild(child: View): void\tClass GridLayout", "_registerLayoutChild(${1:child: View})"],
    ["_resetValues(valueSource: number): void\tClass GridLayout", "_resetValues(${1:valueSource: number})"],
    ["_setCore(data: PropertyChangeData): any\tClass SearchBar", "_setCore(${1:data: PropertyChangeData})"],
    ["_eachChildView(callback: function): any\tClass TextField", "_eachChildView(${1:callback: function})"],
    ["_eachSetProperty(callback: function): void\tClass View", "_eachSetProperty(${1:callback: function})"],
    ["_eachChildView(callback: function): any\tClass SearchBar", "_eachChildView(${1:callback: function})"],
    ["_inheritProperties(parentView: View): any\tClass Label", "_inheritProperties(${1:parentView: View})"],
    ["_setCore(data: PropertyChangeData): any\tClass ActionBar", "_setCore(${1:data: PropertyChangeData})"],
    ["_getValueSource(property: Property): number\tClass View", "_getValueSource(${1:property: Property})"],
    ["_setCore(data: PropertyChangeData): any\tClass TextField", "_setCore(${1:data: PropertyChangeData})"],
    ["_resetValues(valueSource: number): void\tClass TimePicker", "_resetValues(${1:valueSource: number})"],
    ["_eachLayoutView(callback: function): void\tClass Switch", "_eachLayoutView(${1:callback: function})"],
    ["isUserInteractionEnabledProperty: Property\tClass Border", "Static isUserInteractionEnabledProperty"],
    ["_eachChildView(callback: function): any\tClass ActionBar", "_eachChildView(${1:callback: function})"],
    ["_eachLayoutView(callback: function): void\tClass Button", "_eachLayoutView(${1:callback: function})"],
    ["_resetValues(valueSource: number): void\tClass ListPicker", "_resetValues(${1:valueSource: number})"],
    ["_inheritProperties(parentView: View): any\tClass Image", "_inheritProperties(${1:parentView: View})"],
    ["hasListeners(eventName: string): boolean\tClass TabViewItem", "hasListeners(${1:eventName: string})"],
    ["withBorderWidth(value: number): Background\tClass Background", "withBorderWidth(${1:value: number})"],
    ["_resetValues(valueSource: number): void\tClass WrapLayout", "_resetValues(${1:valueSource: number})"],
    ["_inheritProperties(parentView: View): any\tClass Frame", "_inheritProperties(${1:parentView: View})"],
    ["load(options: LoadOptions): View\tModule ui/builder", "load(${1:options: LoadOptions})"],
    ["_getValueSource(property: Property): number\tClass Page", "_getValueSource(${1:property: Property})"],
    ["_eachLayoutView(callback: function): void\tClass Layout", "_eachLayoutView(${1:callback: function})"],
    ["_unregisterLayoutChild(child: View): void\tClass Layout", "_unregisterLayoutChild(${1:child: View})"],
    ["isUserInteractionEnabledProperty: Property\tClass Slider", "Static isUserInteractionEnabledProperty"],
    ["_eachLayoutView(callback: function): void\tClass Slider", "_eachLayoutView(${1:callback: function})"],
    ["eachLayoutChild(callback: function): void\tClass Layout", "eachLayoutChild(${1:callback: function})"],
    ["_resetValues(valueSource: number): void\tClass LayoutBase", "_resetValues(${1:valueSource: number})"],
    ["_resetValues(valueSource: number): void\tClass ActionItem", "_resetValues(${1:valueSource: number})"],
    ["fontStyleProperty: Property\tModule ui/styling/style", "fontStyleProperty"],
    ["hasListeners(eventName: string): boolean\tClass StackLayout", "hasListeners(${1:eventName: string})"],
    ["_registerLayoutChild(child: View): void\tClass LayoutBase", "_registerLayoutChild(${1:child: View})"],
    ["_getValueSource(property: Property): number\tClass Span", "_getValueSource(${1:property: Property})"],
    ["onActivityDestroyed: function(activity: any): void\tClass AndroidApplication", "onActivityDestroyed"],
    ["completed: function(image: any, key: string): void\tInterface DownloadRequest", "Optional completed"],
    ["deletePseudoClass(name: string): void\tClass AbsoluteLayout", "deletePseudoClass(${1:name: string})"],
    ["_resetValues(valueSource: number): void\tClass ScrollView", "_resetValues(${1:valueSource: number})"],
    ["hasListeners(eventName: string): boolean\tClass Placeholder", "hasListeners(${1:eventName: string})"],
    ["hasListeners(eventName: string): boolean\tClass GridLayout", "hasListeners(${1:eventName: string})"],
    ["_eachChildView(callback: function): any\tClass Repeater", "_eachChildView(${1:callback: function})"],
    ["_goToVisualState(state: string): any\tClass AbsoluteLayout", "_goToVisualState(${1:state: string})"],
    ["hasListeners(eventName: string): boolean\tClass ScrollView", "hasListeners(${1:eventName: string})"],
    ["_resetValues(valueSource: number): void\tClass TextField", "_resetValues(${1:valueSource: number})"],
    ["autocapitalizationTypeProperty: Property\tClass TextField", "Static autocapitalizationTypeProperty"],
    ["_eachChildView(callback: function): any\tClass HtmlView", "_eachChildView(${1:callback: function})"],
    ["_eachChildView(callback: function): any\tClass TextView", "_eachChildView(${1:callback: function})"],
    ["isUserInteractionEnabledProperty: Property\tClass Image", "Static isUserInteractionEnabledProperty"],
    ["hasListeners(eventName: string): boolean\tClass ActionItem", "hasListeners(${1:eventName: string})"],
    ["_resetValues(valueSource: number): void\tClass ActionBar", "_resetValues(${1:valueSource: number})"],
    ["_eachChildView(callback: function): any\tClass ListView", "_eachChildView(${1:callback: function})"],
    ["_setCore(data: PropertyChangeData): any\tClass HtmlView", "_setCore(${1:data: PropertyChangeData})"],
    ["_eachLayoutView(callback: function): void\tClass Image", "_eachLayoutView(${1:callback: function})"],
    ["hasListeners(eventName: string): boolean\tClass WrapLayout", "hasListeners(${1:eventName: string})"],
    ["hasListeners(eventName: string): boolean\tClass DockLayout", "hasListeners(${1:eventName: string})"],
    ["hasListeners(eventName: string): boolean\tClass ListPicker", "hasListeners(${1:eventName: string})"],
    ["_setCore(data: PropertyChangeData): any\tClass Repeater", "_setCore(${1:data: PropertyChangeData})"],
    ["fromResource(name: string): Promise<boolean>\tClass ImageSource", "fromResource(${1:name: string})"],
    ["_setCore(data: PropertyChangeData): any\tClass TextBase", "_setCore(${1:data: PropertyChangeData})"],
    ["hasListeners(eventName: string): boolean\tClass LayoutBase", "hasListeners(${1:eventName: string})"],
    ["set(name: string, value: any): void\tClass SegmentedBar", "set(${1:name: string}, ${2:value: any})"],
    ["fromBase64(source: string): Promise<boolean>\tClass ImageSource", "fromBase64(${1:source: string})"],
    ["isUserInteractionEnabledProperty: Property\tClass Label", "Static isUserInteractionEnabledProperty"],
    ["_eachLayoutView(callback: function): void\tClass Label", "_eachLayoutView(${1:callback: function})"],
    ["_inheritProperties(parentView: View): any\tClass View", "_inheritProperties(${1:parentView: View})"],
    ["setInlineStyle(style: string): void\tClass ActivityIndicator", "setInlineStyle(${1:style: string})"],
    ["_eachChildView(callback: function): any\tClass Progress", "_eachChildView(${1:callback: function})"],
    ["hasListeners(eventName: string): boolean\tClass DatePicker", "hasListeners(${1:eventName: string})"],
    ["hasListeners(eventName: string): boolean\tClass TimePicker", "hasListeners(${1:eventName: string})"],
    ["_inheritProperties(parentView: View): any\tClass Page", "_inheritProperties(${1:parentView: View})"],
    ["_setCore(data: PropertyChangeData): any\tClass Progress", "_setCore(${1:data: PropertyChangeData})"],
    ["isUserInteractionEnabledProperty: Property\tClass Frame", "Static isUserInteractionEnabledProperty"],
    ["fromObject(obj: any): Observable\tModule data/observable", "fromObject(${1:obj: any})"],
    ["_resetValues(valueSource: number): void\tClass SearchBar", "_resetValues(${1:valueSource: number})"],
    ["hasListeners(eventName: string): boolean\tClass Observable", "hasListeners(${1:eventName: string})"],
    ["_setCore(data: PropertyChangeData): any\tClass ListView", "_setCore(${1:data: PropertyChangeData})"],
    ["_getValue(property: Property): any\tClass ProxyViewContainer", "_getValue(${1:property: Property})"],
    ["_setCore(data: PropertyChangeData): any\tClass Bindable", "_setCore(${1:data: PropertyChangeData})"],
    ["_eachChildView(callback: function): any\tClass TextBase", "_eachChildView(${1:callback: function})"],
    ["_eachLayoutView(callback: function): void\tClass Frame", "_eachLayoutView(${1:callback: function})"],
    ["_setCore(data: PropertyChangeData): any\tClass TextView", "_setCore(${1:data: PropertyChangeData})"],
    ["minWidthProperty: Property\tModule ui/styling/style", "minWidthProperty"],
    ["grantResults: Array<Number>\tInterface AndroidActivityRequestPermissionsEventData", "grantResults"],
    ["set(name: string, value: any): void\tClass ProxyObject", "set(${1:name: string}, ${2:value: any})"],
    ["_parentChanged(oldParent: View): void\tClass SegmentedBar", "_parentChanged(${1:oldParent: View})"],
    ["set(name: string, value: any): void\tClass Placeholder", "set(${1:name: string}, ${2:value: any})"],
    ["_eachChildView(callback: function): any\tClass WebView", "_eachChildView(${1:callback: function})"],
    ["clipPathProperty: Property\tModule ui/styling/style", "clipPathProperty"],
    ["setInlineStyle(style: string): void\tClass EditableTextBase", "setInlineStyle(${1:style: string})"],
    ["_setCore(data: PropertyChangeData): any\tClass WebView", "_setCore(${1:data: PropertyChangeData})"],
    ["_resetValues(valueSource: number): void\tClass TextView", "_resetValues(${1:valueSource: number})"],
    ["_resetValues(valueSource: number): void\tClass Progress", "_resetValues(${1:valueSource: number})"],
    ["fontSizeProperty: Property\tModule ui/styling/style", "fontSizeProperty"],
    ["withBorderColor(value: Color): Background\tClass Background", "withBorderColor(${1:value: Color})"],
    ["_processNavigationQueue(page: Page): any\tClass Frame", "_processNavigationQueue(${1:page: Page})"],
    ["hasListeners(eventName: string): boolean\tClass SearchBar", "hasListeners(${1:eventName: string})"],
    ["autocapitalizationTypeProperty: Property\tClass TextView", "Static autocapitalizationTypeProperty"],
    ["_resetValues(valueSource: number): void\tClass Bindable", "_resetValues(${1:valueSource: number})"],
    ["_getValue(property: Property): any\tClass ActivityIndicator", "_getValue(${1:property: Property})"],
    ["_eachChildView(callback: function): any\tClass TabView", "_eachChildView(${1:callback: function})"],
    ["isUndefined(value: any): boolean\tModule utils/types", "isUndefined(${1:value: any})"],
    ["setInlineStyle(style: string): void\tClass CustomLayoutView", "setInlineStyle(${1:style: string})"],
    ["set(name: string, value: any): void\tClass TabViewItem", "set(${1:name: string}, ${2:value: any})"],
    ["_resetValues(valueSource: number): void\tClass Repeater", "_resetValues(${1:valueSource: number})"],
    ["deletePseudoClass(name: string): void\tClass SegmentedBar", "deletePseudoClass(${1:name: string})"],
    ["hasListeners(eventName: string): boolean\tClass TextField", "hasListeners(${1:eventName: string})"],
    ["_resetValues(valueSource: number): void\tClass ListView", "_resetValues(${1:valueSource: number})"],
    ["removeColumn(itemSpec: ItemSpec): void\tClass GridLayout", "removeColumn(${1:itemSpec: ItemSpec})"],
    ["withImage(value: ImageSource): Background\tClass Background", "withImage(${1:value: ImageSource})"],
    ["loadFromBase64(source: string): boolean\tClass ImageSource", "loadFromBase64(${1:source: string})"],
    ["addPseudoClass(name: string): void\tClass ProxyViewContainer", "addPseudoClass(${1:name: string})"],
    ["_resetValues(valueSource: number): void\tClass TextBase", "_resetValues(${1:valueSource: number})"],
    ["isUserInteractionEnabledProperty: Property\tClass Page", "Static isUserInteractionEnabledProperty"],
    ["hasListeners(eventName: string): boolean\tClass ActionBar", "hasListeners(${1:eventName: string})"],
    ["addCallback(callback: function): number\tModule fps-meter", "addCallback(${1:callback: function})"],
    ["_eachLayoutView(callback: function): void\tClass Page", "_eachLayoutView(${1:callback: function})"],
    ["_eachLayoutView(callback: function): void\tClass View", "_eachLayoutView(${1:callback: function})"],
    ["parseJSON(source: string): any\tModule utils/utils", "parseJSON(${1:source: string})"],
    ["convertString(value: any): any\tModule utils/utils", "convertString(${1:value: any})"],
    ["set(name: string, value: any): void\tClass StackLayout", "set(${1:name: string}, ${2:value: any})"],
    ["loadFromResource(name: string): boolean\tClass ImageSource", "loadFromResource(${1:name: string})"],
    ["set(name: string, value: any): void\tClass ContentView", "set(${1:name: string}, ${2:value: any})"],
    ["_resetValues(valueSource: number): void\tClass HtmlView", "_resetValues(${1:valueSource: number})"],
    ["isUserInteractionEnabledProperty: Property\tClass View", "Static isUserInteractionEnabledProperty"],
    ["getLastModified(path: string): Date\tClass FileSystemAccess", "getLastModified(${1:path: string})"],
    ["_setCore(data: PropertyChangeData): any\tClass TabView", "_setCore(${1:data: PropertyChangeData})"],
    ["parentsRegex: RegExp\tModule ui/builder/binding-builder", "parentsRegex"],
    ["set(name: string, value: any): void\tClass ScrollView", "set(${1:name: string}, ${2:value: any})"],
    ["unsetValue: Object\tModule ui/core/dependency-observable", "unsetValue"],
    ["transitionAndroid: NavigationTransition\tInterface NavigationEntry", "Optional transitionAndroid"],
    ["_setCore(data: PropertyChangeData): any\tClass Border", "_setCore(${1:data: PropertyChangeData})"],
    ["deletePseudoClass(name: string): void\tClass Placeholder", "deletePseudoClass(${1:name: string})"],
    ["_parentChanged(oldParent: View): void\tClass StackLayout", "_parentChanged(${1:oldParent: View})"],
    ["hasListeners(eventName: string): boolean\tClass Progress", "hasListeners(${1:eventName: string})"],
    ["hasListeners(eventName: string): boolean\tClass HtmlView", "hasListeners(${1:eventName: string})"],
    ["_eachChildView(callback: function): any\tClass Button", "_eachChildView(${1:callback: function})"],
    ["_parentChanged(oldParent: View): void\tClass ContentView", "_parentChanged(${1:oldParent: View})"],
    ["hasListeners(eventName: string): boolean\tClass Repeater", "hasListeners(${1:eventName: string})"],
    ["_parentChanged(oldParent: View): void\tClass Placeholder", "_parentChanged(${1:oldParent: View})"],
    ["toUIString(object: any): string\tModule utils/types", "toUIString(${1:object: any})"],
    ["_goToVisualState(state: string): any\tClass SegmentedBar", "_goToVisualState(${1:state: string})"],
    ["set(name: string, value: any): void\tClass DockLayout", "set(${1:name: string}, ${2:value: any})"],
    ["hasListeners(eventName: string): boolean\tClass TextBase", "hasListeners(${1:eventName: string})"],
    ["set(name: string, value: any): void\tClass GridLayout", "set(${1:name: string}, ${2:value: any})"],
    ["set(name: string, value: any): void\tClass LayoutBase", "set(${1:name: string}, ${2:value: any})"],
    ["_eachChildView(callback: function): any\tClass Layout", "_eachChildView(${1:callback: function})"],
    ["hasListeners(eventName: string): boolean\tClass Bindable", "hasListeners(${1:eventName: string})"],
    ["_setCore(data: PropertyChangeData): any\tClass Switch", "_setCore(${1:data: PropertyChangeData})"],
    ["_setCore(data: PropertyChangeData): any\tClass Button", "_setCore(${1:data: PropertyChangeData})"],
    ["deletePseudoClass(name: string): void\tClass StackLayout", "deletePseudoClass(${1:name: string})"],
    ["_resetValues(valueSource: number): void\tClass WebView", "_resetValues(${1:valueSource: number})"],
    ["set(name: string, value: any): void\tClass ActionItem", "set(${1:name: string}, ${2:value: any})"],
    ["set(name: string, value: any): void\tClass WrapLayout", "set(${1:name: string}, ${2:value: any})"],
    ["_getValue(property: Property): any\tClass CustomLayoutView", "_getValue(${1:property: Property})"],
    ["_eachChildView(callback: function): any\tClass Switch", "_eachChildView(${1:callback: function})"],
    ["hasListeners(eventName: string): boolean\tClass TextView", "hasListeners(${1:eventName: string})"],
    ["set(name: string, value: any): void\tClass ListPicker", "set(${1:name: string}, ${2:value: any})"],
    ["deletePseudoClass(name: string): void\tClass ContentView", "deletePseudoClass(${1:name: string})"],
    ["_getValue(property: Property): any\tClass NavigationButton", "_getValue(${1:property: Property})"],
    ["addPseudoClass(name: string): void\tClass ActivityIndicator", "addPseudoClass(${1:name: string})"],
    ["hasListeners(eventName: string): boolean\tClass ListView", "hasListeners(${1:eventName: string})"],
    ["set(name: string, value: any): void\tClass DatePicker", "set(${1:name: string}, ${2:value: any})"],
    ["_getValue(property: Property): any\tClass SegmentedBarItem", "_getValue(${1:property: Property})"],
    ["set(name: string, value: any): void\tClass TimePicker", "set(${1:name: string}, ${2:value: any})"],
    ["_setCore(data: PropertyChangeData): any\tClass Layout", "_setCore(${1:data: PropertyChangeData})"],
    ["set(name: string, value: any): void\tClass Observable", "set(${1:name: string}, ${2:value: any})"],
    ["_setCore(data: PropertyChangeData): any\tClass Slider", "_setCore(${1:data: PropertyChangeData})"],
    ["_eachChildView(callback: function): any\tClass Border", "_eachChildView(${1:callback: function})"],
    ["_eachChildView(callback: function): any\tClass Slider", "_eachChildView(${1:callback: function})"],
    ["_getValue(property: Property): any\tClass EditableTextBase", "_getValue(${1:property: Property})"],
    ["_resetValues(valueSource: number): void\tClass TabView", "_resetValues(${1:valueSource: number})"],
    ["onActivityStopped: function(activity: any): void\tClass AndroidApplication", "onActivityStopped"],
    ["deletePseudoClass(name: string): void\tClass ListPicker", "deletePseudoClass(${1:name: string})"],
    ["getChildIndex(child: View): number\tClass ProxyViewContainer", "getChildIndex(${1:child: View})"],
    ["_parentChanged(oldParent: View): void\tClass TimePicker", "_parentChanged(${1:oldParent: View})"],
    ["_parentChanged(oldParent: View): void\tClass WrapLayout", "_parentChanged(${1:oldParent: View})"],
    ["_resetValues(valueSource: number): void\tClass Border", "_resetValues(${1:valueSource: number})"],
    ["_resetValues(valueSource: number): void\tClass Slider", "_resetValues(${1:valueSource: number})"],
    ["_setCore(data: PropertyChangeData): any\tClass Image", "_setCore(${1:data: PropertyChangeData})"],
    ["_setCore(data: PropertyChangeData): any\tClass Frame", "_setCore(${1:data: PropertyChangeData})"],
    ["_parentChanged(oldParent: View): void\tClass LayoutBase", "_parentChanged(${1:oldParent: View})"],
    ["_setCore(data: PropertyChangeData): any\tClass Style", "_setCore(${1:data: PropertyChangeData})"],
    ["fromBase64(source: string): ImageSource\tModule image-source", "fromBase64(${1:source: string})"],
    ["deletePseudoClass(name: string): void\tClass DockLayout", "deletePseudoClass(${1:name: string})"],
    ["opacityProperty: Property\tModule ui/styling/style", "opacityProperty"],
    ["_parentChanged(oldParent: View): void\tClass ListPicker", "_parentChanged(${1:oldParent: View})"],
    ["toFile: function(destinationFilePath?: string): File\tInterface HttpContent", "toFile"],
    ["_resetValues(valueSource: number): void\tClass Layout", "_resetValues(${1:valueSource: number})"],
    ["deletePseudoClass(name: string): void\tClass ScrollView", "deletePseudoClass(${1:name: string})"],
    ["setInlineStyle(style: string): void\tClass AbsoluteLayout", "setInlineStyle(${1:style: string})"],
    ["set(name: string, value: any): void\tClass ActionBar", "set(${1:name: string}, ${2:value: any})"],
    ["set(name: string, value: any): void\tClass TextField", "set(${1:name: string}, ${2:value: any})"],
    ["onActivityResumed: function(activity: any): void\tClass AndroidApplication", "onActivityResumed"],
    ["_setCore(data: PropertyChangeData): any\tClass Label", "_setCore(${1:data: PropertyChangeData})"],
    ["deletePseudoClass(name: string): void\tClass WrapLayout", "deletePseudoClass(${1:name: string})"],
    ["_parentChanged(oldParent: View): void\tClass GridLayout", "_parentChanged(${1:oldParent: View})"],
    ["_parentChanged(oldParent: View): void\tClass ScrollView", "_parentChanged(${1:oldParent: View})"],
    ["_goToVisualState(state: string): any\tClass StackLayout", "_goToVisualState(${1:state: string})"],
    ["deletePseudoClass(name: string): void\tClass DatePicker", "deletePseudoClass(${1:name: string})"],
    ["updateTextTriggerProperty: Property\tClass EditableTextBase", "Static updateTextTriggerProperty"],
    ["onActivityStarted: function(activity: any): void\tClass AndroidApplication", "onActivityStarted"],
    ["hasListeners(eventName: string): boolean\tClass WebView", "hasListeners(${1:eventName: string})"],
    ["_parentChanged(oldParent: View): void\tClass DockLayout", "_parentChanged(${1:oldParent: View})"],
    ["_goToVisualState(state: string): any\tClass ContentView", "_goToVisualState(${1:state: string})"],
    ["_onRowAdded(itemSpec: ItemSpec): void\tClass GridLayout", "_onRowAdded(${1:itemSpec: ItemSpec})"],
    ["normalizePath(path: string): string\tClass FileSystemAccess", "normalizePath(${1:path: string})"],
    ["deletePseudoClass(name: string): void\tClass LayoutBase", "deletePseudoClass(${1:name: string})"],
    ["isFunction(value: any): boolean\tModule utils/types", "isFunction(${1:value: any})"],
    ["deletePseudoClass(name: string): void\tClass GridLayout", "deletePseudoClass(${1:name: string})"],
    ["_parentChanged(oldParent: View): void\tClass DatePicker", "_parentChanged(${1:oldParent: View})"],
    ["_registerLayoutChild(child: View): void\tClass Layout", "_registerLayoutChild(${1:child: View})"],
    ["_resetValues(valueSource: number): void\tClass Switch", "_resetValues(${1:valueSource: number})"],
    ["addPseudoClass(name: string): void\tClass EditableTextBase", "addPseudoClass(${1:name: string})"],
    ["deletePseudoClass(name: string): void\tClass TimePicker", "deletePseudoClass(${1:name: string})"],
    ["_goToVisualState(state: string): any\tClass Placeholder", "_goToVisualState(${1:state: string})"],
    ["_setCore(data: PropertyChangeData): any\tClass Style", "_setCore(${1:data: PropertyChangeData})"],
    ["_eachChildView(callback: function): any\tClass Image", "_eachChildView(${1:callback: function})"],
    ["hasListeners(eventName: string): boolean\tClass TabView", "hasListeners(${1:eventName: string})"],
    ["set(name: string, value: any): void\tClass SearchBar", "set(${1:name: string}, ${2:value: any})"],
    ["permissions: Array<String>\tInterface AndroidActivityRequestPermissionsEventData", "permissions"],
    ["fromResource(name: string): ImageSource\tModule image-source", "fromResource(${1:name: string})"],
    ["_setCore(data: PropertyChangeData): any\tClass Cache", "_setCore(${1:data: PropertyChangeData})"],
    ["_resetValues(valueSource: number): void\tClass Button", "_resetValues(${1:valueSource: number})"],
    ["mergeCssSelectors(module: any): void\tModule application", "mergeCssSelectors(${1:module: any})"],
    ["isDataURI(uri: string): boolean\tModule utils/utils", "isDataURI(${1:uri: string})"],
    ["addPseudoClass(name: string): void\tClass CustomLayoutView", "addPseudoClass(${1:name: string})"],
    ["_eachChildView(callback: function): any\tClass Frame", "_eachChildView(${1:callback: function})"],
    ["_eachChildView(callback: function): any\tClass Label", "_eachChildView(${1:callback: function})"],
    ["_resetValues(valueSource: number): void\tClass Image", "_resetValues(${1:valueSource: number})"],
    ["folderExists(path: string): boolean\tClass FileSystemAccess", "folderExists(${1:path: string})"],
    ["set(name: string, value: any): void\tClass TextView", "set(${1:name: string}, ${2:value: any})"],
    ["removeWriter(writer: TraceWriter): any\tModule trace", "removeWriter(${1:writer: TraceWriter})"],
    ["hasListeners(eventName: string): boolean\tClass Slider", "hasListeners(${1:eventName: string})"],
    ["hasListeners(eventName: string): boolean\tClass Button", "hasListeners(${1:eventName: string})"],
    ["_eachChildView(callback: function): any\tClass View", "_eachChildView(${1:callback: function})"],
    ["set(name: string, value: any): void\tClass Progress", "set(${1:name: string}, ${2:value: any})"],
    ["deletePseudoClass(name: string): void\tClass SearchBar", "deletePseudoClass(${1:name: string})"],
    ["_goToVisualState(state: string): any\tClass DatePicker", "_goToVisualState(${1:state: string})"],
    ["set(name: string, value: any): void\tClass HtmlView", "set(${1:name: string}, ${2:value: any})"],
    ["_goToVisualState(state: string): any\tClass TimePicker", "_goToVisualState(${1:state: string})"],
    ["_parentChanged(oldParent: View): void\tClass TextField", "_parentChanged(${1:oldParent: View})"],
    ["hasListeners(eventName: string): boolean\tClass Layout", "hasListeners(${1:eventName: string})"],
    ["setCategories(categories: string): any\tModule trace", "setCategories(${1:categories: string})"],
    ["_goToVisualState(state: string): any\tClass ListPicker", "_goToVisualState(${1:state: string})"],
    ["_goToVisualState(state: string): any\tClass LayoutBase", "_goToVisualState(${1:state: string})"],
    ["addCategories(categories: string): any\tModule trace", "addCategories(${1:categories: string})"],
    ["_resetValues(valueSource: number): void\tClass Style", "_resetValues(${1:valueSource: number})"],
    ["_setCore(data: PropertyChangeData): any\tClass Span", "_setCore(${1:data: PropertyChangeData})"],
    ["_goToVisualState(state: string): any\tClass WrapLayout", "_goToVisualState(${1:state: string})"],
    ["_resetValues(valueSource: number): void\tClass Style", "_resetValues(${1:valueSource: number})"],
    ["hasListeners(eventName: string): boolean\tClass Switch", "hasListeners(${1:eventName: string})"],
    ["_resetValues(valueSource: number): void\tClass Frame", "_resetValues(${1:valueSource: number})"],
    ["_getValue(property: Property): any\tClass AbsoluteLayout", "_getValue(${1:property: Property})"],
    ["_eachChildView(callback: function): any\tClass Page", "_eachChildView(${1:callback: function})"],
    ["deletePseudoClass(name: string): void\tClass ActionBar", "deletePseudoClass(${1:name: string})"],
    ["_goToVisualState(state: string): any\tClass ScrollView", "_goToVisualState(${1:state: string})"],
    ["_parentChanged(oldParent: View): void\tClass ActionBar", "_parentChanged(${1:oldParent: View})"],
    ["set(name: string, value: any): void\tClass ListView", "set(${1:name: string}, ${2:value: any})"],
    ["set(name: string, value: any): void\tClass Bindable", "set(${1:name: string}, ${2:value: any})"],
    ["_setCore(data: PropertyChangeData): any\tClass Page", "_setCore(${1:data: PropertyChangeData})"],
    ["_goToVisualState(state: string): any\tClass DockLayout", "_goToVisualState(${1:state: string})"],
    ["_goToVisualState(state: string): any\tClass GridLayout", "_goToVisualState(${1:state: string})"],
    ["_parentChanged(oldParent: View): void\tClass SearchBar", "_parentChanged(${1:oldParent: View})"],
    ["set(name: string, value: any): void\tClass TextBase", "set(${1:name: string}, ${2:value: any})"],
    ["_resetValues(valueSource: number): void\tClass Label", "_resetValues(${1:valueSource: number})"],
    ["deletePseudoClass(name: string): void\tClass TextField", "deletePseudoClass(${1:name: string})"],
    ["isCategorySet(category: string): boolean\tModule trace", "isCategorySet(${1:category: string})"],
    ["set(name: string, value: any): void\tClass Repeater", "set(${1:name: string}, ${2:value: any})"],
    ["hasListeners(eventName: string): boolean\tClass Border", "hasListeners(${1:eventName: string})"],
    ["_setCore(data: PropertyChangeData): any\tClass View", "_setCore(${1:data: PropertyChangeData})"],
    ["hasListeners(eventName: string): boolean\tClass Label", "hasListeners(${1:eventName: string})"],
    ["deletePseudoClass(name: string): void\tClass HtmlView", "deletePseudoClass(${1:name: string})"],
    ["setInlineStyle(style: string): void\tClass SegmentedBar", "setInlineStyle(${1:style: string})"],
    ["rename(newName: string): Promise<any>\tClass FileSystemEntity", "rename(${1:newName: string})"],
    ["scaleXProperty: Property\tModule ui/styling/style", "scaleXProperty"],
    ["_goToVisualState(state: string): any\tClass SearchBar", "_goToVisualState(${1:state: string})"],
    ["heightProperty: Property\tModule ui/styling/style", "heightProperty"],
    ["_parentChanged(oldParent: View): void\tClass TextView", "_parentChanged(${1:oldParent: View})"],
    ["_parentChanged(oldParent: View): void\tClass HtmlView", "_parentChanged(${1:oldParent: View})"],
    ["rotateProperty: Property\tModule ui/styling/style", "rotateProperty"],
    ["_resetValues(valueSource: number): void\tClass Page", "_resetValues(${1:valueSource: number})"],
    ["_goToVisualState(state: string): any\tClass ActionBar", "_goToVisualState(${1:state: string})"],
    ["deletePseudoClass(name: string): void\tClass Repeater", "deletePseudoClass(${1:name: string})"],
    ["withPosition(value: string): Background\tClass Background", "withPosition(${1:value: string})"],
    ["enqueue(request: DownloadRequest): any\tClass Cache", "enqueue(${1:request: DownloadRequest})"],
    ["deletePseudoClass(name: string): void\tClass TextView", "deletePseudoClass(${1:name: string})"],
    ["deletePseudoClass(name: string): void\tClass ListView", "deletePseudoClass(${1:name: string})"],
    ["_resetValues(valueSource: number): void\tClass Span", "_resetValues(${1:valueSource: number})"],
    ["isDefined(value: any): boolean\tModule utils/types", "isDefined(${1:value: any})"],
    ["hasListeners(eventName: string): boolean\tClass Image", "hasListeners(${1:eventName: string})"],
    ["setNativeSource(source: any): boolean\tClass ImageSource", "setNativeSource(${1:source: any})"],
    ["set(name: string, value: any): void\tClass WebView", "set(${1:name: string}, ${2:value: any})"],
    ["_parentChanged(oldParent: View): void\tClass TextBase", "_parentChanged(${1:oldParent: View})"],
    ["deletePseudoClass(name: string): void\tClass Progress", "deletePseudoClass(${1:name: string})"],
    ["activityBackPressedEvent: string\tClass AndroidApplication", "Static activityBackPressedEvent"],
    ["_resetValues(valueSource: number): void\tClass View", "_resetValues(${1:valueSource: number})"],
    ["hasListeners(eventName: string): boolean\tClass Cache", "hasListeners(${1:eventName: string})"],
    ["deletePseudoClass(name: string): void\tClass TextBase", "deletePseudoClass(${1:name: string})"],
    ["set(name: string, value: any): void\tClass TabView", "set(${1:name: string}, ${2:value: any})"],
    ["_goToVisualState(state: string): any\tClass TextField", "_goToVisualState(${1:state: string})"],
    ["scaleYProperty: Property\tModule ui/styling/style", "scaleYProperty"],
    ["hasListeners(eventName: string): boolean\tClass Frame", "hasListeners(${1:eventName: string})"],
    ["_parentChanged(oldParent: View): void\tClass Progress", "_parentChanged(${1:oldParent: View})"],
    ["zIndexProperty: Property\tModule ui/styling/style", "zIndexProperty"],
    ["hasListeners(eventName: string): boolean\tClass Style", "hasListeners(${1:eventName: string})"],
    ["_parentChanged(oldParent: View): void\tClass ListView", "_parentChanged(${1:oldParent: View})"],
    ["withClipPath(value: string): Background\tClass Background", "withClipPath(${1:value: string})"],
    ["hasListeners(eventName: string): boolean\tClass Style", "hasListeners(${1:eventName: string})"],
    ["onActivityPaused: function(activity: any): void\tClass AndroidApplication", "onActivityPaused"],
    ["_parentChanged(oldParent: View): void\tClass Repeater", "_parentChanged(${1:oldParent: View})"],
    ["addPseudoClass(name: string): void\tClass AbsoluteLayout", "addPseudoClass(${1:name: string})"],
    ["joinPaths(paths: string[]): string\tClass FileSystemAccess", "joinPaths(${1:paths: string[]})"],
    ["setInlineStyle(style: string): void\tClass ContentView", "setInlineStyle(${1:style: string})"],
    ["fragmentForPage(page: Page): any\tInterface AndroidFrame", "fragmentForPage(${1:page: Page})"],
    ["set(name: string, value: any): void\tClass Button", "set(${1:name: string}, ${2:value: any})"],
    ["hasListeners(eventName: string): boolean\tClass View", "hasListeners(${1:eventName: string})"],
    ["deletePseudoClass(name: string): void\tClass TabView", "deletePseudoClass(${1:name: string})"],
    ["hasListeners(eventName: string): boolean\tClass Page", "hasListeners(${1:eventName: string})"],
    ["set(name: string, value: any): void\tClass Border", "set(${1:name: string}, ${2:value: any})"],
    ["_goToVisualState(state: string): any\tClass TextView", "_goToVisualState(${1:state: string})"],
    ["_parentChanged(oldParent: View): void\tClass WebView", "_parentChanged(${1:oldParent: View})"],
    ["_getValue(property: Property): any\tClass SegmentedBar", "_getValue(${1:property: Property})"],
    ["observe(type: GestureTypes): any\tClass GesturesObserver", "observe(${1:type: GestureTypes})"],
    ["_emit(eventNames: string): any\tClass DependencyObservable", "_emit(${1:eventNames: string})"],
    ["hasListeners(eventName: string): boolean\tClass Span", "hasListeners(${1:eventName: string})"],
    ["deletePseudoClass(name: string): void\tClass WebView", "deletePseudoClass(${1:name: string})"],
    ["getClass(object: any): string\tModule utils/types", "getClass(${1:object: any})"],
    ["_requestLayoutOnTextChanged(): void\tClass EditableTextBase", "_requestLayoutOnTextChanged()"],
    ["_goToVisualState(state: string): any\tClass Progress", "_goToVisualState(${1:state: string})"],
    ["_goToVisualState(state: string): any\tClass HtmlView", "_goToVisualState(${1:state: string})"],
    ["fromUrl(url: string): Promise<ImageSource>\tModule image-source", "fromUrl(${1:url: string})"],
    ["_goToVisualState(state: string): any\tClass ListView", "_goToVisualState(${1:state: string})"],
    ["setInlineStyle(style: string): void\tClass Placeholder", "setInlineStyle(${1:style: string})"],
    ["_parentChanged(oldParent: View): void\tClass TabView", "_parentChanged(${1:oldParent: View})"],
    ["setInlineStyle(style: string): void\tClass StackLayout", "setInlineStyle(${1:style: string})"],
    ["_goToVisualState(state: string): any\tClass TextBase", "_goToVisualState(${1:state: string})"],
    ["set(name: string, value: any): void\tClass Slider", "set(${1:name: string}, ${2:value: any})"],
    ["set(name: string, value: any): void\tClass Layout", "set(${1:name: string}, ${2:value: any})"],
    ["_goToVisualState(state: string): any\tClass Repeater", "_goToVisualState(${1:state: string})"],
    ["set(name: string, value: any): void\tClass Switch", "set(${1:name: string}, ${2:value: any})"],
    ["setInlineStyle(style: string): void\tClass TimePicker", "setInlineStyle(${1:style: string})"],
    ["setInlineStyle(style: string): void\tClass DatePicker", "setInlineStyle(${1:style: string})"],
    ["_goToVisualState(state: string): any\tClass WebView", "_goToVisualState(${1:state: string})"],
    ["removeRow(itemSpec: ItemSpec): void\tClass GridLayout", "removeRow(${1:itemSpec: ItemSpec})"],
    ["_goToVisualState(state: string): any\tClass TabView", "_goToVisualState(${1:state: string})"],
    ["setInlineStyle(style: string): void\tClass ListPicker", "setInlineStyle(${1:style: string})"],
    ["setInlineStyle(style: string): void\tClass DockLayout", "setInlineStyle(${1:style: string})"],
    ["ns(root: string, ns: any): void\tClass EasySAXParser", "ns(${1:root: string}, ${2:ns: any})"],
    ["getChildAt(index: number): View\tClass ProxyViewContainer", "getChildAt(${1:index: number})"],
    ["addColumn(itemSpec: ItemSpec): void\tClass GridLayout", "addColumn(${1:itemSpec: ItemSpec})"],
    ["_getValue(property: Property): any\tClass StackLayout", "_getValue(${1:property: Property})"],
    ["getActivePointers(): Array<Pointer>\tInterface TouchGestureEventData", "getActivePointers()"],
    ["_getValue(property: Property): any\tClass Placeholder", "_getValue(${1:property: Property})"],
    ["setInlineStyle(style: string): void\tClass ScrollView", "setInlineStyle(${1:style: string})"],
    ["deletePseudoClass(name: string): void\tClass Button", "deletePseudoClass(${1:name: string})"],
    ["_getValue(property: Property): any\tClass ContentView", "_getValue(${1:property: Property})"],
    ["deletePseudoClass(name: string): void\tClass Layout", "deletePseudoClass(${1:name: string})"],
    ["widthProperty: Property\tModule ui/styling/style", "widthProperty"],
    ["navigate(entry: NavigationEntry): any\tClass Frame", "navigate(${1:entry: NavigationEntry})"],
    ["getChildIndex(child: View): number\tClass AbsoluteLayout", "getChildIndex(${1:child: View})"],
    ["isObject(value: any): boolean\tModule utils/types", "isObject(${1:value: any})"],
    ["isNumber(value: any): boolean\tModule utils/types", "isNumber(${1:value: any})"],
    ["set(name: string, value: any): void\tClass Frame", "set(${1:name: string}, ${2:value: any})"],
    ["set(name: string, value: any): void\tClass Style", "set(${1:name: string}, ${2:value: any})"],
    ["_onAttached(context: any): void\tClass ProxyViewContainer", "_onAttached(${1:context: any})"],
    ["navigate(pageModuleName: string): any\tClass Frame", "navigate(${1:pageModuleName: string})"],
    ["set(name: string, value: any): void\tClass Label", "set(${1:name: string}, ${2:value: any})"],
    ["isString(value: any): boolean\tModule utils/types", "isString(${1:value: any})"],
    ["_getValue(property: Property): any\tClass ProxyObject", "_getValue(${1:property: Property})"],
    ["deletePseudoClass(name: string): void\tClass Switch", "deletePseudoClass(${1:name: string})"],
    ["_getValue(property: Property): any\tClass TabViewItem", "_getValue(${1:property: Property})"],
    ["_parentChanged(oldParent: View): void\tClass Switch", "_parentChanged(${1:oldParent: View})"],
    ["deletePseudoClass(name: string): void\tClass Slider", "deletePseudoClass(${1:name: string})"],
    ["_parentChanged(oldParent: View): void\tClass Layout", "_parentChanged(${1:oldParent: View})"],
    ["set(name: string, value: any): void\tClass Style", "set(${1:name: string}, ${2:value: any})"],
    ["set(object: any, src: Source): any\tClass Source", "set(${1:object: any}, ${2:src: Source})"],
    ["setInlineStyle(style: string): void\tClass WrapLayout", "setInlineStyle(${1:style: string})"],
    ["openUrl(url: string): boolean\tModule utils/utils", "openUrl(${1:url: string})"],
    ["_parentChanged(oldParent: View): void\tClass Border", "_parentChanged(${1:oldParent: View})"],
    ["_isAddedToNativeVisualTree: boolean\tClass ProxyViewContainer", "_isAddedToNativeVisualTree"],
    ["addPseudoClass(name: string): void\tClass SegmentedBar", "addPseudoClass(${1:name: string})"],
    ["set(name: string, value: any): void\tClass Image", "set(${1:name: string}, ${2:value: any})"],
    ["automationTextProperty: Property\tClass ProxyViewContainer", "Static automationTextProperty"],
    ["_parentChanged(oldParent: View): void\tClass Slider", "_parentChanged(${1:oldParent: View})"],
    ["_parentChanged(oldParent: View): void\tClass Button", "_parentChanged(${1:oldParent: View})"],
    ["colorProperty: Property\tModule ui/styling/style", "colorProperty"],
    ["setInlineStyle(style: string): void\tClass GridLayout", "setInlineStyle(${1:style: string})"],
    ["deletePseudoClass(name: string): void\tClass Border", "deletePseudoClass(${1:name: string})"],
    ["bindingContextProperty: Property\tClass ProxyViewContainer", "Static bindingContextProperty"],
    ["setInlineStyle(style: string): void\tClass LayoutBase", "setInlineStyle(${1:style: string})"],
    ["_getValue(property: Property): any\tClass ActionItem", "_getValue(${1:property: Property})"],
    ["set(name: string, value: any): void\tClass Page", "set(${1:name: string}, ${2:value: any})"],
    ["addPseudoClass(name: string): void\tClass StackLayout", "addPseudoClass(${1:name: string})"],
    ["set(name: string, value: any): void\tClass View", "set(${1:name: string}, ${2:value: any})"],
    ["deletePseudoClass(name: string): void\tClass Frame", "deletePseudoClass(${1:name: string})"],
    ["_getValue(property: Property): any\tClass WrapLayout", "_getValue(${1:property: Property})"],
    ["deletePseudoClass(name: string): void\tClass Label", "deletePseudoClass(${1:name: string})"],
    ["_parentChanged(oldParent: View): void\tClass Image", "_parentChanged(${1:oldParent: View})"],
    ["set(name: string, value: any): void\tClass Span", "set(${1:name: string}, ${2:value: any})"],
    ["_goToVisualState(state: string): any\tClass Slider", "_goToVisualState(${1:state: string})"],
    ["_getValue(property: Property): any\tClass LayoutBase", "_getValue(${1:property: Property})"],
    ["_goToVisualState(state: string): any\tClass Layout", "_goToVisualState(${1:state: string})"],
    ["fromFile(path: string): Promise<boolean>\tClass ImageSource", "fromFile(${1:path: string})"],
    ["_isAddedToNativeVisualTree: boolean\tClass ActivityIndicator", "_isAddedToNativeVisualTree"],
    ["_getValue(property: Property): any\tClass ListPicker", "_getValue(${1:property: Property})"],
    ["_parentChanged(oldParent: View): void\tClass Label", "_parentChanged(${1:oldParent: View})"],
    ["_onAttached(context: any): void\tClass ActivityIndicator", "_onAttached(${1:context: any})"],
    ["automationTextProperty: Property\tClass ActivityIndicator", "Static automationTextProperty"],
    ["addPseudoClass(name: string): void\tClass ContentView", "addPseudoClass(${1:name: string})"],
    ["addPseudoClass(name: string): void\tClass Placeholder", "addPseudoClass(${1:name: string})"],
    ["_emit(eventNames: string): any\tClass ObservableArray<T>", "_emit(${1:eventNames: string})"],
    ["_emit(eventNames: string): any\tClass AndroidApplication", "_emit(${1:eventNames: string})"],
    ["setInlineStyle(style: string): void\tClass SearchBar", "setInlineStyle(${1:style: string})"],
    ["setInlineStyle(style: string): void\tClass ActionBar", "setInlineStyle(${1:style: string})"],
    ["_getValue(property: Property): any\tClass DockLayout", "_getValue(${1:property: Property})"],
    ["_getValue(property: Property): any\tClass ScrollView", "_getValue(${1:property: Property})"],
    ["_goToVisualState(state: string): any\tClass Button", "_goToVisualState(${1:state: string})"],
    ["_goToVisualState(state: string): any\tClass Border", "_goToVisualState(${1:state: string})"],
    ["getViewById<T>(id: string): T\tClass ProxyViewContainer", "getViewById<T>(${1:id: string})"],
    ["_emit(eventNames: string): any\tClass ProxyViewContainer", "_emit(${1:eventNames: string})"],
    ["removeItem(item: ActionItem): void\tClass ActionItems", "removeItem(${1:item: ActionItem})"],
    ["_getValue(property: Property): any\tClass TimePicker", "_getValue(${1:property: Property})"],
    ["_getValue(property: Property): any\tClass DatePicker", "_getValue(${1:property: Property})"],
    ["_parentChanged(oldParent: View): void\tClass Frame", "_parentChanged(${1:oldParent: View})"],
    ["deletePseudoClass(name: string): void\tClass Image", "deletePseudoClass(${1:name: string})"],
    ["_getValue(property: Property): any\tClass GridLayout", "_getValue(${1:property: Property})"],
    ["setInlineStyle(style: string): void\tClass TextField", "setInlineStyle(${1:style: string})"],
    ["fileExists(path: string): boolean\tClass FileSystemAccess", "fileExists(${1:path: string})"],
    ["bindingContextProperty: Property\tClass ActivityIndicator", "Static bindingContextProperty"],
    ["_goToVisualState(state: string): any\tClass Switch", "_goToVisualState(${1:state: string})"],
    ["loadFromFile(path: string): boolean\tClass ImageSource", "loadFromFile(${1:path: string})"],
    ["automationTextProperty: Property\tClass EditableTextBase", "Static automationTextProperty"],
    ["_parentChanged(oldParent: View): void\tClass Page", "_parentChanged(${1:oldParent: View})"],
    ["addPseudoClass(name: string): void\tClass ScrollView", "addPseudoClass(${1:name: string})"],
    ["bindingContextProperty: Property\tClass EditableTextBase", "Static bindingContextProperty"],
    ["setInlineStyle(style: string): void\tClass HtmlView", "setInlineStyle(${1:style: string})"],
    ["addCssFile(cssFileName: string): void\tClass Page", "addCssFile(${1:cssFileName: string})"],
    ["setInlineStyle(style: string): void\tClass Repeater", "setInlineStyle(${1:style: string})"],
    ["_onAttached(context: any): void\tClass CustomLayoutView", "_onAttached(${1:context: any})"],
    ["setInlineStyle(style: string): void\tClass ListView", "setInlineStyle(${1:style: string})"],
    ["activityDestroyedEvent: string\tClass AndroidApplication", "Static activityDestroyedEvent"],
    ["addPseudoClass(name: string): void\tClass LayoutBase", "addPseudoClass(${1:name: string})"],
    ["_parentChanged(oldParent: View): void\tClass View", "_parentChanged(${1:oldParent: View})"],
    ["deletePseudoClass(name: string): void\tClass Page", "deletePseudoClass(${1:name: string})"],
    ["bindingContextProperty: Property\tClass SegmentedBarItem", "Static bindingContextProperty"],
    ["setInlineStyle(style: string): void\tClass TextView", "setInlineStyle(${1:style: string})"],
    ["set(key: string, image: any): void\tClass Cache", "set(${1:key: string}, ${2:image: any})"],
    ["_updateIOSTabBarColorsAndFonts(): void\tClass TabView", "_updateIOSTabBarColorsAndFonts()"],
    ["_isAddedToNativeVisualTree: boolean\tClass EditableTextBase", "_isAddedToNativeVisualTree"],
    ["addPseudoClass(name: string): void\tClass TimePicker", "addPseudoClass(${1:name: string})"],
    ["_goToVisualState(state: string): any\tClass Frame", "_goToVisualState(${1:state: string})"],
    ["deletePseudoClass(name: string): void\tClass View", "deletePseudoClass(${1:name: string})"],
    ["_getValue(property: Property): any\tClass TextField", "_getValue(${1:property: Property})"],
    ["saveActivityStateEvent: string\tClass AndroidApplication", "Static saveActivityStateEvent"],
    ["addPseudoClass(name: string): void\tClass GridLayout", "addPseudoClass(${1:name: string})"],
    ["_emit(eventNames: string): any\tClass ActivityIndicator", "_emit(${1:eventNames: string})"],
    ["_goToVisualState(state: string): any\tClass Image", "_goToVisualState(${1:state: string})"],
    ["_setTextInternal(value: string): void\tClass Span", "_setTextInternal(${1:value: string})"],
    ["_onAttached(context: any): void\tClass EditableTextBase", "_onAttached(${1:context: any})"],
    ["bindingContextProperty: Property\tClass CustomLayoutView", "Static bindingContextProperty"],
    ["automationTextProperty: Property\tClass CustomLayoutView", "Static automationTextProperty"],
    ["addPseudoClass(name: string): void\tClass ListPicker", "addPseudoClass(${1:name: string})"],
    ["getViewById<T>(id: string): T\tClass ActivityIndicator", "getViewById<T>(${1:id: string})"],
    ["selectedIndexChangedEvent: string\tClass SegmentedBar", "Static selectedIndexChangedEvent"],
    ["setInlineStyle(style: string): void\tClass Progress", "setInlineStyle(${1:style: string})"],
    ["_isAddedToNativeVisualTree: boolean\tClass CustomLayoutView", "_isAddedToNativeVisualTree"],
    ["addPseudoClass(name: string): void\tClass DatePicker", "addPseudoClass(${1:name: string})"],
    ["_goToVisualState(state: string): any\tClass Label", "_goToVisualState(${1:state: string})"],
    ["addPseudoClass(name: string): void\tClass WrapLayout", "addPseudoClass(${1:name: string})"],
    ["_getValue(property: Property): any\tClass ActionBar", "_getValue(${1:property: Property})"],
    ["LightGoldenRodYellow: any\tModule color/known-colors", "LightGoldenRodYellow"],
    ["bindingContextProperty: Property\tClass NavigationButton", "Static bindingContextProperty"],
    ["_getNavBarVisible(page: Page): boolean\tClass Frame", "_getNavBarVisible(${1:page: Page})"],
    ["withRepeat(value: string): Background\tClass Background", "withRepeat(${1:value: string})"],
    ["_shouldApplyStyleHandlers(): any\tClass ProxyViewContainer", "_shouldApplyStyleHandlers()"],
    ["_getValue(property: Property): any\tClass SearchBar", "_getValue(${1:property: Property})"],
    ["setInlineStyle(style: string): void\tClass TextBase", "setInlineStyle(${1:style: string})"],
    ["addPseudoClass(name: string): void\tClass DockLayout", "addPseudoClass(${1:name: string})"],
    ["orientationProperty: Property\tModule ui/scroll-view", "orientationProperty"],
    ["_goToVisualState(state: string): any\tClass Page", "_goToVisualState(${1:state: string})"],
    ["updateTextTriggerProperty: Property\tClass TextField", "Static updateTextTriggerProperty"],
    ["_emit(eventNames: string): any\tInterface AndroidFrame", "_emit(${1:eventNames: string})"],
    ["getViewById<T>(id: string): T\tClass EditableTextBase", "getViewById<T>(${1:id: string})"],
    ["requestCode: number\tInterface AndroidActivityRequestPermissionsEventData", "requestCode"],
    ["addPseudoClass(name: string): void\tClass SearchBar", "addPseudoClass(${1:name: string})"],
    ["eachEntity(onEntity: function): any\tClass Folder", "eachEntity(${1:onEntity: function})"],
    ["getChildIndex(child: View): number\tClass StackLayout", "getChildIndex(${1:child: View})"],
    ["_getValue(property: Property): any\tClass Repeater", "_getValue(${1:property: Property})"],
    ["addPseudoClass(name: string): void\tClass ActionBar", "addPseudoClass(${1:name: string})"],
    ["_getValue(property: Property): any\tClass TextBase", "_getValue(${1:property: Property})"],
    ["_getValue(property: Property): any\tClass ListView", "_getValue(${1:property: Property})"],
    ["_emit(eventNames: string): any\tClass EditableTextBase", "_emit(${1:eventNames: string})"],
    ["transitioniOS: NavigationTransition\tInterface NavigationEntry", "Optional transitioniOS"],
    ["_getCurrentLayoutBounds(): object\tClass ProxyViewContainer", "_getCurrentLayoutBounds()"],
    ["_emit(eventNames: string): any\tClass SegmentedBarItem", "_emit(${1:eventNames: string})"],
    ["getViewById<T>(id: string): T\tClass CustomLayoutView", "getViewById<T>(${1:id: string})"],
    ["_getValue(property: Property): any\tClass Progress", "_getValue(${1:property: Property})"],
    ["_shouldApplyStyleHandlers(): any\tClass ActivityIndicator", "_shouldApplyStyleHandlers()"],
    ["setInlineStyle(style: string): void\tClass WebView", "setInlineStyle(${1:style: string})"],
    ["getItemAt(index: number): ActionItem\tClass ActionItems", "getItemAt(${1:index: number})"],
    ["_setNativeMinuteIntervalTime(): void\tClass TimePicker", "_setNativeMinuteIntervalTime()"],
    ["addPseudoClass(name: string): void\tClass TextField", "addPseudoClass(${1:name: string})"],
    ["_goToVisualState(state: string): any\tClass View", "_goToVisualState(${1:state: string})"],
    ["setInlineStyle(style: string): void\tClass TabView", "setInlineStyle(${1:style: string})"],
    ["_getValue(property: Property): any\tClass TextView", "_getValue(${1:property: Property})"],
    ["addWriter(writer: TraceWriter): any\tModule trace", "addWriter(${1:writer: TraceWriter})"],
    ["unbind(property: string): any\tClass ProxyViewContainer", "unbind(${1:property: string})"],
    ["_getValue(property: Property): any\tClass HtmlView", "_getValue(${1:property: Property})"],
    ["concat<U>(...items: U[]): T[]\tClass ObservableArray<T>", "concat<U>(${1:...items: U[]})"],
    ["_getValue(property: Property): any\tClass Bindable", "_getValue(${1:property: Property})"],
    ["_emit(eventNames: string): any\tClass CustomLayoutView", "_emit(${1:eventNames: string})"],
    ["_emit(eventNames: string): any\tClass NavigationButton", "_emit(${1:eventNames: string})"],
    ["_shouldApplyStyleHandlers(): any\tClass CustomLayoutView", "_shouldApplyStyleHandlers()"],
    ["_isAddedToNativeVisualTree: boolean\tClass AbsoluteLayout", "_isAddedToNativeVisualTree"],
    ["clipToBoundsProperty: Property\tClass ProxyViewContainer", "Static clipToBoundsProperty"],
    ["_onAttached(context: any): void\tClass AbsoluteLayout", "_onAttached(${1:context: any})"],
    ["setInlineStyle(style: string): void\tClass Button", "setInlineStyle(${1:style: string})"],
    ["unshift(...items: T[]): number\tClass ObservableArray<T>", "unshift(${1:...items: T[]})"],
    ["bindingContextProperty: Property\tClass AbsoluteLayout", "Static bindingContextProperty"],
    ["automationTextProperty: Property\tClass AbsoluteLayout", "Static automationTextProperty"],
    ["stretchLastChildProperty: Property\tClass DockLayout", "Static stretchLastChildProperty"],
    ["createFormattedStringCore(): void\tClass FormattedString", "createFormattedStringCore()"],
    ["getChildIndex(child: View): number\tClass DockLayout", "getChildIndex(${1:child: View})"],
    ["_emit(eventNames: string): any\tClass FormattedString", "_emit(${1:eventNames: string})"],
    ["updateTextTriggerProperty: Property\tClass TextView", "Static updateTextTriggerProperty"],
    ["addPseudoClass(name: string): void\tClass ListView", "addPseudoClass(${1:name: string})"],
    ["_getValue(property: Property): any\tClass WebView", "_getValue(${1:property: Property})"],
    ["setInlineStyle(style: string): void\tClass Slider", "setInlineStyle(${1:style: string})"],
    ["withFontFamily(family: string): Font\tClass Font", "withFontFamily(${1:family: string})"],
    ["addPseudoClass(name: string): void\tClass Repeater", "addPseudoClass(${1:name: string})"],
    ["fromFile(path: string): ImageSource\tModule image-source", "fromFile(${1:path: string})"],
    ["_emit(eventNames: string): any\tClass VirtualArray<T>", "_emit(${1:eventNames: string})"],
    ["_shouldApplyStyleHandlers(): any\tClass EditableTextBase", "_shouldApplyStyleHandlers()"],
    ["getChildIndex(child: View): number\tClass GridLayout", "getChildIndex(${1:child: View})"],
    ["addPseudoClass(name: string): void\tClass TextBase", "addPseudoClass(${1:name: string})"],
    ["addPseudoClass(name: string): void\tClass Progress", "addPseudoClass(${1:name: string})"],
    ["unbind(property: string): any\tClass ActivityIndicator", "unbind(${1:property: string})"],
    ["setInlineStyle(style: string): void\tClass Border", "setInlineStyle(${1:style: string})"],
    ["getChildIndex(child: View): number\tClass LayoutBase", "getChildIndex(${1:child: View})"],
    ["formattedTextProperty: Property\tClass EditableTextBase", "Static formattedTextProperty"],
    ["isUserInteractionEnabled: boolean\tClass ProxyViewContainer", "isUserInteractionEnabled"],
    ["push(request: DownloadRequest): any\tClass Cache", "push(${1:request: DownloadRequest})"],
    ["_getCurrentLayoutBounds(): object\tClass ActivityIndicator", "_getCurrentLayoutBounds()"],
    ["returnKeyTypeProperty: Property\tClass EditableTextBase", "Static returnKeyTypeProperty"],
    ["removeChild(view: View): void\tClass ProxyViewContainer", "removeChild(${1:view: View})"],
    ["_unregisterAllAnimations(): any\tClass ProxyViewContainer", "_unregisterAllAnimations()"],
    ["setInlineStyle(style: string): void\tClass Layout", "setInlineStyle(${1:style: string})"],
    ["_getValue(property: Property): any\tClass TabView", "_getValue(${1:property: Property})"],
    ["getChildAt(index: number): View\tClass AbsoluteLayout", "getChildAt(${1:index: number})"],
    ["addPseudoClass(name: string): void\tClass TextView", "addPseudoClass(${1:name: string})"],
    ["addPseudoClass(name: string): void\tClass HtmlView", "addPseudoClass(${1:name: string})"],
    ["withFontWeight(weight: string): Font\tClass Font", "withFontWeight(${1:weight: string})"],
    ["setInlineStyle(style: string): void\tClass Switch", "setInlineStyle(${1:style: string})"],
    ["getChildIndex(child: View): number\tClass WrapLayout", "getChildIndex(${1:child: View})"],
    ["unbind(property: string): any\tClass CustomLayoutView", "unbind(${1:property: string})"],
    ["onValidateValue: PropertyValidationCallback\tClass PropertyMetadata", "onValidateValue"],
    ["clearCache(): void\tModule file-system/file-name-resolver", "clearCache()"],
    ["_getValue(property: Property): any\tClass Button", "_getValue(${1:property: Property})"],
    ["getImage(url: string): Promise<ImageSource>\tModule http", "getImage(${1:url: string})"],
    ["_emit(eventNames: string): any\tClass AbsoluteLayout", "_emit(${1:eventNames: string})"],
    ["unbind(property: string): any\tClass EditableTextBase", "unbind(${1:property: string})"],
    ["setInlineStyle(style: string): void\tClass Frame", "setInlineStyle(${1:style: string})"],
    ["unbind(property: string): any\tClass NavigationButton", "unbind(${1:property: string})"],
    ["_getValue(property: Property): any\tClass Switch", "_getValue(${1:property: Property})"],
    ["isUserInteractionEnabled: boolean\tClass ActivityIndicator", "isUserInteractionEnabled"],
    ["setInlineStyle(style: string): void\tClass Image", "setInlineStyle(${1:style: string})"],
["parse(cssValue: string): Array<CSSValue>\tModule css-value", "parse(${1:cssValue: string})"],
    ["scrollToIndex(index: number): any\tClass ListView", "scrollToIndex(${1:index: number})"],
    ["_getCurrentLayoutBounds(): object\tClass CustomLayoutView", "_getCurrentLayoutBounds()"],
    ["equalityComparer: PropertyEqualityComparer\tClass PropertyMetadata", "equalityComparer"],
    ["_unregisterAllAnimations(): any\tClass ActivityIndicator", "_unregisterAllAnimations()"],
    ["_getValue(property: Property): any\tClass Border", "_getValue(${1:property: Property})"],
    ["addPseudoClass(name: string): void\tClass WebView", "addPseudoClass(${1:name: string})"],
    ["_getValue(property: Property): any\tClass Layout", "_getValue(${1:property: Property})"],
    ["getViewById<T>(id: string): T\tClass AbsoluteLayout", "getViewById<T>(${1:id: string})"],
    ["setInlineStyle(style: string): void\tClass Label", "setInlineStyle(${1:style: string})"],
    ["unbind(property: string): any\tClass SegmentedBarItem", "unbind(${1:property: string})"],
    ["_removeView(view: View): any\tClass ProxyViewContainer", "_removeView(${1:view: View})"],
    ["onValidateValue: PropertyValidationCallback\tClass PropertyMetadata", "onValidateValue"],
    ["_getCurrentLayoutBounds(): object\tClass EditableTextBase", "_getCurrentLayoutBounds()"],
    ["addPseudoClass(name: string): void\tClass TabView", "addPseudoClass(${1:name: string})"],
    ["_getValue(property: Property): any\tClass Slider", "_getValue(${1:property: Property})"],
    ["equalityComparer: PropertyEqualityComparer\tClass PropertyMetadata", "equalityComparer"],
    ["_getValue(property: Property): any\tClass Style", "_getValue(${1:property: Property})"],
    ["applySelectors(view: View): void\tClass StyleScope", "applySelectors(${1:view: View})"],
    ["hasKey(key: string): boolean\tModule application-settings", "hasKey(${1:key: string})"],
    ["addPseudoClass(name: string): void\tClass Button", "addPseudoClass(${1:name: string})"],
    ["addPseudoClass(name: string): void\tClass Switch", "addPseudoClass(${1:name: string})"],
    ["setInlineStyle(style: string): void\tClass Page", "setInlineStyle(${1:style: string})"],
    ["setInlineStyle(style: string): void\tClass View", "setInlineStyle(${1:style: string})"],
    ["getColumnSpan(view: View): number\tClass GridLayout", "getColumnSpan(${1:view: View})"],
    ["keyboardTypeProperty: Property\tClass EditableTextBase", "Static keyboardTypeProperty"],
    ["activityResumedEvent: string\tClass AndroidApplication", "Static activityResumedEvent"],
    ["activityStartedEvent: string\tClass AndroidApplication", "Static activityStartedEvent"],
    ["_removeView(view: View): any\tClass ActivityIndicator", "_removeView(${1:view: View})"],
    ["isUserInteractionEnabled: boolean\tClass EditableTextBase", "isUserInteractionEnabled"],
    ["onSetNativeValue: PropertyChangedCallback\tClass PropertyMetadata", "onSetNativeValue"],
    ["activityStoppedEvent: string\tClass AndroidApplication", "Static activityStoppedEvent"],
    ["propertyChangeEvent: string\tClass DependencyObservable", "Static propertyChangeEvent"],
    ["addPseudoClass(name: string): void\tClass Border", "addPseudoClass(${1:name: string})"],
    ["activityCreatedEvent: string\tClass AndroidApplication", "Static activityCreatedEvent"],
    ["_shouldApplyStyleHandlers(): any\tClass AbsoluteLayout", "_shouldApplyStyleHandlers()"],
    ["_unregisterAllAnimations(): any\tClass CustomLayoutView", "_unregisterAllAnimations()"],
    ["getAllPointers(): Array<Pointer>\tInterface TouchGestureEventData", "getAllPointers()"],
    ["_getValue(property: Property): any\tClass Style", "_getValue(${1:property: Property})"],
    ["addRow(itemSpec: ItemSpec): void\tClass GridLayout", "addRow(${1:itemSpec: ItemSpec})"],
    ["_getValue(property: Property): any\tClass Frame", "_getValue(${1:property: Property})"],
    ["_isAddedToNativeVisualTree: boolean\tClass SegmentedBar", "_isAddedToNativeVisualTree"],
    ["isUserInteractionEnabled: boolean\tClass CustomLayoutView", "isUserInteractionEnabled"],
    ["bindingContextProperty: Property\tClass SegmentedBar", "Static bindingContextProperty"],
    ["_getValue(property: Property): any\tClass Label", "_getValue(${1:property: Property})"],
    ["_unregisterAllAnimations(): any\tClass EditableTextBase", "_unregisterAllAnimations()"],
    ["addPseudoClass(name: string): void\tClass Layout", "addPseudoClass(${1:name: string})"],
    ["_requestLayoutOnTextChanged(): void\tClass TextField", "_requestLayoutOnTextChanged()"],
    ["addPseudoClass(name: string): void\tClass Slider", "addPseudoClass(${1:name: string})"],
    ["_onAttached(context: any): void\tClass SegmentedBar", "_onAttached(${1:context: any})"],
    ["_getValue(property: Property): any\tClass Image", "_getValue(${1:property: Property})"],
    ["withColor(value: Color): Background\tClass Background", "withColor(${1:value: Color})"],
    ["withSize(value: string): Background\tClass Background", "withSize(${1:value: string})"],
    ["automationTextProperty: Property\tClass SegmentedBar", "Static automationTextProperty"],
    ["_requestLayoutOnTextChanged(): void\tClass TextBase", "_requestLayoutOnTextChanged()"],
    ["bindingContextProperty: Property\tClass Placeholder", "Static bindingContextProperty"],
    ["getChildAt(index: number): View\tClass StackLayout", "getChildAt(${1:index: number})"],
    ["_emit(eventNames: string): any\tClass SegmentedBar", "_emit(${1:eventNames: string})"],
    ["addItem(item: ActionItem): void\tClass ActionItems", "addItem(${1:item: ActionItem})"],
    ["addPseudoClass(name: string): void\tClass Frame", "addPseudoClass(${1:name: string})"],
    ["_removeView(view: View): any\tClass CustomLayoutView", "_removeView(${1:view: View})"],
    ["automationTextProperty: Property\tClass StackLayout", "Static automationTextProperty"],
    ["removeCallback(id: number): any\tModule fps-meter", "removeCallback(${1:id: number})"],
    ["_requestLayoutOnTextChanged(): void\tClass TextView", "_requestLayoutOnTextChanged()"],
    ["bindingContextProperty: Property\tClass ProxyObject", "Static bindingContextProperty"],
    ["callback: function(args: GestureEventData): void\tClass GesturesObserver", "callback"],
    ["addPseudoClass(name: string): void\tClass Image", "addPseudoClass(${1:name: string})"],
    ["getViewById<T>(id: string): T\tClass SegmentedBar", "getViewById<T>(${1:id: string})"],
    ["bindingContextProperty: Property\tClass StackLayout", "Static bindingContextProperty"],
    ["_onAttached(context: any): void\tClass ContentView", "_onAttached(${1:context: any})"],
    ["androidOptionSelectedEvent: string\tClass Frame", "Static androidOptionSelectedEvent"],
    ["selectedIndexChangedEvent: string\tClass TabView", "Static selectedIndexChangedEvent"],
    ["eventName: string\tInterface AndroidActivityRequestPermissionsEventData", "eventName"],
    ["_removeView(view: View): any\tClass EditableTextBase", "_removeView(${1:view: View})"],
    ["_isAddedToNativeVisualTree: boolean\tClass Placeholder", "_isAddedToNativeVisualTree"],
    ["bindingContextProperty: Property\tClass ContentView", "Static bindingContextProperty"],
    ["timeEnd(reportName: string): void\tClass Console", "timeEnd(${1:reportName: string})"],
    ["_isAddedToNativeVisualTree: boolean\tClass ContentView", "_isAddedToNativeVisualTree"],
    ["_isAddedToNativeVisualTree: boolean\tClass StackLayout", "_isAddedToNativeVisualTree"],
    ["automationTextProperty: Property\tClass ContentView", "Static automationTextProperty"],
    ["_onAttached(context: any): void\tClass Placeholder", "_onAttached(${1:context: any})"],
    ["_getValue(property: Property): any\tClass Span", "_getValue(${1:property: Property})"],
    ["getDocumentsFolderPath(): string\tClass FileSystemAccess", "getDocumentsFolderPath()"],
    ["fromData(data: any): Promise<boolean>\tClass ImageSource", "fromData(${1:data: any})"],
    ["_onAttached(context: any): void\tClass StackLayout", "_onAttached(${1:context: any})"],
    ["unbind(property: string): any\tClass AbsoluteLayout", "unbind(${1:property: string})"],
    ["_getCurrentLayoutBounds(): object\tClass AbsoluteLayout", "_getCurrentLayoutBounds()"],
    ["automationTextProperty: Property\tClass Placeholder", "Static automationTextProperty"],
    ["_getValue(property: Property): any\tClass Page", "_getValue(${1:property: Property})"],
    ["addPseudoClass(name: string): void\tClass Label", "addPseudoClass(${1:name: string})"],
    ["bindingContextProperty: Property\tClass TabViewItem", "Static bindingContextProperty"],
    ["_getValue(property: Property): any\tClass View", "_getValue(${1:property: Property})"],
    ["_onAttached(context: any): void\tClass WrapLayout", "_onAttached(${1:context: any})"],
    ["getChildAt(index: number): View\tClass GridLayout", "getChildAt(${1:index: number})"],
    ["_isAddedToNativeVisualTree: boolean\tClass TimePicker", "_isAddedToNativeVisualTree"],
    ["_unregisterAllAnimations(): any\tClass AbsoluteLayout", "_unregisterAllAnimations()"],
    ["_emit(eventNames: string): any\tClass Placeholder", "_emit(${1:eventNames: string})"],
    ["clipToBoundsProperty: Property\tClass AbsoluteLayout", "Static clipToBoundsProperty"],
    ["bindingContextProperty: Property\tClass DockLayout", "Static bindingContextProperty"],
    ["automationTextProperty: Property\tClass DockLayout", "Static automationTextProperty"],
    ["automationTextProperty: Property\tClass GridLayout", "Static automationTextProperty"],
    ["_onAttached(context: any): void\tClass DockLayout", "_onAttached(${1:context: any})"],
    ["getChildAt(index: number): View\tClass DockLayout", "getChildAt(${1:index: number})"],
    ["withFontStyle(style: string): Font\tClass Font", "withFontStyle(${1:style: string})"],
    ["isUserInteractionEnabled: boolean\tClass AbsoluteLayout", "isUserInteractionEnabled"],
    ["propertyChangeEvent: string\tClass ProxyViewContainer", "Static propertyChangeEvent"],
    ["_isAddedToNativeVisualTree: boolean\tClass ScrollView", "_isAddedToNativeVisualTree"],
    ["automationTextProperty: Property\tClass ListPicker", "Static automationTextProperty"],
    ["removeChild(view: View): void\tClass AbsoluteLayout", "removeChild(${1:view: View})"],
    ["getViewById<T>(id: string): T\tClass Placeholder", "getViewById<T>(${1:id: string})"],
    ["getChildIndex(child: View): number\tClass Layout", "getChildIndex(${1:child: View})"],
    ["bindingContextProperty: Property\tClass GridLayout", "Static bindingContextProperty"],
    ["loadFromData(data: any): boolean\tClass ImageSource", "loadFromData(${1:data: any})"],
    ["_isAddedToNativeVisualTree: boolean\tClass DockLayout", "_isAddedToNativeVisualTree"],
    ["_isAddedToNativeVisualTree: boolean\tClass ListPicker", "_isAddedToNativeVisualTree"],
    ["addPseudoClass(name: string): void\tClass View", "addPseudoClass(${1:name: string})"],
    ["_onAttached(context: any): void\tClass DatePicker", "_onAttached(${1:context: any})"],
    ["activityPausedEvent: string\tClass AndroidApplication", "Static activityPausedEvent"],
    ["automationTextProperty: Property\tClass LayoutBase", "Static automationTextProperty"],
    ["_onAttached(context: any): void\tClass TimePicker", "_onAttached(${1:context: any})"],
    ["_isAddedToNativeVisualTree: boolean\tClass GridLayout", "_isAddedToNativeVisualTree"],
    ["bindingContextProperty: Property\tClass LayoutBase", "Static bindingContextProperty"],
    ["MediumSpringGreen: any\tModule color/known-colors", "MediumSpringGreen"],
    ["getChildAt(index: number): View\tClass LayoutBase", "getChildAt(${1:index: number})"],
    ["propertyChangeEvent: string\tClass AndroidApplication", "Static propertyChangeEvent"],
    ["autocorrectProperty: Property\tClass EditableTextBase", "Static autocorrectProperty"],
    ["_onAttached(context: any): void\tClass LayoutBase", "_onAttached(${1:context: any})"],
    ["rename(newName: string): Promise<any>\tClass Folder", "rename(${1:newName: string})"],
    ["_onAttached(context: any): void\tClass ListPicker", "_onAttached(${1:context: any})"],
    ["_emit(eventNames: string): any\tClass ContentView", "_emit(${1:eventNames: string})"],
    ["_onAttached(context: any): void\tClass GridLayout", "_onAttached(${1:context: any})"],
    ["bindingContextProperty: Property\tClass ActionItem", "Static bindingContextProperty"],
    ["addPseudoClass(name: string): void\tClass Page", "addPseudoClass(${1:name: string})"],
    ["getChildAt(index: number): View\tClass WrapLayout", "getChildAt(${1:index: number})"],
    ["defaultAnimatedNavigation: boolean\tClass Frame", "Static defaultAnimatedNavigation"],
    ["_isAddedToNativeVisualTree: boolean\tClass LayoutBase", "_isAddedToNativeVisualTree"],
    ["_emit(eventNames: string): any\tClass StackLayout", "_emit(${1:eventNames: string})"],
    ["getViewById<T>(id: string): T\tClass ContentView", "getViewById<T>(${1:id: string})"],
    ["_emit(eventNames: string): any\tClass TabViewItem", "_emit(${1:eventNames: string})"],
    ["getString(url: string): Promise<string>\tModule http", "getString(${1:url: string})"],
    ["_emit(eventNames: string): any\tClass ProxyObject", "_emit(${1:eventNames: string})"],
    ["bindingContextProperty: Property\tClass WrapLayout", "Static bindingContextProperty"],
    ["activityResultEvent: string\tClass AndroidApplication", "Static activityResultEvent"],
    ["_isAddedToNativeVisualTree: boolean\tClass WrapLayout", "_isAddedToNativeVisualTree"],
    ["selectedIndexProperty: Property\tClass SegmentedBar", "Static selectedIndexProperty"],
    ["query(options: Node): SelectorCore[]\tClass StyleScope", "query(${1:options: Node})"],
    ["automationTextProperty: Property\tClass ScrollView", "Static automationTextProperty"],
    ["bindingContextProperty: Property\tClass ScrollView", "Static bindingContextProperty"],
    ["getViewById<T>(id: string): T\tClass StackLayout", "getViewById<T>(${1:id: string})"],
    ["propertyChangeEvent: string\tClass ObservableArray<T>", "Static propertyChangeEvent"],
    ["automationTextProperty: Property\tClass WrapLayout", "Static automationTextProperty"],
    ["automationTextProperty: Property\tClass TimePicker", "Static automationTextProperty"],
    ["bindingContextProperty: Property\tClass DatePicker", "Static bindingContextProperty"],
    ["_onAttached(context: any): void\tClass ScrollView", "_onAttached(${1:context: any})"],
    ["_isAddedToNativeVisualTree: boolean\tClass DatePicker", "_isAddedToNativeVisualTree"],
    ["bindingContextProperty: Property\tClass TimePicker", "Static bindingContextProperty"],
    ["_shouldApplyStyleHandlers(): any\tClass SegmentedBar", "_shouldApplyStyleHandlers()"],
    ["automationTextProperty: Property\tClass DatePicker", "Static automationTextProperty"],
    ["bindingContextProperty: Property\tClass ListPicker", "Static bindingContextProperty"],
    ["_emit(eventNames: string): any\tClass WrapLayout", "_emit(${1:eventNames: string})"],
    ["getViewById<T>(id: string): T\tClass TimePicker", "getViewById<T>(${1:id: string})"],
    ["_emit(eventNames: string): any\tClass TimePicker", "_emit(${1:eventNames: string})"],
    ["propertyChangeEvent: string\tClass ActivityIndicator", "Static propertyChangeEvent"],
    ["getViewById<T>(id: string): T\tClass WrapLayout", "getViewById<T>(${1:id: string})"],
    ["remove(key: string): void\tModule application-settings", "remove(${1:key: string})"],
    ["getViewById<T>(id: string): T\tClass DockLayout", "getViewById<T>(${1:id: string})"],
    ["automationTextProperty: Property\tClass TextField", "Static automationTextProperty"],
    ["concat(...items: T[]): T[]\tClass ObservableArray<T>", "concat(${1:...items: T[]})"],
    ["_emit(eventNames: string): any\tClass ListPicker", "_emit(${1:eventNames: string})"],
    ["getViewById<T>(id: string): T\tClass DatePicker", "getViewById<T>(${1:id: string})"],
    ["bindingContextProperty: Property\tClass ActionBar", "Static bindingContextProperty"],
    ["automationTextProperty: Property\tClass ActionBar", "Static automationTextProperty"],
    ["_emit(eventNames: string): any\tClass ScrollView", "_emit(${1:eventNames: string})"],
    ["bindingContextProperty: Property\tClass TextField", "Static bindingContextProperty"],
    ["_emit(eventNames: string): any\tClass DatePicker", "_emit(${1:eventNames: string})"],
    ["getViewById<T>(id: string): T\tClass ListPicker", "getViewById<T>(${1:id: string})"],
    ["_isAddedToNativeVisualTree: boolean\tClass ActionBar", "_isAddedToNativeVisualTree"],
    ["_emit(eventNames: string): any\tClass DockLayout", "_emit(${1:eventNames: string})"],
    ["_shouldApplyStyleHandlers(): any\tClass Placeholder", "_shouldApplyStyleHandlers()"],
    ["splice(start: number): T[]\tClass ObservableArray<T>", "splice(${1:start: number})"],
    ["_getNativeViewsCount(): number\tClass ProxyViewContainer", "_getNativeViewsCount()"],
    ["_shouldApplyStyleHandlers(): any\tClass ContentView", "_shouldApplyStyleHandlers()"],
    ["_shouldApplyStyleHandlers(): any\tClass StackLayout", "_shouldApplyStyleHandlers()"],
    ["test: = | ^= | $= | *= | = | ~= | |=\tInterface AttributeSelector", "Optional test"],
    ["getItem(index: number): T\tClass ObservableArray<T>", "getItem(${1:index: number})"],
    ["_syncNativeProperties(): void\tClass ProxyViewContainer", "_syncNativeProperties()"],
    ["_emit(eventNames: string): any\tClass Observable", "_emit(${1:eventNames: string})"],
    ["_onAttached(context: any): void\tClass TextField", "_onAttached(${1:context: any})"],
    ["_emit(eventNames: string): any\tClass GridLayout", "_emit(${1:eventNames: string})"],
    ["_removeView(view: View): any\tClass AbsoluteLayout", "_removeView(${1:view: View})"],
    ["bindingContextProperty: Property\tClass SearchBar", "Static bindingContextProperty"],
    ["_onAttached(context: any): void\tClass ActionBar", "_onAttached(${1:context: any})"],
    ["query<T>(node: T): SelectorsMatch<T>\tClass SelectorsMap", "query<T>(${1:node: T})"],
    ["getViewById<T>(id: string): T\tClass LayoutBase", "getViewById<T>(${1:id: string})"],
    ["_onAttached(context: any): void\tClass SearchBar", "_onAttached(${1:context: any})"],
    ["_getCurrentLayoutBounds(): object\tClass SegmentedBar", "_getCurrentLayoutBounds()"],
    ["transition: NavigationTransition\tInterface NavigationEntry", "Optional transition"],
    ["_emit(eventNames: string): any\tClass ActionItem", "_emit(${1:eventNames: string})"],
    ["unbind(property: string): any\tClass SegmentedBar", "unbind(${1:property: string})"],
    ["getViewById<T>(id: string): T\tClass ScrollView", "getViewById<T>(${1:id: string})"],
    ["getViewById<T>(id: string): T\tClass GridLayout", "getViewById<T>(${1:id: string})"],
    ["_isAddedToNativeVisualTree: boolean\tClass TextField", "_isAddedToNativeVisualTree"],
    ["automationTextProperty: Property\tClass SearchBar", "Static automationTextProperty"],
    ["_emit(eventNames: string): any\tClass LayoutBase", "_emit(${1:eventNames: string})"],
    ["_isAddedToNativeVisualTree: boolean\tClass SearchBar", "_isAddedToNativeVisualTree"],
    ["_isAddedToNativeVisualTree: boolean\tClass TextView", "_isAddedToNativeVisualTree"],
    ["automationTextProperty: Property\tClass Repeater", "Static automationTextProperty"],
    ["_shouldApplyStyleHandlers(): any\tClass LayoutBase", "_shouldApplyStyleHandlers()"],
    ["unbind(property: string): any\tClass Placeholder", "unbind(${1:property: string})"],
    ["_onAttached(context: any): void\tClass Progress", "_onAttached(${1:context: any})"],
    ["bindingContextProperty: Property\tClass Repeater", "Static bindingContextProperty"],
    ["backstackVisible: boolean\tInterface NavigationEntry", "Optional backstackVisible"],
    ["_shouldApplyStyleHandlers(): any\tClass DatePicker", "_shouldApplyStyleHandlers()"],
    ["visibilityProperty: Property\tClass NavigationButton", "Static visibilityProperty"],
    ["propertyChangeEvent: string\tClass NavigationButton", "Static propertyChangeEvent"],
    ["fromData(data: any): ImageSource\tModule image-source", "fromData(${1:data: any})"],
    ["backgroundColor: Color\tInterface AnimationDefinition", "Optional backgroundColor"],
    ["_isAddedToNativeVisualTree: boolean\tClass Progress", "_isAddedToNativeVisualTree"],
    ["bindingContextProperty: Property\tClass Progress", "Static bindingContextProperty"],
    ["unbind(property: string): any\tClass StackLayout", "unbind(${1:property: string})"],
    ["addChild(view: View): void\tClass ProxyViewContainer", "addChild(${1:view: View})"],
    ["automationTextProperty: Property\tClass Progress", "Static automationTextProperty"],
    ["_isAddedToNativeVisualTree: boolean\tClass Repeater", "_isAddedToNativeVisualTree"],
    ["_onAttached(context: any): void\tClass TextBase", "_onAttached(${1:context: any})"],
    ["onValueChanged: PropertyChangedCallback\tClass PropertyMetadata", "onValueChanged"],
    ["addCss(cssText: string): void\tModule application", "addCss(${1:cssText: string})"],
    ["automationTextProperty: Property\tClass HtmlView", "Static automationTextProperty"],
    ["_isAddedToNativeVisualTree: boolean\tClass HtmlView", "_isAddedToNativeVisualTree"],
    ["_onAttached(context: any): void\tClass TextView", "_onAttached(${1:context: any})"],
    ["unbind(property: string): any\tClass TabViewItem", "unbind(${1:property: string})"],
    ["_syncNativeProperties(): void\tClass ActivityIndicator", "_syncNativeProperties()"],
    ["bindingContextProperty: Property\tClass HtmlView", "Static bindingContextProperty"],
    ["_onAttached(context: any): void\tClass ListView", "_onAttached(${1:context: any})"],
    ["bindingContextProperty: Property\tClass ListView", "Static bindingContextProperty"],
    ["_onAttached(context: any): void\tClass HtmlView", "_onAttached(${1:context: any})"],
    ["automationTextProperty: Property\tClass ListView", "Static automationTextProperty"],
    ["_isAddedToNativeVisualTree: boolean\tClass ListView", "_isAddedToNativeVisualTree"],
    ["bindingContextProperty: Property\tClass Bindable", "Static bindingContextProperty"],
    ["_emit(eventNames: string): any\tClass SearchBar", "_emit(${1:eventNames: string})"],
    ["getViewById<T>(id: string): T\tClass SearchBar", "getViewById<T>(${1:id: string})"],
    ["_shouldApplyStyleHandlers(): any\tClass ScrollView", "_shouldApplyStyleHandlers()"],
    ["propertyChangeEvent: string\tClass SegmentedBarItem", "Static propertyChangeEvent"],
    ["isUserInteractionEnabled: boolean\tClass SegmentedBar", "isUserInteractionEnabled"],
    ["_shouldApplyStyleHandlers(): any\tClass WrapLayout", "_shouldApplyStyleHandlers()"],
    ["push(...items: T[]): number\tClass ObservableArray<T>", "push(${1:...items: T[]})"],
    ["_isAddedToNativeVisualTree: boolean\tClass TextBase", "_isAddedToNativeVisualTree"],
    ["_getCurrentLayoutBounds(): object\tClass StackLayout", "_getCurrentLayoutBounds()"],
    ["bindingContextProperty: Property\tClass TextBase", "Static bindingContextProperty"],
    ["automationTextProperty: Property\tClass TextBase", "Static automationTextProperty"],
    ["isEnabledProperty: Property\tClass ProxyViewContainer", "Static isEnabledProperty"],
    ["classNameProperty: Property\tClass ProxyViewContainer", "Static classNameProperty"],
    ["propertyChangeEvent: string\tClass CustomLayoutView", "Static propertyChangeEvent"],
    ["automationTextProperty: Property\tClass TextView", "Static automationTextProperty"],
    ["bindingContextProperty: Property\tClass TextView", "Static bindingContextProperty"],
    ["_shouldApplyStyleHandlers(): any\tClass ListPicker", "_shouldApplyStyleHandlers()"],
    ["_requestLayoutOnTextChanged(): void\tClass Label", "_requestLayoutOnTextChanged()"],
    ["_shouldApplyStyleHandlers(): any\tClass DockLayout", "_shouldApplyStyleHandlers()"],
    ["propertyChangeEvent: string\tClass EditableTextBase", "Static propertyChangeEvent"],
    ["selectedIndexProperty: Property\tClass ListPicker", "Static selectedIndexProperty"],
    ["_emit(eventNames: string): any\tClass ActionBar", "_emit(${1:eventNames: string})"],
    ["MediumAquaMarine: any\tModule color/known-colors", "MediumAquaMarine"],
    ["propertyChangeEvent: string\tInterface AndroidFrame", "Static propertyChangeEvent"],
    ["_shouldApplyStyleHandlers(): any\tClass TimePicker", "_shouldApplyStyleHandlers()"],
    ["_unregisterAllAnimations(): any\tClass SegmentedBar", "_unregisterAllAnimations()"],
    ["_shouldApplyStyleHandlers(): any\tClass GridLayout", "_shouldApplyStyleHandlers()"],
    ["_getCurrentLayoutBounds(): object\tClass ContentView", "_getCurrentLayoutBounds()"],
    ["backgroundSpanUnderStatusBar: boolean\tClass Page", "backgroundSpanUnderStatusBar"],
    ["getViewById<T>(id: string): T\tClass ActionBar", "getViewById<T>(${1:id: string})"],
    ["_getNativeViewsCount(): number\tClass ActivityIndicator", "_getNativeViewsCount()"],
    ["getViewById<T>(id: string): T\tClass TextField", "getViewById<T>(${1:id: string})"],
    ["onValueChanged: PropertyChangedCallback\tClass PropertyMetadata", "onValueChanged"],
    ["rename(newName: string): Promise<any>\tClass File", "rename(${1:newName: string})"],
    ["_emit(eventNames: string): any\tClass TextField", "_emit(${1:eventNames: string})"],
    ["_onAttached(context: any): void\tClass Repeater", "_onAttached(${1:context: any})"],
    ["neutralButtonText: string\tInterface ConfirmOptions", "Optional neutralButtonText"],
    ["_getCurrentLayoutBounds(): object\tClass Placeholder", "_getCurrentLayoutBounds()"],
    ["unbind(property: string): any\tClass ContentView", "unbind(${1:property: string})"],
    ["unbind(property: string): any\tClass ProxyObject", "unbind(${1:property: string})"],
    ["getViewById<T>(id: string): T\tClass Repeater", "getViewById<T>(${1:id: string})"],
    ["_getCurrentLayoutBounds(): object\tClass DockLayout", "_getCurrentLayoutBounds()"],
    ["removeChild(view: View): void\tClass StackLayout", "removeChild(${1:view: View})"],
    ["_shouldApplyStyleHandlers(): any\tClass SearchBar", "_shouldApplyStyleHandlers()"],
    ["_syncNativeProperties(): void\tClass EditableTextBase", "_syncNativeProperties()"],
    ["defaultTransition: NavigationTransition\tClass Frame", "Static defaultTransition"],
    ["getViewById<T>(id: string): T\tClass TextBase", "getViewById<T>(${1:id: string})"],
    ["unbind(property: string): any\tClass WrapLayout", "unbind(${1:property: string})"],
    ["_unregisterAllAnimations(): any\tClass StackLayout", "_unregisterAllAnimations()"],
    ["_unregisterAllAnimations(): any\tClass ContentView", "_unregisterAllAnimations()"],
    ["getViewById<T>(id: string): T\tClass ListView", "getViewById<T>(${1:id: string})"],
    ["_shouldApplyStyleHandlers(): any\tClass ActionBar", "_shouldApplyStyleHandlers()"],
    ["clipToBoundsProperty: Property\tClass StackLayout", "Static clipToBoundsProperty"],
    ["_emit(eventNames: string): any\tClass Bindable", "_emit(${1:eventNames: string})"],
    ["getJSON<T>(url: string): Promise<T>\tModule http", "getJSON<T>(${1:url: string})"],
    ["isUserInteractionEnabled: boolean\tClass StackLayout", "isUserInteractionEnabled"],
    ["_emit(eventNames: string): any\tClass TextBase", "_emit(${1:eventNames: string})"],
    ["_shouldApplyStyleHandlers(): any\tClass TextField", "_shouldApplyStyleHandlers()"],
    ["_getCurrentLayoutBounds(): object\tClass ListPicker", "_getCurrentLayoutBounds()"],
    ["isUserInteractionEnabled: boolean\tClass ContentView", "isUserInteractionEnabled"],
    ["propertyChangeEvent: string\tClass FormattedString", "Static propertyChangeEvent"],
    ["bindingContextProperty: Property\tClass WebView", "Static bindingContextProperty"],
    ["propertyChangeEvent: string\tClass VirtualArray<T>", "Static propertyChangeEvent"],
    ["_onAttached(context: any): void\tClass WebView", "_onAttached(${1:context: any})"],
    ["automationTextProperty: Property\tClass WebView", "Static automationTextProperty"],
    ["_emit(eventNames: string): any\tClass TextView", "_emit(${1:eventNames: string})"],
    ["unbind(property: string): any\tClass TimePicker", "unbind(${1:property: string})"],
    ["comb: + | ~ | > |  \tInterface SimpleIdentifierSelector", "Optional comb"],
    ["unbind(property: string): any\tClass ScrollView", "unbind(${1:property: string})"],
    ["unbind(property: string): any\tClass ActionItem", "unbind(${1:property: string})"],
    ["_isAddedToNativeVisualTree: boolean\tClass WebView", "_isAddedToNativeVisualTree"],
    ["_emit(eventNames: string): any\tClass ListView", "_emit(${1:eventNames: string})"],
    ["unbind(property: string): any\tClass ListPicker", "unbind(${1:property: string})"],
    ["_syncNativeProperties(): void\tClass CustomLayoutView", "_syncNativeProperties()"],
    ["unbind(property: string): any\tClass DockLayout", "unbind(${1:property: string})"],
    ["isEnabledProperty: Property\tClass ActivityIndicator", "Static isEnabledProperty"],
    ["_getNativeViewsCount(): number\tClass EditableTextBase", "_getNativeViewsCount()"],
    ["getViewById<T>(id: string): T\tClass TextView", "getViewById<T>(${1:id: string})"],
    ["parse(xmlString: string): void\tClass XmlParser", "parse(${1:xmlString: string})"],
    ["_getCurrentLayoutBounds(): object\tClass GridLayout", "_getCurrentLayoutBounds()"],
    ["_getCurrentLayoutBounds(): object\tClass ScrollView", "_getCurrentLayoutBounds()"],
    ["_emit(eventNames: string): any\tClass Repeater", "_emit(${1:eventNames: string})"],
    ["getUIFont(defaultFont: any): any\tClass Font", "getUIFont(${1:defaultFont: any})"],
    ["_getNativeViewsCount(): number\tClass CustomLayoutView", "_getNativeViewsCount()"],
    ["autocapitalizationType: string\tClass EditableTextBase", "autocapitalizationType"],
    ["isUserInteractionEnabled: boolean\tClass Placeholder", "isUserInteractionEnabled"],
    ["declarations: Array<KeyframeDeclaration>\tInterface KeyframeInfo", "declarations"],
    ["getViewById<T>(id: string): T\tClass HtmlView", "getViewById<T>(${1:id: string})"],
    ["_unregisterAllAnimations(): any\tClass Placeholder", "_unregisterAllAnimations()"],
    ["_getCurrentLayoutBounds(): object\tClass TimePicker", "_getCurrentLayoutBounds()"],
    ["getViewById<T>(id: string): T\tClass Progress", "getViewById<T>(${1:id: string})"],
    ["_onAttached(context: any): void\tClass TabView", "_onAttached(${1:context: any})"],
    ["unbind(property: string): any\tClass DatePicker", "unbind(${1:property: string})"],
    ["returnKeyTypeProperty: Property\tClass TextField", "Static returnKeyTypeProperty"],
    ["unbind(property: string): any\tClass LayoutBase", "unbind(${1:property: string})"],
    ["_removeView(view: View): any\tClass SegmentedBar", "_removeView(${1:view: View})"],
    ["classNameProperty: Property\tClass ActivityIndicator", "Static classNameProperty"],
    ["bottomMarginPercent: number\tInterface CommonLayoutParams", "bottomMarginPercent"],
    ["horizontalAlignment: string\tInterface CommonLayoutParams", "horizontalAlignment"],
    ["minimumUpdateTime: number\tInterface AndroidLocationManager", "minimumUpdateTime"],
    ["_getCurrentLayoutBounds(): object\tClass DatePicker", "_getCurrentLayoutBounds()"],
    ["stopLocationMonitoring(): any\tClass LocationManager", "stopLocationMonitoring()"],
    ["_emit(eventNames: string): any\tClass HtmlView", "_emit(${1:eventNames: string})"],
    ["formattedTextProperty: Property\tClass TextField", "Static formattedTextProperty"],
    ["neutralButtonText: string\tInterface PromptOptions", "Optional neutralButtonText"],
    ["_emit(eventNames: string): any\tClass Progress", "_emit(${1:eventNames: string})"],
    ["_isAddedToNativeVisualTree: boolean\tClass TabView", "_isAddedToNativeVisualTree"],
    ["unbind(property: string): any\tClass GridLayout", "unbind(${1:property: string})"],
    ["bindingContextProperty: Property\tClass TabView", "Static bindingContextProperty"],
    ["_getCurrentLayoutBounds(): object\tClass LayoutBase", "_getCurrentLayoutBounds()"],
    ["automationTextProperty: Property\tClass TabView", "Static automationTextProperty"],
    ["_getCurrentLayoutBounds(): object\tClass WrapLayout", "_getCurrentLayoutBounds()"],
    ["_unregisterAllAnimations(): any\tClass ListPicker", "_unregisterAllAnimations()"],
    ["automationTextProperty: Property\tClass Button", "Static automationTextProperty"],
    ["getItem(index: number): T\tClass VirtualArray<T>", "getItem(${1:index: number})"],
    ["_emit(eventNames: string): any\tClass TabView", "_emit(${1:eventNames: string})"],
    ["getViewById<T>(id: string): T\tClass TabView", "getViewById<T>(${1:id: string})"],
    ["returnKeyTypeProperty: Property\tClass TextView", "Static returnKeyTypeProperty"],
    ["formattedTextProperty: Property\tClass TextView", "Static formattedTextProperty"],
    ["isUserInteractionEnabled: boolean\tClass DatePicker", "isUserInteractionEnabled"],
    ["unbind(property: string): any\tClass TextField", "unbind(${1:property: string})"],
    ["neutralButtonText: string\tInterface LoginOptions", "Optional neutralButtonText"],
    ["unbind(property: string): any\tClass ActionBar", "unbind(${1:property: string})"],
    ["_isAddedToNativeVisualTree: boolean\tClass Slider", "_isAddedToNativeVisualTree"],
    ["isUserInteractionEnabled: boolean\tClass ScrollView", "isUserInteractionEnabled"],
    ["isEnabledProperty: Property\tClass CustomLayoutView", "Static isEnabledProperty"],
    ["_shouldApplyStyleHandlers(): any\tClass TextView", "_shouldApplyStyleHandlers()"],
    ["_onAttached(context: any): void\tClass Slider", "_onAttached(${1:context: any})"],
    ["getViewById<T>(id: string): T\tClass WebView", "getViewById<T>(${1:id: string})"],
    ["classNameProperty: Property\tClass CustomLayoutView", "Static classNameProperty"],
    ["isUserInteractionEnabled: boolean\tClass LayoutBase", "isUserInteractionEnabled"],
    ["withFontSize(size: number): Font\tClass Font", "withFontSize(${1:size: number})"],
    ["removeChild(view: View): void\tClass LayoutBase", "removeChild(${1:view: View})"],
    ["_shouldApplyStyleHandlers(): any\tClass Progress", "_shouldApplyStyleHandlers()"],
    ["activity: any\tInterface AndroidActivityRequestPermissionsEventData", "activity"],
    ["_isAddedToNativeVisualTree: boolean\tClass Switch", "_isAddedToNativeVisualTree"],
    ["_getCurrentLayoutBounds(): object\tClass SearchBar", "_getCurrentLayoutBounds()"],
    ["_unregisterAllAnimations(): any\tClass GridLayout", "_unregisterAllAnimations()"],
    ["bindingContextProperty: Property\tClass Slider", "Static bindingContextProperty"],
    ["_onAttached(context: any): void\tClass Button", "_onAttached(${1:context: any})"],
    ["_onAttached(context: any): void\tClass Switch", "_onAttached(${1:context: any})"],
    ["_unregisterAllAnimations(): any\tClass ScrollView", "_unregisterAllAnimations()"],
    ["clipToBoundsProperty: Property\tClass LayoutBase", "Static clipToBoundsProperty"],
    ["navigate(create: function): any\tClass Frame", "navigate(${1:create: function})"],
    ["notify<T>(data: T): void\tClass DependencyObservable", "notify<T>(${1:data: T})"],
    ["bindingContextProperty: Property\tClass Button", "Static bindingContextProperty"],
    ["_unregisterAllAnimations(): any\tClass LayoutBase", "_unregisterAllAnimations()"],
    ["_disableNavBarAnimation: boolean\tInterface iOSFrame", "_disableNavBarAnimation"],
    ["clipToBoundsProperty: Property\tClass GridLayout", "Static clipToBoundsProperty"],
    ["_emit(eventNames: string): any\tClass WebView", "_emit(${1:eventNames: string})"],
    ["isUserInteractionEnabled: boolean\tClass GridLayout", "isUserInteractionEnabled"],
    ["automationTextProperty: Property\tClass Slider", "Static automationTextProperty"],
    ["_unregisterAllAnimations(): any\tClass DockLayout", "_unregisterAllAnimations()"],
    ["formattedTextProperty: Property\tClass TextBase", "Static formattedTextProperty"],
    ["getChildAt(index: number): View\tClass Layout", "getChildAt(${1:index: number})"],
    ["clearInterval(id: number): void\tModule timer", "clearInterval(${1:id: number})"],
    ["_getCurrentLayoutBounds(): object\tClass TextField", "_getCurrentLayoutBounds()"],
    ["MediumVioletRed: any\tModule color/known-colors", "MediumVioletRed"],
    ["bindingContextProperty: Property\tClass Border", "Static bindingContextProperty"],
    ["_isInheritedChange(): boolean\tClass ProxyViewContainer", "_isInheritedChange()"],
    ["_shouldApplyStyleHandlers(): any\tClass ListView", "_shouldApplyStyleHandlers()"],
    ["removeChild(view: View): void\tClass DockLayout", "removeChild(${1:view: View})"],
    ["automationTextProperty: Property\tClass Border", "Static automationTextProperty"],
    ["_isAddedToNativeVisualTree: boolean\tClass Border", "_isAddedToNativeVisualTree"],
    ["_unregisterAllAnimations(): any\tClass DatePicker", "_unregisterAllAnimations()"],
    ["_removeView(view: View): any\tClass StackLayout", "_removeView(${1:view: View})"],
    ["unbind(property: string): any\tClass SearchBar", "unbind(${1:property: string})"],
    ["_isAddedToNativeVisualTree: boolean\tClass Layout", "_isAddedToNativeVisualTree"],
    ["getRowSpan(view: View): number\tClass GridLayout", "getRowSpan(${1:view: View})"],
    ["_shouldApplyStyleHandlers(): any\tClass HtmlView", "_shouldApplyStyleHandlers()"],
    ["MediumSlateBlue: any\tModule color/known-colors", "MediumSlateBlue"],
    ["_removeFromSuperview(): any\tClass ProxyViewContainer", "_removeFromSuperview()"],
    ["cancelButtonText: string\tInterface ConfirmOptions", "Optional cancelButtonText"],
    ["_onAttached(context: any): void\tClass Layout", "_onAttached(${1:context: any})"],
    ["_getCurrentLayoutBounds(): object\tClass ActionBar", "_getCurrentLayoutBounds()"],
    ["bindingContextProperty: Property\tClass Layout", "Static bindingContextProperty"],
    ["_shouldApplyStyleHandlers(): any\tClass TextBase", "_shouldApplyStyleHandlers()"],
    ["automationTextProperty: Property\tClass Layout", "Static automationTextProperty"],
    ["isUserInteractionEnabled: boolean\tClass TimePicker", "isUserInteractionEnabled"],
    ["removeChild(view: View): void\tClass GridLayout", "removeChild(${1:view: View})"],
    ["isEnabledProperty: Property\tClass EditableTextBase", "Static isEnabledProperty"],
    ["bindingContextProperty: Property\tClass Switch", "Static bindingContextProperty"],
    ["_onAttached(context: any): void\tClass Border", "_onAttached(${1:context: any})"],
    ["_removeView(view: View): any\tClass Placeholder", "_removeView(${1:view: View})"],
    ["_shouldApplyStyleHandlers(): any\tClass Repeater", "_shouldApplyStyleHandlers()"],
    ["classNameProperty: Property\tClass EditableTextBase", "Static classNameProperty"],
    ["MediumTurquoise: any\tModule color/known-colors", "MediumTurquoise"],
    ["_isAddedToNativeVisualTree: boolean\tClass Button", "_isAddedToNativeVisualTree"],
    ["removeChild(view: View): void\tClass WrapLayout", "removeChild(${1:view: View})"],
    ["isUserInteractionEnabled: boolean\tClass WrapLayout", "isUserInteractionEnabled"],
    ["getLocationOnScreen(): Point\tClass ProxyViewContainer", "getLocationOnScreen()"],
    ["propertyChangeEvent: string\tClass AbsoluteLayout", "Static propertyChangeEvent"],
    ["clipToBoundsProperty: Property\tClass WrapLayout", "Static clipToBoundsProperty"],
    ["actionBarHiddenProperty: Property\tClass Page", "Static actionBarHiddenProperty"],
    ["getPointerCount(): number\tInterface TouchGestureEventData", "getPointerCount()"],
    ["automationTextProperty: Property\tClass Switch", "Static automationTextProperty"],
    ["getLocationInWindow(): Point\tClass ProxyViewContainer", "getLocationInWindow()"],
    ["isUserInteractionEnabled: boolean\tClass DockLayout", "isUserInteractionEnabled"],
    ["_removeView(view: View): any\tClass ContentView", "_removeView(${1:view: View})"],
    ["_unregisterAllAnimations(): any\tClass TimePicker", "_unregisterAllAnimations()"],
    ["cssClassProperty: Property\tClass ProxyViewContainer", "Static cssClassProperty"],
    ["clipToBoundsProperty: Property\tClass DockLayout", "Static clipToBoundsProperty"],
    ["_unregisterAllAnimations(): any\tClass WrapLayout", "_unregisterAllAnimations()"],
    ["isUserInteractionEnabled: boolean\tClass ListPicker", "isUserInteractionEnabled"],
    ["isUserInteractionEnabled: boolean\tClass ActionBar", "isUserInteractionEnabled"],
    ["_getCurrentLayoutBounds(): object\tClass ListView", "_getCurrentLayoutBounds()"],
    ["_emit(eventNames: string): any\tClass Border", "_emit(${1:eventNames: string})"],
    ["bindingContextProperty: Property\tClass Frame", "Static bindingContextProperty"],
    ["getLocationInWindow(): Point\tClass ActivityIndicator", "getLocationInWindow()"],
    ["onValidateValue: PropertyValidationCallback\tClass Property", "onValidateValue"],
    ["valueConverter: function(value: string): any\tClass Property", "valueConverter"],
    ["_isAddedToNativeVisualTree: boolean\tClass Frame", "_isAddedToNativeVisualTree"],
    ["cancelButtonText: string\tInterface ActionOptions", "Optional cancelButtonText"],
    ["unbind(property: string): any\tClass ListView", "unbind(${1:property: string})"],
    ["selectedColorProperty: Property\tClass TabView", "Static selectedColorProperty"],
    ["equalityComparer: PropertyEqualityComparer\tClass Property", "equalityComparer"],
    ["_syncNativeProperties(): void\tClass AbsoluteLayout", "_syncNativeProperties()"],
    ["_removeView(view: View): any\tClass GridLayout", "_removeView(${1:view: View})"],
    ["rightMarginPercent: number\tInterface CommonLayoutParams", "rightMarginPercent"],
    ["_getNativeViewsCount(): number\tClass AbsoluteLayout", "_getNativeViewsCount()"],
    ["selectedIndexProperty: Property\tClass TabView", "Static selectedIndexProperty"],
    ["cancelButtonText: string\tInterface PromptOptions", "Optional cancelButtonText"],
    ["_onAttached(context: any): void\tClass Frame", "_onAttached(${1:context: any})"],
    ["unbind(property: string): any\tClass Repeater", "unbind(${1:property: string})"],
    ["orientationChangedEvent: string\tModule application", "orientationChangedEvent"],
    ["getViewById<T>(id: string): T\tClass Border", "getViewById<T>(${1:id: string})"],
    ["onValidateValue: PropertyValidationCallback\tClass Property", "onValidateValue"],
    ["equalityComparer: PropertyEqualityComparer\tClass Property", "equalityComparer"],
    ["_isAddedToNativeVisualTree: boolean\tClass Label", "_isAddedToNativeVisualTree"],
    ["getLocationOnScreen(): Point\tClass ActivityIndicator", "getLocationOnScreen()"],
    ["cssClassProperty: Property\tClass ActivityIndicator", "Static cssClassProperty"],
    ["_getCurrentLayoutBounds(): object\tClass TextView", "_getCurrentLayoutBounds()"],
    ["automationTextProperty: Property\tClass Frame", "Static automationTextProperty"],
    ["orientationProperty: Property\tClass StackLayout", "Static orientationProperty"],
    ["_shouldApplyStyleHandlers(): any\tClass TabView", "_shouldApplyStyleHandlers()"],
    ["_removeView(view: View): any\tClass ListPicker", "_removeView(${1:view: View})"],
    ["_getCurrentLayoutBounds(): object\tClass Repeater", "_getCurrentLayoutBounds()"],
    ["_shouldApplyStyleHandlers(): any\tClass WebView", "_shouldApplyStyleHandlers()"],
    ["_getCurrentLayoutBounds(): object\tClass HtmlView", "_getCurrentLayoutBounds()"],
    ["getViewById<T>(id: string): T\tClass Slider", "getViewById<T>(${1:id: string})"],
    ["getEntities(): Promise<Array<FileSystemEntity>>\tClass Folder", "getEntities()"],
    ["_removeView(view: View): any\tClass DockLayout", "_removeView(${1:view: View})"],
    ["_isAddedToNativeVisualTree: boolean\tClass Image", "_isAddedToNativeVisualTree"],
    ["_removeView(view: View): any\tClass ScrollView", "_removeView(${1:view: View})"],
    ["unbind(property: string): any\tClass TextBase", "unbind(${1:property: string})"],
    ["_removeView(view: View): any\tClass TimePicker", "_removeView(${1:view: View})"],
    ["automationTextProperty: Property\tClass Image", "Static automationTextProperty"],
    ["_emit(eventNames: string): any\tClass Button", "_emit(${1:eventNames: string})"],
    ["keyboardTypeProperty: Property\tClass TextField", "Static keyboardTypeProperty"],
    ["_removeView(view: View): any\tClass DatePicker", "_removeView(${1:view: View})"],
    ["bindingContextProperty: Property\tClass Image", "Static bindingContextProperty"],
    ["_onAttached(context: any): void\tClass Image", "_onAttached(${1:context: any})"],
    ["_unregisterAllAnimations(): any\tClass ActionBar", "_unregisterAllAnimations()"],
    ["_removeView(view: View): any\tClass WrapLayout", "_removeView(${1:view: View})"],
    ["_getCurrentLayoutBounds(): object\tClass TextBase", "_getCurrentLayoutBounds()"],
    ["_removeFromSuperview(): any\tClass ActivityIndicator", "_removeFromSuperview()"],
    ["time(reportName: string): void\tClass Console", "time(${1:reportName: string})"],
    ["_unregisterAllAnimations(): any\tClass TextField", "_unregisterAllAnimations()"],
    ["_isInheritedChange(): boolean\tClass ActivityIndicator", "_isInheritedChange()"],
    ["_onAttached(context: any): void\tClass Label", "_onAttached(${1:context: any})"],
    ["getViewById<T>(id: string): T\tClass Layout", "getViewById<T>(${1:id: string})"],
    ["_emit(eventNames: string): any\tClass Layout", "_emit(${1:eventNames: string})"],
    ["onValidateValue: PropertyValidationCallback\tClass Property", "onValidateValue"],
    ["_emit(eventNames: string): any\tClass Switch", "_emit(${1:eventNames: string})"],
    ["getViewById<T>(id: string): T\tClass Button", "getViewById<T>(${1:id: string})"],
    ["valueConverter: function(value: string): any\tClass Property", "valueConverter"],
    ["equalityComparer: PropertyEqualityComparer\tClass Property", "equalityComparer"],
    ["bindingContextProperty: Property\tClass Label", "Static bindingContextProperty"],
    ["unbind(property: string): any\tClass TextView", "unbind(${1:property: string})"],
    ["automationTextProperty: Property\tClass Label", "Static automationTextProperty"],
    ["_removeView(view: View): any\tClass LayoutBase", "_removeView(${1:view: View})"],
    ["unbind(property: string): any\tClass Bindable", "unbind(${1:property: string})"],
    ["getViewById<T>(id: string): T\tClass Switch", "getViewById<T>(${1:id: string})"],
    ["_unregisterAllAnimations(): any\tClass SearchBar", "_unregisterAllAnimations()"],
    ["formattedText: FormattedString\tInterface FormattedStringView", "formattedText"],
    ["_getCurrentLayoutBounds(): object\tClass Progress", "_getCurrentLayoutBounds()"],
    ["isUserInteractionEnabled: boolean\tClass SearchBar", "isUserInteractionEnabled"],
    ["_emit(eventNames: string): any\tClass Slider", "_emit(${1:eventNames: string})"],
    ["isUserInteractionEnabled: boolean\tClass TextField", "isUserInteractionEnabled"],
    ["unbind(property: string): any\tClass Progress", "unbind(${1:property: string})"],
    ["unbind(property: string): any\tClass HtmlView", "unbind(${1:property: string})"],
    ["_unregisterAllAnimations(): any\tClass ListView", "_unregisterAllAnimations()"],
    ["notify<T>(data: T): void\tClass AndroidApplication", "notify<T>(${1:data: T})"],
    ["bindingContextProperty: Property\tClass View", "Static bindingContextProperty"],
    ["getLeft(view: View): number\tClass AbsoluteLayout", "getLeft(${1:view: View})"],
    ["selectedBackgroundColor: Color\tClass SegmentedBar", "selectedBackgroundColor"],
    ["automationTextProperty: Property\tClass View", "Static automationTextProperty"],
    ["CornflowerBlue: any\tModule color/known-colors", "CornflowerBlue"],
    ["DarkOliveGreen: any\tModule color/known-colors", "DarkOliveGreen"],
    ["getViewById<T>(id: string): T\tClass Frame", "getViewById<T>(${1:id: string})"],
    ["_unregisterAllAnimations(): any\tClass Repeater", "_unregisterAllAnimations()"],
    ["getLocationInWindow(): Point\tClass EditableTextBase", "getLocationInWindow()"],
    ["clearTimeout(id: number): void\tModule timer", "clearTimeout(${1:id: number})"],
    ["bindingContextProperty: Property\tClass Page", "Static bindingContextProperty"],
    ["_isInheritedChange(): boolean\tClass EditableTextBase", "_isInheritedChange()"],
    ["_removeFromSuperview(): any\tClass EditableTextBase", "_removeFromSuperview()"],
    ["getLocationOnScreen(): Point\tClass EditableTextBase", "getLocationOnScreen()"],
    ["automationTextProperty: Property\tClass Page", "Static automationTextProperty"],
    ["isUserInteractionEnabled: boolean\tClass TextBase", "isUserInteractionEnabled"],
    ["isUserInteractionEnabled: boolean\tClass TextView", "isUserInteractionEnabled"],
    ["getViewById<T>(id: string): T\tClass Label", "getViewById<T>(${1:id: string})"],
    ["_emit(eventNames: string): any\tClass Style", "_emit(${1:eventNames: string})"],
    ["BlanchedAlmond: any\tModule color/known-colors", "BlanchedAlmond"],
    ["_shouldApplyStyleHandlers(): any\tClass Layout", "_shouldApplyStyleHandlers()"],
    ["isUserInteractionEnabled: boolean\tClass Progress", "isUserInteractionEnabled"],
    ["contentController: any\tInterface RootViewControllerImpl", "contentController"],
    ["getColumn(view: View): number\tClass GridLayout", "getColumn(${1:view: View})"],
    ["itemTemplateProperty: Property\tClass Repeater", "Static itemTemplateProperty"],
    ["_getCurrentLayoutBounds(): object\tClass TabView", "_getCurrentLayoutBounds()"],
    ["_emit(eventNames: string): any\tClass Image", "_emit(${1:eventNames: string})"],
    ["itemTemplateProperty: Property\tClass ListView", "Static itemTemplateProperty"],
    ["classNameProperty: Property\tClass AbsoluteLayout", "Static classNameProperty"],
    ["_isAddedToNativeVisualTree: boolean\tClass View", "_isAddedToNativeVisualTree"],
    ["cancelButtonText: string\tInterface LoginOptions", "Optional cancelButtonText"],
    ["orientationProperty: Property\tClass WrapLayout", "Static orientationProperty"],
    ["_isAddedToNativeVisualTree: boolean\tClass Page", "_isAddedToNativeVisualTree"],
    ["_unregisterAllAnimations(): any\tClass Progress", "_unregisterAllAnimations()"],
    ["addChild(view: View): void\tClass AbsoluteLayout", "addChild(${1:view: View})"],
    ["_emit(eventNames: string): any\tClass Frame", "_emit(${1:eventNames: string})"],
    ["isEnabledProperty: Property\tClass AbsoluteLayout", "Static isEnabledProperty"],
    ["propertyChangeEvent: string\tClass SegmentedBar", "Static propertyChangeEvent"],
    ["_removeView(view: View): any\tClass ActionBar", "_removeView(${1:view: View})"],
    ["notify<T>(data: T): void\tClass ProxyViewContainer", "notify<T>(${1:data: T})"],
    ["LightSlateGray: any\tModule color/known-colors", "LightSlateGray"],
    ["MediumSeaGreen: any\tModule color/known-colors", "MediumSeaGreen"],
    ["_unregisterAllAnimations(): any\tClass TextBase", "_unregisterAllAnimations()"],
    ["getViewById<T>(id: string): T\tClass Image", "getViewById<T>(${1:id: string})"],
    ["bindingContextProperty: Property\tClass Span", "Static bindingContextProperty"],
    ["LightSteelBlue: any\tModule color/known-colors", "LightSteelBlue"],
    ["notify<T>(data: T): void\tClass ObservableArray<T>", "notify<T>(${1:data: T})"],
    ["unbind(property: string): any\tClass WebView", "unbind(${1:property: string})"],
    ["_onAttached(context: any): void\tClass View", "_onAttached(${1:context: any})"],
    ["_emit(eventNames: string): any\tClass Cache", "_emit(${1:eventNames: string})"],
    ["isUserInteractionEnabled: boolean\tClass HtmlView", "isUserInteractionEnabled"],
    ["_shouldApplyStyleHandlers(): any\tClass Button", "_shouldApplyStyleHandlers()"],
    ["_emit(eventNames: string): any\tClass Label", "_emit(${1:eventNames: string})"],
    ["cachePagesOnNavigate: boolean\tInterface AndroidFrame", "cachePagesOnNavigate"],
    ["orientationProperty: Property\tClass ScrollView", "Static orientationProperty"],
    ["keyboardTypeProperty: Property\tClass TextView", "Static keyboardTypeProperty"],
    ["_getCurrentLayoutBounds(): object\tClass WebView", "_getCurrentLayoutBounds()"],
    ["_shouldApplyStyleHandlers(): any\tClass Switch", "_shouldApplyStyleHandlers()"],
    ["isUserInteractionEnabled: boolean\tClass Repeater", "isUserInteractionEnabled"],
    ["isUserInteractionEnabled: boolean\tClass ListView", "isUserInteractionEnabled"],
    ["_unregisterAllAnimations(): any\tClass HtmlView", "_unregisterAllAnimations()"],
    ["_unregisterAllAnimations(): any\tClass TextView", "_unregisterAllAnimations()"],
    ["eventName: string\tInterface AndroidActivityBackPressedEventData", "eventName"],
    ["_removeView(view: View): any\tClass SearchBar", "_removeView(${1:view: View})"],
    ["_emit(eventNames: string): any\tClass Style", "_emit(${1:eventNames: string})"],
    ["_shouldApplyStyleHandlers(): any\tClass Border", "_shouldApplyStyleHandlers()"],
    ["_shouldApplyStyleHandlers(): any\tClass Slider", "_shouldApplyStyleHandlers()"],
    ["unbind(property: string): any\tClass TabView", "unbind(${1:property: string})"],
    ["keepAspectRatio: boolean\tInterface CameraOptions", "Optional keepAspectRatio"],
    ["getFolder(name: string): Folder\tClass Folder", "getFolder(${1:name: string})"],
    ["cssClassProperty: Property\tClass EditableTextBase", "Static cssClassProperty"],
    ["_removeView(view: View): any\tClass TextField", "_removeView(${1:view: View})"],
    ["getLocationInWindow(): Point\tClass CustomLayoutView", "getLocationInWindow()"],
    ["toModel: function(...params: any[]): any\tInterface ValueConverter", "toModel"],
    ["_removeFromSuperview(): any\tClass CustomLayoutView", "_removeFromSuperview()"],
    ["getLocationOnScreen(): Point\tClass CustomLayoutView", "getLocationOnScreen()"],
    ["_isInheritedChange(): boolean\tClass CustomLayoutView", "_isInheritedChange()"],
    ["addCss(cssString: string): void\tClass Page", "addCss(${1:cssString: string})"],
    ["editableProperty: Property\tClass EditableTextBase", "Static editableProperty"],
    ["_onAttached(context: any): void\tClass Page", "_onAttached(${1:context: any})"],
    ["cssClassProperty: Property\tClass CustomLayoutView", "Static cssClassProperty"],
    ["_shouldApplyStyleHandlers(): any\tClass Label", "_shouldApplyStyleHandlers()"],
    ["_syncNativeProperties(): void\tClass SegmentedBar", "_syncNativeProperties()"],
    ["propertyChangeEvent: string\tClass ProxyObject", "Static propertyChangeEvent"],
    ["_shouldApplyStyleHandlers(): any\tClass Image", "_shouldApplyStyleHandlers()"],
    ["getMeasuredHeight(): number\tClass ProxyViewContainer", "getMeasuredHeight()"],
    ["_unregisterAllAnimations(): any\tClass TabView", "_unregisterAllAnimations()"],
    ["_getCurrentLayoutBounds(): object\tClass Button", "_getCurrentLayoutBounds()"],
    ["_removeView(view: View): any\tClass TextView", "_removeView(${1:view: View})"],
    ["_removeView(view: View): any\tClass Repeater", "_removeView(${1:view: View})"],
    ["formattedTextProperty: Property\tClass Label", "Static formattedTextProperty"],
    ["verticalAlignment: string\tInterface CommonLayoutParams", "verticalAlignment"],
    ["autocorrectProperty: Property\tClass TextField", "Static autocorrectProperty"],
    ["_emit(eventNames: string): any\tClass View", "_emit(${1:eventNames: string})"],
    ["_removeView(view: View): any\tClass Progress", "_removeView(${1:view: View})"],
    ["_removeView(view: View): any\tClass HtmlView", "_removeView(${1:view: View})"],
    ["requestCode: number\tInterface AndroidActivityResultEventData", "requestCode"],
    ["propertyChangeEvent: string\tClass Placeholder", "Static propertyChangeEvent"],
    ["_getCurrentLayoutBounds(): object\tClass Slider", "_getCurrentLayoutBounds()"],
    ["iconVisibility: string\tInterface AndroidActionBarSettings", "iconVisibility"],
    ["get(name: string): any\tClass DependencyObservable", "get(${1:name: string})"],
    ["_emit(eventNames: string): any\tClass Page", "_emit(${1:eventNames: string})"],
    ["getLogicalRootPath(): string\tClass FileSystemAccess", "getLogicalRootPath()"],
    ["unbind(property: string): any\tClass Slider", "unbind(${1:property: string})"],
    ["_getNativeViewsCount(): number\tClass SegmentedBar", "_getNativeViewsCount()"],
    ["textFieldBackgroundColor: Color\tClass SearchBar", "textFieldBackgroundColor"],
    ["leftMarginPercent: number\tInterface CommonLayoutParams", "leftMarginPercent"],
    ["_getCurrentLayoutBounds(): object\tClass Border", "_getCurrentLayoutBounds()"],
    ["_shouldApplyStyleHandlers(): any\tClass Frame", "_shouldApplyStyleHandlers()"],
    ["propertyChangeEvent: string\tClass ContentView", "Static propertyChangeEvent"],
    ["unbind(property: string): any\tClass Border", "unbind(${1:property: string})"],
    ["getViewById<T>(id: string): T\tClass View", "getViewById<T>(${1:id: string})"],
    ["_removeView(view: View): any\tClass TextBase", "_removeView(${1:view: View})"],
    ["content: string | FormData\tInterface HttpRequestOptions", "Optional content"],
    ["_removeView(view: View): any\tClass ListView", "_removeView(${1:view: View})"],
    ["contains(name: string): boolean\tClass Folder", "contains(${1:name: string})"],
    ["notify<T>(data: T): void\tClass ActivityIndicator", "notify<T>(${1:data: T})"],
    ["_getCurrentLayoutBounds(): object\tClass Switch", "_getCurrentLayoutBounds()"],
    ["_unregisterAllAnimations(): any\tClass WebView", "_unregisterAllAnimations()"],
    ["unbind(property: string): any\tClass Layout", "unbind(${1:property: string})"],
    ["unbind(property: string): any\tClass Switch", "unbind(${1:property: string})"],
    ["getViewById<T>(id: string): T\tClass Page", "getViewById<T>(${1:id: string})"],
    ["unbind(property: string): any\tClass Button", "unbind(${1:property: string})"],
    ["_emit(eventNames: string): any\tClass Span", "_emit(${1:eventNames: string})"],
    ["propertyChangeEvent: string\tClass StackLayout", "Static propertyChangeEvent"],
    ["_getCurrentLayoutBounds(): object\tClass Layout", "_getCurrentLayoutBounds()"],
    ["isUserInteractionEnabled: boolean\tClass WebView", "isUserInteractionEnabled"],
    ["isUserInteractionEnabled: boolean\tClass TabView", "isUserInteractionEnabled"],
    ["horizontalAlignment: string\tClass ProxyViewContainer", "horizontalAlignment"],
    ["propertyChangeEvent: string\tClass TabViewItem", "Static propertyChangeEvent"],
    ["itemsLoadingEvent: string\tClass VirtualArray<T>", "Static itemsLoadingEvent"],
    ["DarkTurquoise: any\tModule color/known-colors", "DarkTurquoise"],
    ["_syncNativeProperties(): void\tClass ProxyObject", "_syncNativeProperties()"],
    ["classNameProperty: Property\tClass SegmentedBar", "Static classNameProperty"],
    ["LavenderBlush: any\tModule color/known-colors", "LavenderBlush"],
    ["isEnabledProperty: Property\tClass SegmentedBar", "Static isEnabledProperty"],
    ["horizontalAlignment: string\tClass ActivityIndicator", "horizontalAlignment"],
    ["PaleVioletRed: any\tModule color/known-colors", "PaleVioletRed"],
    ["isUserInteractionEnabled: boolean\tClass Button", "isUserInteractionEnabled"],
    ["DarkGoldenRod: any\tModule color/known-colors", "DarkGoldenRod"],
    ["_syncNativeProperties(): void\tClass Placeholder", "_syncNativeProperties()"],
    ["isUserInteractionEnabled: boolean\tClass Switch", "isUserInteractionEnabled"],
    ["PaleGoldenRod: any\tModule color/known-colors", "PaleGoldenRod"],
    ["propertyChangeEvent: string\tClass LayoutBase", "Static propertyChangeEvent"],
    ["DarkSlateGray: any\tModule color/known-colors", "DarkSlateGray"],
    ["DarkSlateBlue: any\tModule color/known-colors", "DarkSlateBlue"],
    ["PaleTurquoise: any\tModule color/known-colors", "PaleTurquoise"],
    ["RESOURCE_PREFIX: string\tModule utils/utils", "RESOURCE_PREFIX"],
    ["isUserInteractionEnabled: boolean\tClass Slider", "isUserInteractionEnabled"],
    ["valueConverter: function(value: any): any\tClass Property", "valueConverter"],
    ["_getNativeViewsCount(): number\tClass ContentView", "_getNativeViewsCount()"],
    ["notify<T>(data: T): void\tInterface AndroidFrame", "notify<T>(${1:data: T})"],
    ["_unregisterAllAnimations(): any\tClass Button", "_unregisterAllAnimations()"],
    ["_shouldApplyStyleHandlers(): any\tClass Page", "_shouldApplyStyleHandlers()"],
    ["_getNativeViewsCount(): number\tClass Placeholder", "_getNativeViewsCount()"],
    ["propertyChangeEvent: string\tClass Observable", "Static propertyChangeEvent"],
    ["propertyChangeEvent: string\tClass GridLayout", "Static propertyChangeEvent"],
    ["LightSeaGreen: any\tModule color/known-colors", "LightSeaGreen"],
    ["_syncNativeProperties(): void\tClass ContentView", "_syncNativeProperties()"],
    ["_unregisterAllAnimations(): any\tClass Switch", "_unregisterAllAnimations()"],
    ["_getCurrentLayoutBounds(): object\tClass Frame", "_getCurrentLayoutBounds()"],
    ["columnSpanProperty: Property\tClass GridLayout", "Static columnSpanProperty"],
    ["toView: function(...params: any[]): any\tInterface ValueConverter", "toView"],
    ["_unregisterAllAnimations(): any\tClass Slider", "_unregisterAllAnimations()"],
    ["_removeView(view: View): any\tClass TabView", "_removeView(${1:view: View})"],
    ["notify<T>(data: T): void\tClass NavigationButton", "notify<T>(${1:data: T})"],
    ["itemHeightProperty: Property\tClass WrapLayout", "Static itemHeightProperty"],
    ["parentFormattedString: FormattedString\tClass Span", "parentFormattedString"],
    ["clipToBoundsProperty: Property\tClass Layout", "Static clipToBoundsProperty"],
    ["_removeView(view: View): any\tClass WebView", "_removeView(${1:view: View})"],
    ["_syncNativeProperties(): void\tClass StackLayout", "_syncNativeProperties()"],
    ["_getCurrentLayoutBounds(): object\tClass Label", "_getCurrentLayoutBounds()"],
    ["isUserInteractionEnabled: boolean\tClass Layout", "isUserInteractionEnabled"],
    ["propertyChangeEvent: string\tClass WrapLayout", "Static propertyChangeEvent"],
    ["fromPath(path: string): Folder\tClass Folder", "fromPath(${1:path: string})"],
    ["cssPseudoClasses: Set<string>\tClass ProxyViewContainer", "cssPseudoClasses"],
    ["comb: + | ~ | > |  \tInterface PseudoClassSelector", "Optional comb"],
    ["notify<T>(data: T): void\tClass SegmentedBarItem", "notify<T>(${1:data: T})"],
    ["wrap(value: any): WrappedValue\tClass WrappedValue", "wrap(${1:value: any})"],
    ["unbind(property: string): any\tClass Label", "unbind(${1:property: string})"],
    ["notify<T>(data: T): void\tClass EditableTextBase", "notify<T>(${1:data: T})"],
    ["autocorrectProperty: Property\tClass TextView", "Static autocorrectProperty"],
    ["propertyChangeEvent: string\tClass DockLayout", "Static propertyChangeEvent"],
    ["propertyChangeEvent: string\tClass ListPicker", "Static propertyChangeEvent"],
    ["notify<T>(data: T): void\tClass CustomLayoutView", "notify<T>(${1:data: T})"],
    ["propertyChangeEvent: string\tClass TimePicker", "Static propertyChangeEvent"],
    ["push(items: T[]): number\tClass ObservableArray<T>", "push(${1:items: T[]})"],
    ["_unregisterAllAnimations(): any\tClass Layout", "_unregisterAllAnimations()"],
    ["propertyChangeEvent: string\tClass ScrollView", "Static propertyChangeEvent"],
    ["_getNativeViewsCount(): number\tClass StackLayout", "_getNativeViewsCount()"],
    ["_shouldApplyStyleHandlers(): any\tClass View", "_shouldApplyStyleHandlers()"],
    ["removeChild(view: View): void\tClass Layout", "removeChild(${1:view: View})"],
    ["_getCurrentLayoutBounds(): object\tClass Image", "_getCurrentLayoutBounds()"],
    ["_removeFromSuperview(): any\tClass AbsoluteLayout", "_removeFromSuperview()"],
    ["itemsLayoutProperty: Property\tClass Repeater", "Static itemsLayoutProperty"],
    ["getTop(view: View): number\tClass AbsoluteLayout", "getTop(${1:view: View})"],
    ["_unregisterAllAnimations(): any\tClass Border", "_unregisterAllAnimations()"],
    ["isScrollingProperty: Property\tClass ListView", "Static isScrollingProperty"],
    ["object: any\tInterface AndroidActivityRequestPermissionsEventData", "object"],
    ["getLocationOnScreen(): Point\tClass AbsoluteLayout", "getLocationOnScreen()"],
    ["getLocationInWindow(): Point\tClass AbsoluteLayout", "getLocationInWindow()"],
    ["getMeasuredHeight(): number\tClass ActivityIndicator", "getMeasuredHeight()"],
    ["unbind(property: string): any\tClass Image", "unbind(${1:property: string})"],
    ["toImage: function(): Promise<ImageSource>\tInterface HttpContent", "toImage"],
    ["propertyChangeEvent: string\tClass ActionItem", "Static propertyChangeEvent"],
    ["_isInheritedChange(): boolean\tClass AbsoluteLayout", "_isInheritedChange()"],
    ["isUserInteractionEnabled: boolean\tClass Border", "isUserInteractionEnabled"],
    ["visibilityProperty: Property\tClass ActionItem", "Static visibilityProperty"],
    ["cssClassProperty: Property\tClass AbsoluteLayout", "Static cssClassProperty"],
    ["propertyChangeEvent: string\tClass DatePicker", "Static propertyChangeEvent"],
    ["unbind(property: string): any\tClass Frame", "unbind(${1:property: string})"],
    ["cssPseudoClasses: Set<string>\tClass ActivityIndicator", "cssPseudoClasses"],
    ["_syncNativeProperties(): void\tClass DockLayout", "_syncNativeProperties()"],
    ["_removeView(view: View): any\tClass Switch", "_removeView(${1:view: View})"],
    ["_getNativeViewsCount(): number\tClass ListPicker", "_getNativeViewsCount()"],
    ["_removeView(view: View): any\tClass Slider", "_removeView(${1:view: View})"],
    ["propertyChangeEvent: string\tClass ActionBar", "Static propertyChangeEvent"],
    ["horizontalAlignment: string\tClass EditableTextBase", "horizontalAlignment"],
    ["_syncNativeProperties(): void\tClass ListPicker", "_syncNativeProperties()"],
    ["getMeasuredHeight(): number\tClass CustomLayoutView", "getMeasuredHeight()"],
    ["notify<T>(data: T): void\tClass FormattedString", "notify<T>(${1:data: T})"],
    ["isUserInteractionEnabled: boolean\tClass Label", "isUserInteractionEnabled"],
    ["_syncNativeProperties(): void\tClass ScrollView", "_syncNativeProperties()"],
    ["_unregisterAllAnimations(): any\tClass Label", "_unregisterAllAnimations()"],
    ["_removeView(view: View): any\tClass Button", "_removeView(${1:view: View})"],
    ["isUserInteractionEnabled: boolean\tClass Frame", "isUserInteractionEnabled"],
    ["minimumUpdateTime: number\tInterface Options", "Optional minimumUpdateTime"],
    ["unbind(property: string): any\tClass View", "unbind(${1:property: string})"],
    ["_removeView(view: View): any\tClass Border", "_removeView(${1:view: View})"],
    ["notify<T>(data: T): void\tClass VirtualArray<T>", "notify<T>(${1:data: T})"],
    ["_getNativeViewsCount(): number\tClass GridLayout", "_getNativeViewsCount()"],
    ["horizontalAlignment: string\tClass CustomLayoutView", "horizontalAlignment"],
    ["_getNativeViewsCount(): number\tClass ScrollView", "_getNativeViewsCount()"],
    ["propertyChangeEvent: string\tClass SearchBar", "Static propertyChangeEvent"],
    ["unbind(property: string): any\tClass Page", "unbind(${1:property: string})"],
    ["cssPseudoClasses: Set<string>\tInterface Node", "Optional cssPseudoClasses"],
    ["_getNativeViewsCount(): number\tClass WrapLayout", "_getNativeViewsCount()"],
    ["getCurrentAppPath(): string\tClass FileSystemAccess", "getCurrentAppPath()"],
    ["topMarginPercent: number\tInterface CommonLayoutParams", "topMarginPercent"],
    ["_getNativeViewsCount(): number\tClass TimePicker", "_getNativeViewsCount()"],
    ["_getNativeViewsCount(): number\tClass DatePicker", "_getNativeViewsCount()"],
    ["getChildrenCount(): number\tClass ProxyViewContainer", "getChildrenCount()"],
    ["classNameProperty: Property\tClass ContentView", "Static classNameProperty"],
    ["propertyChangeEvent: string\tClass TextField", "Static propertyChangeEvent"],
    ["_syncNativeProperties(): void\tClass DatePicker", "_syncNativeProperties()"],
    ["_unregisterAllAnimations(): any\tClass Image", "_unregisterAllAnimations()"],
    ["getMeasuredWidth(): number\tClass ProxyViewContainer", "getMeasuredWidth()"],
    ["_getNativeViewsCount(): number\tClass LayoutBase", "_getNativeViewsCount()"],
    ["isEnabledProperty: Property\tClass Placeholder", "Static isEnabledProperty"],
    ["_syncNativeProperties(): void\tClass LayoutBase", "_syncNativeProperties()"],
    ["getTempFolderPath(): string\tClass FileSystemAccess", "getTempFolderPath()"],
    ["play: function(view: View): Promise<void>\tClass KeyframeAnimation", "play"],
    ["_syncNativeProperties(): void\tClass GridLayout", "_syncNativeProperties()"],
    ["_unregisterAllAnimations(): any\tClass Frame", "_unregisterAllAnimations()"],
    ["navigationQueueIsEmpty(): boolean\tClass Frame", "navigationQueueIsEmpty()"],
    ["get(name: string): any\tClass ProxyViewContainer", "get(${1:name: string})"],
    ["unbind(property: string): any\tClass Span", "unbind(${1:property: string})"],
    ["_syncNativeProperties(): void\tClass WrapLayout", "_syncNativeProperties()"],
    ["getMeasuredHeight(): number\tClass EditableTextBase", "getMeasuredHeight()"],
    ["isUserInteractionEnabled: boolean\tClass Image", "isUserInteractionEnabled"],
    ["_getCurrentLayoutBounds(): object\tClass View", "_getCurrentLayoutBounds()"],
    ["_getCurrentLayoutBounds(): object\tClass Page", "_getCurrentLayoutBounds()"],
    ["get(name: string): any\tClass ObservableArray<T>", "get(${1:name: string})"],
    ["_getNativeViewsCount(): number\tClass DockLayout", "_getNativeViewsCount()"],
    ["resultCode: number\tInterface AndroidActivityResultEventData", "resultCode"],
    ["isEnabledProperty: Property\tClass ContentView", "Static isEnabledProperty"],
    ["get(name: string): any\tClass AndroidApplication", "get(${1:name: string})"],
    ["_removeView(view: View): any\tClass Layout", "_removeView(${1:view: View})"],
    ["classNameProperty: Property\tClass Placeholder", "Static classNameProperty"],
    ["classNameProperty: Property\tClass StackLayout", "Static classNameProperty"],
    ["addChild(view: View): void\tClass StackLayout", "addChild(${1:view: View})"],
    ["_onContextChanged(): void\tClass ProxyViewContainer", "_onContextChanged()"],
    ["isEnabledProperty: Property\tClass StackLayout", "Static isEnabledProperty"],
    ["_syncNativeProperties(): void\tClass TimePicker", "_syncNativeProperties()"],
    ["getMeasuredWidth(): number\tClass ActivityIndicator", "getMeasuredWidth()"],
    ["_onContextChanged(): void\tClass ActivityIndicator", "_onContextChanged()"],
    ["get(name: string): any\tClass ActivityIndicator", "get(${1:name: string})"],
    ["_getNativeViewsCount(): number\tClass ActionBar", "_getNativeViewsCount()"],
    ["_syncNativeProperties(): void\tClass ActionBar", "_syncNativeProperties()"],
    ["propertyChangeEvent: string\tClass TextBase", "Static propertyChangeEvent"],
    ["LemonChiffon: any\tModule color/known-colors", "LemonChiffon"],
    ["classNameProperty: Property\tClass DatePicker", "Static classNameProperty"],
    ["getLocationInWindow(): Point\tClass SegmentedBar", "getLocationInWindow()"],
    ["getLocationOnScreen(): Point\tClass SegmentedBar", "getLocationOnScreen()"],
    ["_removeFromSuperview(): any\tClass SegmentedBar", "_removeFromSuperview()"],
    ["isEnabledProperty: Property\tClass DatePicker", "Static isEnabledProperty"],
    ["_removeView(view: View): any\tClass Image", "_removeView(${1:view: View})"],
    ["addChild(view: View): void\tClass GridLayout", "addChild(${1:view: View})"],
    ["cssClassProperty: Property\tClass SegmentedBar", "Static cssClassProperty"],
    ["_isInheritedChange(): boolean\tClass SegmentedBar", "_isInheritedChange()"],
    ["cssPseudoClasses: Set<string>\tClass EditableTextBase", "cssPseudoClasses"],
    ["addChild(view: View): void\tClass LayoutBase", "addChild(${1:view: View})"],
    ["_getNativeViewsCount(): number\tClass TextField", "_getNativeViewsCount()"],
    ["LightSkyBlue: any\tModule color/known-colors", "LightSkyBlue"],
    ["_syncNativeProperties(): void\tClass TextField", "_syncNativeProperties()"],
    ["isUserInteractionEnabled: boolean\tClass Page", "isUserInteractionEnabled"],
    ["MediumOrchid: any\tModule color/known-colors", "MediumOrchid"],
    ["MediumPurple: any\tModule color/known-colors", "MediumPurple"],
    ["isEnabledProperty: Property\tClass LayoutBase", "Static isEnabledProperty"],
    ["classNameProperty: Property\tClass LayoutBase", "Static classNameProperty"],
    ["autocapitalizationType: string\tClass TextField", "autocapitalizationType"],
    ["MidnightBlue: any\tModule color/known-colors", "MidnightBlue"],
    ["bindingContext: any\tInterface NavigationEntry", "Optional bindingContext"],
    ["clearHistory: boolean\tInterface NavigationEntry", "Optional clearHistory"],
    ["propertyChangeEvent: string\tClass Bindable", "Static propertyChangeEvent"],
    ["saveToGallery: boolean\tInterface CameraOptions", "Optional saveToGallery"],
    ["comb: + | ~ | > |  \tInterface UniversalSelector", "Optional comb"],
    ["_getNativeViewsCount(): number\tClass SearchBar", "_getNativeViewsCount()"],
    ["_syncNativeProperties(): void\tClass SearchBar", "_syncNativeProperties()"],
    ["propertyChangeEvent: string\tClass TextView", "Static propertyChangeEvent"],
    ["isEnabledProperty: Property\tClass ListPicker", "Static isEnabledProperty"],
    ["classNameProperty: Property\tClass ListPicker", "Static classNameProperty"],
    ["propertyChangeEvent: string\tClass HtmlView", "Static propertyChangeEvent"],
    ["onValueChanged: PropertyChangedCallback\tClass Property", "onValueChanged"],
    ["onValueChanged: PropertyChangedCallback\tClass Property", "onValueChanged"],
    ["isEnabledProperty: Property\tClass DockLayout", "Static isEnabledProperty"],
    ["classNameProperty: Property\tClass DockLayout", "Static classNameProperty"],
    ["instance: Transition\tInterface NavigationTransition", "Optional instance"],
    ["comb: + | ~ | > |  \tInterface AttributeSelector", "Optional comb"],
    ["notify<T>(data: T): void\tClass AbsoluteLayout", "notify<T>(${1:data: T})"],
    ["addChild(view: View): void\tClass DockLayout", "addChild(${1:view: View})"],
    ["cssPseudoClasses: Set<string>\tClass CustomLayoutView", "cssPseudoClasses"],
    ["isEnabledProperty: Property\tClass ScrollView", "Static isEnabledProperty"],
    ["classNameProperty: Property\tClass ScrollView", "Static classNameProperty"],
    ["getDock(view: View): string\tClass DockLayout", "getDock(${1:view: View})"],
    ["propertyChangeEvent: string\tClass Progress", "Static propertyChangeEvent"],
    ["onValueChanged: PropertyChangedCallback\tClass Property", "onValueChanged"],
    ["isEnabledProperty: Property\tClass WrapLayout", "Static isEnabledProperty"],
    ["isEnabledProperty: Property\tClass GridLayout", "Static isEnabledProperty"],
    ["classNameProperty: Property\tClass TimePicker", "Static classNameProperty"],
    ["isEnabledProperty: Property\tClass TimePicker", "Static isEnabledProperty"],
    ["isUserInteractionEnabled: boolean\tClass View", "isUserInteractionEnabled"],
    ["_unregisterAllAnimations(): any\tClass View", "_unregisterAllAnimations()"],
    ["itemWidthProperty: Property\tClass WrapLayout", "Static itemWidthProperty"],
    ["propertyChangeEvent: string\tClass ListView", "Static propertyChangeEvent"],
    ["addChild(view: View): void\tClass WrapLayout", "addChild(${1:view: View})"],
    ["_removeView(view: View): any\tClass Label", "_removeView(${1:view: View})"],
    ["additionalSelectors: RuleSet[]\tModule application", "additionalSelectors"],
    ["_unregisterAllAnimations(): any\tClass Page", "_unregisterAllAnimations()"],
    ["classNameProperty: Property\tClass WrapLayout", "Static classNameProperty"],
    ["DarkSeaGreen: any\tModule color/known-colors", "DarkSeaGreen"],
    ["parse(cssValue: string): Font\tClass Font", "parse(${1:cssValue: string})"],
    ["_removeView(view: View): any\tClass Frame", "_removeView(${1:view: View})"],
    ["classNameProperty: Property\tClass GridLayout", "Static classNameProperty"],
    ["propertyChangeEvent: string\tClass Repeater", "Static propertyChangeEvent"],
    ["AntiqueWhite: any\tModule color/known-colors", "AntiqueWhite"],
    ["_getNativeViewsCount(): number\tClass ListView", "_getNativeViewsCount()"],
    ["getLocationOnScreen(): Point\tClass StackLayout", "getLocationOnScreen()"],
    ["autocapitalizationType: string\tClass TextView", "autocapitalizationType"],
    ["cssClassProperty: Property\tClass Placeholder", "Static cssClassProperty"],
    ["exists(path: string): boolean\tClass Folder", "exists(${1:path: string})"],
    ["getLocationInWindow(): Point\tClass StackLayout", "getLocationInWindow()"],
    ["_isInheritedChange(): boolean\tClass StackLayout", "_isInheritedChange()"],
    ["_getNativeViewsCount(): number\tClass TextBase", "_getNativeViewsCount()"],
    ["getPathSeparator(): string\tClass FileSystemAccess", "getPathSeparator()"],
    ["isEnabledProperty: Property\tClass SearchBar", "Static isEnabledProperty"],
    ["_syncNativeProperties(): void\tClass HtmlView", "_syncNativeProperties()"],
    ["_getNativeViewsCount(): number\tClass HtmlView", "_getNativeViewsCount()"],
    ["verticalAlignment: string\tClass ProxyViewContainer", "verticalAlignment"],
    ["_removeView(view: View): any\tClass View", "_removeView(${1:view: View})"],
    ["_syncNativeProperties(): void\tClass ListView", "_syncNativeProperties()"],
    ["creatingViewEvent: string\tClass Placeholder", "Static creatingViewEvent"],
    ["_onContextChanged(): void\tClass CustomLayoutView", "_onContextChanged()"],
    ["horizontalAlignment: string\tClass AbsoluteLayout", "horizontalAlignment"],
    ["get(name: string): any\tClass NavigationButton", "get(${1:name: string})"],
    ["cancel: boolean\tInterface AndroidActivityBackPressedEventData", "cancel"],
    ["classNameProperty: Property\tClass ActionBar", "Static classNameProperty"],
    ["get(name: string): any\tClass CustomLayoutView", "get(${1:name: string})"],
    ["getMeasuredWidth(): number\tClass CustomLayoutView", "getMeasuredWidth()"],
    ["_removeFromSuperview(): any\tClass StackLayout", "_removeFromSuperview()"],
    ["getMeasuredHeight(): number\tClass AbsoluteLayout", "getMeasuredHeight()"],
    ["isEnabledProperty: Property\tClass ActionBar", "Static isEnabledProperty"],
    ["propertyChangeEvent: string\tClass TabView", "Static propertyChangeEvent"],
    ["iterations: number\tInterface AnimationDefinition", "Optional iterations"],
    ["getLocationInWindow(): Point\tClass Placeholder", "getLocationInWindow()"],
    ["_getNativeViewsCount(): number\tClass Repeater", "_getNativeViewsCount()"],
    ["propertyChangeEvent: string\tClass WebView", "Static propertyChangeEvent"],
    ["isEnabledProperty: Property\tClass TextField", "Static isEnabledProperty"],
    ["get(name: string): any\tClass SegmentedBarItem", "get(${1:name: string})"],
    ["classNameProperty: Property\tClass TextField", "Static classNameProperty"],
    ["_syncNativeProperties(): void\tClass Progress", "_syncNativeProperties()"],
    ["_syncNativeProperties(): void\tClass TextBase", "_syncNativeProperties()"],
    ["match(node: Node): boolean\tClass SelectorCore", "match(${1:node: Node})"],
    ["getLocationOnScreen(): Point\tClass ContentView", "getLocationOnScreen()"],
    ["_removeFromSuperview(): any\tClass Placeholder", "_removeFromSuperview()"],
    ["get(name: string): any\tInterface AndroidFrame", "get(${1:name: string})"],
    ["eventName: string\tInterface AndroidActivityBundleEventData", "eventName"],
    ["cssClassProperty: Property\tClass ContentView", "Static cssClassProperty"],
    ["getLocationInWindow(): Point\tClass ContentView", "getLocationInWindow()"],
    ["_removeFromSuperview(): any\tClass ContentView", "_removeFromSuperview()"],
    ["_isInheritedChange(): boolean\tClass ContentView", "_isInheritedChange()"],
    ["_getNativeViewsCount(): number\tClass TextView", "_getNativeViewsCount()"],
    ["parse(xml: string): void\tClass EasySAXParser", "parse(${1:xml: string})"],
    ["_onContextChanged(): void\tClass EditableTextBase", "_onContextChanged()"],
    ["cssClassProperty: Property\tClass StackLayout", "Static cssClassProperty"],
    ["classNameProperty: Property\tClass SearchBar", "Static classNameProperty"],
    ["activity: any\tInterface AndroidActivityBackPressedEventData", "activity"],
    ["imageSourceProperty: Property\tClass Image", "Static imageSourceProperty"],
    ["getLocationOnScreen(): Point\tClass Placeholder", "getLocationOnScreen()"],
    ["keyframes: Array<KeyframeInfo>\tClass KeyframeAnimationInfo", "keyframes"],
    ["_isInheritedChange(): boolean\tClass Placeholder", "_isInheritedChange()"],
    ["get(name: string): any\tClass EditableTextBase", "get(${1:name: string})"],
    ["_removeView(view: View): any\tClass Page", "_removeView(${1:view: View})"],
    ["getMeasuredWidth(): number\tClass EditableTextBase", "getMeasuredWidth()"],
    ["_syncNativeProperties(): void\tClass TextView", "_syncNativeProperties()"],
    ["eventName: string\tInterface AndroidActivityResultEventData", "eventName"],
    ["_getNativeViewsCount(): number\tClass Progress", "_getNativeViewsCount()"],
    ["_syncNativeProperties(): void\tClass Repeater", "_syncNativeProperties()"],
    ["formattedText: FormattedString\tClass EditableTextBase", "formattedText"],
    ["_removeFromSuperview(): any\tClass ListPicker", "_removeFromSuperview()"],
    ["_isInheritedChange(): boolean\tClass ListPicker", "_isInheritedChange()"],
    ["foregroundActivity: any\tClass AndroidApplication", "foregroundActivity"],
    ["cssClassProperty: Property\tClass ListPicker", "Static cssClassProperty"],
    ["getLocationOnScreen(): Point\tClass GridLayout", "getLocationOnScreen()"],
    ["lastKnownLocation: Location\tClass LocationManager", "lastKnownLocation"],
    ["NavajoWhite: any\tModule color/known-colors", "NavajoWhite"],
    ["SaddleBrown: any\tModule color/known-colors", "SaddleBrown"],
    ["SpringGreen: any\tModule color/known-colors", "SpringGreen"],
    ["direction: SwipeDirection\tInterface SwipeGestureEventData", "direction"],
    ["pseudoClasses: Set<string>\tInterface Changes", "Optional pseudoClasses"],
    ["LightYellow: any\tModule color/known-colors", "LightYellow"],
    ["ForestGreen: any\tModule color/known-colors", "ForestGreen"],
    ["GreenYellow: any\tModule color/known-colors", "GreenYellow"],
    ["LightSalmon: any\tModule color/known-colors", "LightSalmon"],
    ["DarkMagenta: any\tModule color/known-colors", "DarkMagenta"],
    ["DeepSkyBlue: any\tModule color/known-colors", "DeepSkyBlue"],
    ["YellowGreen: any\tModule color/known-colors", "YellowGreen"],
    ["eventName: string\tInterface SelectedIndexChangedEventData", "eventName"],
    ["FloralWhite: any\tModule color/known-colors", "FloralWhite"],
    ["okButtonText: string\tInterface ConfirmOptions", "Optional okButtonText"],
    ["cancelable: boolean\tInterface CancelableOptions", "Optional cancelable"],
    ["getRow(view: View): number\tClass GridLayout", "getRow(${1:view: View})"],
    ["cssPseudoClasses: Set<string>\tClass AbsoluteLayout", "cssPseudoClasses"],
    ["getLocationInWindow(): Point\tClass GridLayout", "getLocationInWindow()"],
    ["android: any\tInterface OrientationChangedEventData", "Optional android"],
    ["_removeFromSuperview(): any\tClass GridLayout", "_removeFromSuperview()"],
    ["notify<T>(data: T): void\tClass SegmentedBar", "notify<T>(${1:data: T})"],
    ["_isInheritedChange(): boolean\tClass GridLayout", "_isInheritedChange()"],
    ["cssClassProperty: Property\tClass GridLayout", "Static cssClassProperty"],
    ["get(name: string): any\tClass VirtualArray<T>", "get(${1:name: string})"],
    ["getLocationOnScreen(): Point\tClass ScrollView", "getLocationOnScreen()"],
    ["isEnabledProperty: Property\tClass TextBase", "Static isEnabledProperty"],
    ["_isInheritedChange(): boolean\tClass LayoutBase", "_isInheritedChange()"],
    ["_removeFromSuperview(): any\tClass LayoutBase", "_removeFromSuperview()"],
    ["cssClassProperty: Property\tClass LayoutBase", "Static cssClassProperty"],
    ["equals(value: Color): boolean\tClass Color", "equals(${1:value: Color})"],
    ["propertyChangeEvent: string\tClass Button", "Static propertyChangeEvent"],
    ["propertyChangeEvent: string\tClass Switch", "Static propertyChangeEvent"],
    ["fromPath(path: string): File\tClass File", "fromPath(${1:path: string})"],
    ["getLocationInWindow(): Point\tClass LayoutBase", "getLocationInWindow()"],
    ["getLocationOnScreen(): Point\tClass LayoutBase", "getLocationOnScreen()"],
    ["getLocationInWindow(): Point\tClass DatePicker", "getLocationInWindow()"],
    ["getLocationOnScreen(): Point\tClass DatePicker", "getLocationOnScreen()"],
    ["propertyChangeEvent: string\tClass Layout", "Static propertyChangeEvent"],
    ["_removeFromSuperview(): any\tClass DatePicker", "_removeFromSuperview()"],
    ["_isInheritedChange(): boolean\tClass DatePicker", "_isInheritedChange()"],
    ["isEnabledProperty: Property\tClass Progress", "Static isEnabledProperty"],
    ["getLocationInWindow(): Point\tClass ListPicker", "getLocationInWindow()"],
    ["cssClassProperty: Property\tClass DatePicker", "Static cssClassProperty"],
    ["propertyChangeEvent: string\tClass Slider", "Static propertyChangeEvent"],
    ["getLocationOnScreen(): Point\tClass TimePicker", "getLocationOnScreen()"],
    ["loadMoreItemsEvent: string\tClass ListView", "Static loadMoreItemsEvent"],
    ["isEnabledProperty: Property\tClass ListView", "Static isEnabledProperty"],
    ["rowHeightProperty: Property\tClass ListView", "Static rowHeightProperty"],
    ["classNameProperty: Property\tClass Repeater", "Static classNameProperty"],
    ["_syncNativeProperties(): void\tClass TabView", "_syncNativeProperties()"],
    ["_getNativeViewsCount(): number\tClass TabView", "_getNativeViewsCount()"],
    ["isEnabledProperty: Property\tClass Repeater", "Static isEnabledProperty"],
    ["classNameProperty: Property\tClass ListView", "Static classNameProperty"],
    ["getLocationOnScreen(): Point\tClass WrapLayout", "getLocationOnScreen()"],
    ["_isInheritedChange(): boolean\tClass TimePicker", "_isInheritedChange()"],
    ["_removeFromSuperview(): any\tClass TimePicker", "_removeFromSuperview()"],
    ["getLocationInWindow(): Point\tClass TimePicker", "getLocationInWindow()"],
    ["cssClassProperty: Property\tClass TimePicker", "Static cssClassProperty"],
    ["cssClassProperty: Property\tClass WrapLayout", "Static cssClassProperty"],
    ["getLocationInWindow(): Point\tClass WrapLayout", "getLocationInWindow()"],
    ["_removeFromSuperview(): any\tClass WrapLayout", "_removeFromSuperview()"],
    ["_isInheritedChange(): boolean\tClass WrapLayout", "_isInheritedChange()"],
    ["classNameProperty: Property\tClass Progress", "Static classNameProperty"],
    ["_isInheritedChange(): boolean\tClass ScrollView", "_isInheritedChange()"],
    ["classNameProperty: Property\tClass HtmlView", "Static classNameProperty"],
    ["isEnabledProperty: Property\tClass TextView", "Static isEnabledProperty"],
    ["getLocationInWindow(): Point\tClass ScrollView", "getLocationInWindow()"],
    ["type:  | * | # | . | : | []\tInterface SimpleIdentifierSelector", "type"],
    ["isLayoutRequired: boolean\tClass ProxyViewContainer", "isLayoutRequired"],
    ["verticalAlignment: string\tClass ActivityIndicator", "verticalAlignment"],
    ["navigationButton: NavigationButton\tClass ActionBar", "navigationButton"],
    ["getFile(name: string): File\tClass Folder", "getFile(${1:name: string})"],
    ["eventName: string\tInterface SelectedIndexChangedEventData", "eventName"],
    ["_getNativeViewsCount(): number\tClass WebView", "_getNativeViewsCount()"],
    ["getConnectionType(): number\tModule connectivity", "getConnectionType()"],
    ["_syncNativeProperties(): void\tClass WebView", "_syncNativeProperties()"],
    ["_removeFromSuperview(): any\tClass ScrollView", "_removeFromSuperview()"],
    ["getLocationOnScreen(): Point\tClass ListPicker", "getLocationOnScreen()"],
    ["cssClassProperty: Property\tClass ScrollView", "Static cssClassProperty"],
    ["unloadedEvent: string\tClass ProxyViewContainer", "Static unloadedEvent"],
    ["propertyChangeEvent: string\tClass Border", "Static propertyChangeEvent"],
    ["classNameProperty: Property\tClass TextBase", "Static classNameProperty"],
    ["isEnabledProperty: Property\tClass HtmlView", "Static isEnabledProperty"],
    ["cssClassProperty: Property\tClass DockLayout", "Static cssClassProperty"],
    ["_isInheritedChange(): boolean\tClass DockLayout", "_isInheritedChange()"],
    ["classNameProperty: Property\tClass TextView", "Static classNameProperty"],
    ["get(name: string): any\tClass FormattedString", "get(${1:name: string})"],
    ["getLocationOnScreen(): Point\tClass DockLayout", "getLocationOnScreen()"],
    ["getLocationInWindow(): Point\tClass DockLayout", "getLocationInWindow()"],
    ["_removeFromSuperview(): any\tClass DockLayout", "_removeFromSuperview()"],
    ["toLocaleString(): string\tClass ObservableArray<T>", "toLocaleString()"],
    ["init: function(nativeApp: any): void\tClass AndroidApplication", "init"],
    ["isEnabledProperty: Property\tClass TabView", "Static isEnabledProperty"],
    ["isBackNavigation: boolean\tInterface NavigatedData", "isBackNavigation"],
    ["isLayoutRequired: boolean\tClass ActivityIndicator", "isLayoutRequired"],
    ["busyProperty: Property\tClass ActivityIndicator", "Static busyProperty"],
    ["unloadedEvent: string\tClass ActivityIndicator", "Static unloadedEvent"],
    ["classNameProperty: Property\tClass TabView", "Static classNameProperty"],
    ["propertyChangeEvent: string\tClass Cache", "Static propertyChangeEvent"],
    ["notify<T>(data: T): void\tClass TabViewItem", "notify<T>(${1:data: T})"],
    ["desiredAccuracy: number\tInterface Options", "Optional desiredAccuracy"],
    ["unwrap(value: any): any\tClass WrappedValue", "unwrap(${1:value: any})"],
    ["cssClassProperty: Property\tClass TextField", "Static cssClassProperty"],
    ["editableProperty: Property\tClass TextField", "Static editableProperty"],
    ["verticalAlignment: string\tClass CustomLayoutView", "verticalAlignment"],
    ["okButtonText: string\tInterface PromptOptions", "Optional okButtonText"],
    ["propertyChangeEvent: string\tClass Style", "Static propertyChangeEvent"],
    ["propertyChangeEvent: string\tClass Image", "Static propertyChangeEvent"],
    ["notify<T>(data: T): void\tClass ProxyObject", "notify<T>(${1:data: T})"],
    ["exists(path: string): boolean\tClass File", "exists(${1:path: string})"],
    ["_isInheritedChange(): boolean\tClass TextField", "_isInheritedChange()"],
    ["create: function(): Page\tInterface NavigationEntry", "Optional create"],
    ["_getNativeViewsCount(): number\tClass Slider", "_getNativeViewsCount()"],
    ["_syncNativeProperties(): void\tClass Slider", "_syncNativeProperties()"],
    ["propertyChangeEvent: string\tClass Style", "Static propertyChangeEvent"],
    ["comb: + | ~ | > |  \tInterface SimpleSelector", "Optional comb"],
    ["_removeFromSuperview(): any\tClass TextField", "_removeFromSuperview()"],
    ["getLocationInWindow(): Point\tClass TextField", "getLocationInWindow()"],
    ["getLocationOnScreen(): Point\tClass TextField", "getLocationOnScreen()"],
    ["getLocationOnScreen(): Point\tClass ActionBar", "getLocationOnScreen()"],
    ["dismissSoftInput(): void\tClass EditableTextBase", "dismissSoftInput()"],
    ["_getNativeViewsCount(): number\tClass Button", "_getNativeViewsCount()"],
    ["getLocationInWindow(): Point\tClass ActionBar", "getLocationInWindow()"],
    ["_removeFromSuperview(): any\tClass SearchBar", "_removeFromSuperview()"],
    ["getLocationOnScreen(): Point\tClass SearchBar", "getLocationOnScreen()"],
    ["getLocationInWindow(): Point\tClass SearchBar", "getLocationInWindow()"],
    ["_syncNativeProperties(): void\tClass Button", "_syncNativeProperties()"],
    ["cssClassProperty: Property\tClass SearchBar", "Static cssClassProperty"],
    ["getMeasuredWidth(): number\tClass AbsoluteLayout", "getMeasuredWidth()"],
    ["getChildrenCount(): number\tClass AbsoluteLayout", "getChildrenCount()"],
    ["notify<T>(data: T): void\tClass ContentView", "notify<T>(${1:data: T})"],
    ["_onContextChanged(): void\tClass AbsoluteLayout", "_onContextChanged()"],
    ["get(name: string): any\tClass AbsoluteLayout", "get(${1:name: string})"],
    ["_getNativeViewsCount(): number\tClass Border", "_getNativeViewsCount()"],
    ["_syncNativeProperties(): void\tClass Border", "_syncNativeProperties()"],
    ["propertyChangeEvent: string\tClass Frame", "Static propertyChangeEvent"],
    ["_getNativeViewsCount(): number\tClass Switch", "_getNativeViewsCount()"],
    ["_isInheritedChange(): boolean\tClass ActionBar", "_isInheritedChange()"],
    ["_removeFromSuperview(): any\tClass ActionBar", "_removeFromSuperview()"],
    ["_syncNativeProperties(): void\tClass Switch", "_syncNativeProperties()"],
    ["cssClassProperty: Property\tClass ActionBar", "Static cssClassProperty"],
    ["isEnabledProperty: Property\tClass WebView", "Static isEnabledProperty"],
    ["propertyChangeEvent: string\tClass Label", "Static propertyChangeEvent"],
    ["verticalAlignment: string\tClass EditableTextBase", "verticalAlignment"],
    ["updateTextTrigger: string\tClass EditableTextBase", "updateTextTrigger"],
    ["classNameProperty: Property\tClass WebView", "Static classNameProperty"],
    ["notify<T>(data: T): void\tClass StackLayout", "notify<T>(${1:data: T})"],
    ["_isInheritedChange(): boolean\tClass SearchBar", "_isInheritedChange()"],
    ["getMeasuredHeight(): number\tClass SegmentedBar", "getMeasuredHeight()"],
    ["horizontalAlignment: string\tClass SegmentedBar", "horizontalAlignment"],
    ["_syncNativeProperties(): void\tClass Layout", "_syncNativeProperties()"],
    ["notify<T>(data: T): void\tClass Placeholder", "notify<T>(${1:data: T})"],
    ["_getNativeViewsCount(): number\tClass Layout", "_getNativeViewsCount()"],
    ["isEnabledProperty: Property\tClass Border", "Static isEnabledProperty"],
    ["_getNativeViewsCount(): number\tClass Label", "_getNativeViewsCount()"],
    ["_syncNativeProperties(): void\tClass Label", "_syncNativeProperties()"],
    ["getLocationOnScreen(): Point\tClass TextView", "getLocationOnScreen()"],
    ["getLocationInWindow(): Point\tClass TextView", "getLocationInWindow()"],
    ["cssClassProperty: Property\tClass TextBase", "Static cssClassProperty"],
    ["notify<T>(data: T): void\tClass TimePicker", "notify<T>(${1:data: T})"],
    ["systemIcon: string\tInterface AndroidActionItemSettings", "systemIcon"],
    ["newIndex: number\tInterface SelectedIndexChangedEventData", "newIndex"],
    ["_gestureObservers: any\tClass ProxyViewContainer", "_gestureObservers"],
    ["notify<T>(data: T): void\tClass WrapLayout", "notify<T>(${1:data: T})"],
    ["_removeFromSuperview(): any\tClass TextView", "_removeFromSuperview()"],
    ["_isInheritedChange(): boolean\tClass TextView", "_isInheritedChange()"],
    ["cssClassProperty: Property\tClass HtmlView", "Static cssClassProperty"],
    ["_isInheritedChange(): boolean\tClass HtmlView", "_isInheritedChange()"],
    ["_isInheritedChange(): boolean\tClass TextBase", "_isInheritedChange()"],
    ["classNameProperty: Property\tClass Border", "Static classNameProperty"],
    ["notify<T>(data: T): void\tClass DockLayout", "notify<T>(${1:data: T})"],
    ["cssClassProperty: Property\tClass TextView", "Static cssClassProperty"],
    ["object: Observable\tInterface SelectedIndexChangedEventData", "object"],
    ["okButtonText: string\tInterface AlertOptions", "Optional okButtonText"],
    ["textProperty: Property\tClass NavigationButton", "Static textProperty"],
    ["editableProperty: Property\tClass TextView", "Static editableProperty"],
    ["cssClassProperty: Property\tClass ListView", "Static cssClassProperty"],
    ["iconProperty: Property\tClass NavigationButton", "Static iconProperty"],
    ["_syncNativeProperties(): void\tClass Frame", "_syncNativeProperties()"],
    ["isEnabledProperty: Property\tClass Switch", "Static isEnabledProperty"],
    ["cssPseudoClasses: Set<string>\tClass SegmentedBar", "cssPseudoClasses"],
    ["classNameProperty: Property\tClass Switch", "Static classNameProperty"],
    ["_getNativeViewsCount(): number\tClass Frame", "_getNativeViewsCount()"],
    ["comb: + | ~ | > |  \tInterface ClassSelector", "Optional comb"],
    ["isLayoutRequired: boolean\tClass EditableTextBase", "isLayoutRequired"],
    ["horizontalAlignment: string\tClass StackLayout", "horizontalAlignment"],
    ["notify<T>(data: T): void\tClass ListPicker", "notify<T>(${1:data: T})"],
    ["_updateTextDecoration(): void\tClass Style", "_updateTextDecoration()"],
    ["_syncNativeProperties(): void\tClass Style", "_syncNativeProperties()"],
    ["notify<T>(data: T): void\tClass Observable", "notify<T>(${1:data: T})"],
    ["isValid(value: any): boolean\tClass Color", "isValid(${1:value: any})"],
    ["_isInheritedChange(): boolean\tClass ListView", "_isInheritedChange()"],
    ["getMeasuredHeight(): number\tClass StackLayout", "getMeasuredHeight()"],
    ["newIndex: number\tInterface SelectedIndexChangedEventData", "newIndex"],
    ["oldIndex: number\tInterface SelectedIndexChangedEventData", "oldIndex"],
    ["object: Observable\tInterface SelectedIndexChangedEventData", "object"],
    ["_removeFromSuperview(): any\tClass ListView", "_removeFromSuperview()"],
    ["propertyChangeEvent: string\tClass View", "Static propertyChangeEvent"],
    ["okButtonText: string\tInterface LoginOptions", "Optional okButtonText"],
    ["oldIndex: number\tInterface SelectedIndexChangedEventData", "oldIndex"],
    ["propertyChangeEvent: string\tClass Span", "Static propertyChangeEvent"],
    ["getLocationInWindow(): Point\tClass ListView", "getLocationInWindow()"],
    ["getLocationOnScreen(): Point\tClass ListView", "getLocationOnScreen()"],
    ["_removeFromSuperview(): any\tClass HtmlView", "_removeFromSuperview()"],
    ["LightGreen: any\tModule color/known-colors", "LightGreen"],
    ["cssClassProperty: Property\tClass Progress", "Static cssClassProperty"],
    ["isLayoutRequired: boolean\tClass CustomLayoutView", "isLayoutRequired"],
    ["Aquamarine: any\tModule color/known-colors", "Aquamarine"],
    ["BlueViolet: any\tModule color/known-colors", "BlueViolet"],
    ["maxValueProperty: Property\tClass Progress", "Static maxValueProperty"],
    ["_isInheritedChange(): boolean\tClass Progress", "_isInheritedChange()"],
    ["navigatingFromEvent: string\tClass Page", "Static navigatingFromEvent"],
    ["getLocationOnScreen(): Point\tClass Progress", "getLocationOnScreen()"],
    ["getLocationInWindow(): Point\tClass Progress", "getLocationInWindow()"],
    ["notify<T>(data: T): void\tClass LayoutBase", "notify<T>(${1:data: T})"],
    ["_removeFromSuperview(): any\tClass Progress", "_removeFromSuperview()"],
    ["Chartreuse: any\tModule color/known-colors", "Chartreuse"],
    ["duration: number\tInterface NavigationTransition", "Optional duration"],
    ["DarkViolet: any\tModule color/known-colors", "DarkViolet"],
    ["_getNativeViewsCount(): number\tClass Image", "_getNativeViewsCount()"],
    ["DodgerBlue: any\tModule color/known-colors", "DodgerBlue"],
    ["LightCoral: any\tModule color/known-colors", "LightCoral"],
    ["GhostWhite: any\tModule color/known-colors", "GhostWhite"],
    ["notify<T>(data: T): void\tClass DatePicker", "notify<T>(${1:data: T})"],
    ["MediumBlue: any\tModule color/known-colors", "MediumBlue"],
    ["DarkOrange: any\tModule color/known-colors", "DarkOrange"],
    ["DarkOrchid: any\tModule color/known-colors", "DarkOrchid"],
    ["DarkSalmon: any\tModule color/known-colors", "DarkSalmon"],
    ["_syncNativeProperties(): void\tClass Image", "_syncNativeProperties()"],
    ["unloadedEvent: string\tClass CustomLayoutView", "Static unloadedEvent"],
    ["notify<T>(data: T): void\tClass ScrollView", "notify<T>(${1:data: T})"],
    ["notify<T>(data: T): void\tClass ActionItem", "notify<T>(${1:data: T})"],
    ["_syncNativeProperties(): void\tClass Style", "_syncNativeProperties()"],
    ["classNameProperty: Property\tClass Button", "Static classNameProperty"],
    ["isEnabledProperty: Property\tClass Button", "Static isEnabledProperty"],
    ["_removeFromSuperview(): any\tClass TextBase", "_removeFromSuperview()"],
    ["addChild(view: View): void\tClass Layout", "addChild(${1:view: View})"],
    ["_updateTextDecoration(): void\tClass Style", "_updateTextDecoration()"],
    ["getLocationOnScreen(): Point\tClass HtmlView", "getLocationOnScreen()"],
    ["android: AndroidActionItemSettings\tClass NavigationButton", "android"],
    ["notify<T>(data: T): void\tClass GridLayout", "notify<T>(${1:data: T})"],
    ["rowSpanProperty: Property\tClass GridLayout", "Static rowSpanProperty"],
    ["classNameProperty: Property\tClass Slider", "Static classNameProperty"],
    ["isEnabledProperty: Property\tClass Slider", "Static isEnabledProperty"],
    ["eventName: string\tInterface OrientationChangedEventData", "eventName"],
    ["isEnabledProperty: Property\tClass Layout", "Static isEnabledProperty"],
    ["SandyBrown: any\tModule color/known-colors", "SandyBrown"],
    ["PowderBlue: any\tModule color/known-colors", "PowderBlue"],
    ["PapayaWhip: any\tModule color/known-colors", "PapayaWhip"],
    ["propertyChangeEvent: string\tClass Page", "Static propertyChangeEvent"],
    ["showingModallyEvent: string\tClass Page", "Static showingModallyEvent"],
    ["getMeasuredHeight(): number\tClass ContentView", "getMeasuredHeight()"],
    ["getLocationOnScreen(): Point\tClass TextBase", "getLocationOnScreen()"],
    ["classNameProperty: Property\tClass Layout", "Static classNameProperty"],
    ["WhiteSmoke: any\tModule color/known-colors", "WhiteSmoke"],
    ["Promise: PromiseConstructor\tClass AnimationPromise", "Static Promise"],
    ["getLocationInWindow(): Point\tClass TextBase", "getLocationInWindow()"],
    ["horizontalAlignment: string\tClass ContentView", "horizontalAlignment"],
    ["getLocationInWindow(): Point\tClass HtmlView", "getLocationInWindow()"],
    ["_removeFromSuperview(): any\tClass Repeater", "_removeFromSuperview()"],
    ["notify(data: any): void\tModule application", "notify(${1:data: any})"],
    ["_isInheritedChange(): boolean\tClass Repeater", "_isInheritedChange()"],
    ["getLocationOnScreen(): Point\tClass Repeater", "getLocationOnScreen()"],
    ["horizontalAlignment: string\tClass Placeholder", "horizontalAlignment"],
    ["getMeasuredHeight(): number\tClass Placeholder", "getMeasuredHeight()"],
    ["getLocationInWindow(): Point\tClass Repeater", "getLocationInWindow()"],
    ["cssClassProperty: Property\tClass Repeater", "Static cssClassProperty"],
    ["unloadedEvent: string\tClass EditableTextBase", "Static unloadedEvent"],
    ["textProperty: Property\tClass EditableTextBase", "Static textProperty"],
    ["_getNativeViewsCount(): number\tClass View", "_getNativeViewsCount()"],
    ["uncaughtErrorEvent: string\tModule application", "uncaughtErrorEvent"],
    ["comb: + | ~ | > |  \tInterface TypeSelector", "Optional comb"],
    ["_syncNativeProperties(): void\tClass View", "_syncNativeProperties()"],
    ["classNameProperty: Property\tClass Image", "Static classNameProperty"],
    ["backgroundImage: string\tClass ProxyViewContainer", "backgroundImage"],
    ["updateDistance: number\tInterface Options", "Optional updateDistance"],
    ["horizontalAlignment: string\tClass ScrollView", "horizontalAlignment"],
    ["horizontalAlignment: string\tClass ListPicker", "horizontalAlignment"],
    ["removeChildren(): void\tClass ProxyViewContainer", "removeChildren()"],
    ["classNameProperty: Property\tClass Frame", "Static classNameProperty"],
    ["isEnabledProperty: Property\tClass Frame", "Static isEnabledProperty"],
    ["getLocationInWindow(): Point\tClass TabView", "getLocationInWindow()"],
    ["getLocationOnScreen(): Point\tClass TabView", "getLocationOnScreen()"],
    ["getLocationOnScreen(): Point\tClass WebView", "getLocationOnScreen()"],
    ["getLocationInWindow(): Point\tClass WebView", "getLocationInWindow()"],
    ["_removeFromSuperview(): any\tClass TabView", "_removeFromSuperview()"],
    ["_isInheritedChange(): boolean\tClass TabView", "_isInheritedChange()"],
    ["cssClassProperty: Property\tClass WebView", "Static cssClassProperty"],
    ["isEnabledProperty: Property\tClass Image", "Static isEnabledProperty"],
    ["loadFinishedEvent: string\tClass WebView", "Static loadFinishedEvent"],
    ["cssClassProperty: Property\tClass TabView", "Static cssClassProperty"],
    ["_removeFromSuperview(): any\tClass WebView", "_removeFromSuperview()"],
    ["_isInheritedChange(): boolean\tClass WebView", "_isInheritedChange()"],
    ["getMeasuredHeight(): number\tClass DockLayout", "getMeasuredHeight()"],
    ["cssSelectorVersion: number\tModule application", "cssSelectorVersion"],
    ["isLoadingProperty: Property\tClass Image", "Static isLoadingProperty"],
    ["notify<T>(data: T): void\tClass SearchBar", "notify<T>(${1:data: T})"],
    ["_syncNativeProperties(): void\tClass Page", "_syncNativeProperties()"],
    ["cancelable: boolean\tInterface ConfirmOptions", "Optional cancelable"],
    ["defaultText: string\tInterface PromptOptions", "Optional defaultText"],
    ["object: any\tInterface AndroidActivityBackPressedEventData", "object"],
    ["duration: number\tInterface AnimationDefinition", "Optional duration"],
    ["returnPressEvent: string\tClass TextField", "Static returnPressEvent"],
    ["cssPseudoClasses: Set<string>\tClass ContentView", "cssPseudoClasses"],
    ["heightPercent: number\tInterface CommonLayoutParams", "heightPercent"],
    ["translate: Pair\tInterface AnimationDefinition", "Optional translate"],
    ["notify<T>(data: T): void\tClass TextField", "notify<T>(${1:data: T})"],
    ["horizontalAlignment: string\tClass GridLayout", "horizontalAlignment"],
    ["verticalAlignment: string\tClass AbsoluteLayout", "verticalAlignment"],
    ["_getNativeViewsCount(): number\tClass Page", "_getNativeViewsCount()"],
    ["horizontalAlignment: string\tClass LayoutBase", "horizontalAlignment"],
    ["isEnabledProperty: Property\tClass Label", "Static isEnabledProperty"],
    ["horizontalAlignment: string\tClass TimePicker", "horizontalAlignment"],
    ["getMeasuredHeight(): number\tClass DatePicker", "getMeasuredHeight()"],
    ["classNameProperty: Property\tClass Label", "Static classNameProperty"],
    ["moduleName: string\tInterface NavigationEntry", "Optional moduleName"],
    ["_gestureObservers: any\tClass ActivityIndicator", "_gestureObservers"],
    ["horizontalAlignment: string\tClass WrapLayout", "horizontalAlignment"],
    ["horizontalAlignment: string\tClass DatePicker", "horizontalAlignment"],
    ["getMeasuredHeight(): number\tClass ScrollView", "getMeasuredHeight()"],
    ["closeCallback: Function\tInterface ShownModallyData", "closeCallback"],
    ["getMeasuredHeight(): number\tClass GridLayout", "getMeasuredHeight()"],
    ["getMeasuredHeight(): number\tClass LayoutBase", "getMeasuredHeight()"],
    ["cssPseudoClasses: Set<string>\tClass Placeholder", "cssPseudoClasses"],
    ["getMeasuredHeight(): number\tClass TimePicker", "getMeasuredHeight()"],
    ["getMeasuredHeight(): number\tClass WrapLayout", "getMeasuredHeight()"],
    ["cssPseudoClasses: Set<string>\tClass StackLayout", "cssPseudoClasses"],
    ["notify<T>(data: T): void\tClass ActionBar", "notify<T>(${1:data: T})"],
    ["getMeasuredHeight(): number\tClass ListPicker", "getMeasuredHeight()"],
    ["getMeasuredWidth(): number\tClass SegmentedBar", "getMeasuredWidth()"],
    ["get(name: string): any\tClass SegmentedBar", "get(${1:name: string})"],
    ["_onContextChanged(): void\tClass SegmentedBar", "_onContextChanged()"],
    ["horizontalAlignment: string\tClass DockLayout", "horizontalAlignment"],
    ["get(name: string): any\tClass StackLayout", "get(${1:name: string})"],
    ["cssClassProperty: Property\tClass Border", "Static cssClassProperty"],
    ["notify<T>(data: T): void\tClass HtmlView", "notify<T>(${1:data: T})"],
    ["horizontalAlignment: string\tClass TextField", "horizontalAlignment"],
    ["registerHandlers(): any\tClass TextBaseStyler", "registerHandlers()"],
    ["cancelable: boolean\tInterface PromptOptions", "Optional cancelable"],
    ["OliveDrab: any\tModule color/known-colors", "OliveDrab"],
    ["cancelable: boolean\tInterface ActionOptions", "Optional cancelable"],
    ["cssPseudoClasses: Set<string>\tClass ScrollView", "cssPseudoClasses"],
    ["getLocationOnScreen(): Point\tClass Layout", "getLocationOnScreen()"],
    ["OrangeRed: any\tModule color/known-colors", "OrangeRed"],
    ["eventName: string\tInterface GestureEventDataWithState", "eventName"],
    ["getLocationInWindow(): Point\tClass Layout", "getLocationInWindow()"],
    ["cssPseudoClasses: Set<string>\tClass DatePicker", "cssPseudoClasses"],
    ["isLayoutRequired: boolean\tClass AbsoluteLayout", "isLayoutRequired"],
    ["classNameProperty: Property\tClass Page", "Static classNameProperty"],
    ["notify<T>(data: T): void\tClass Repeater", "notify<T>(${1:data: T})"],
    ["cssPseudoClasses: Set<string>\tClass WrapLayout", "cssPseudoClasses"],
    ["activity: any\tInterface AndroidActivityResultEventData", "activity"],
    ["MintCream: any\tModule color/known-colors", "MintCream"],
    ["MistyRose: any\tModule color/known-colors", "MistyRose"],
    ["textWrapProperty: Property\tClass Button", "Static textWrapProperty"],
    ["AliceBlue: any\tModule color/known-colors", "AliceBlue"],
    ["changeEvent: string\tClass ObservableArray<T>", "Static changeEvent"],
    ["get(name: string): any\tClass Placeholder", "get(${1:name: string})"],
    ["getMeasuredHeight(): number\tClass SearchBar", "getMeasuredHeight()"],
    ["_gestureObservers: any\tClass CustomLayoutView", "_gestureObservers"],
    ["expression: string\tInterface BindingOptions", "Optional expression"],
    ["horizontalAlignment: string\tClass ActionBar", "horizontalAlignment"],
    ["_isInheritedChange(): boolean\tClass Border", "_isInheritedChange()"],
    ["cssClassProperty: Property\tClass Switch", "Static cssClassProperty"],
    ["_updateTextTransform(): void\tClass Style", "_updateTextTransform()"],
    ["actions: Array<string>\tInterface ActionOptions", "Optional actions"],
    ["_removeFromSuperview(): any\tClass Border", "_removeFromSuperview()"],
    ["get(name: string): any\tClass TabViewItem", "get(${1:name: string})"],
    ["PaleGreen: any\tModule color/known-colors", "PaleGreen"],
    ["activity: any\tInterface AndroidActivityBundleEventData", "activity"],
    ["idProperty: Property\tClass ProxyViewContainer", "Static idProperty"],
    ["notify<T>(data: T): void\tClass ListView", "notify<T>(${1:data: T})"],
    ["isEnabledProperty: Property\tClass Page", "Static isEnabledProperty"],
    ["getLocationInWindow(): Point\tClass Slider", "getLocationInWindow()"],
    ["RosyBrown: any\tModule color/known-colors", "RosyBrown"],
    ["RoyalBlue: any\tModule color/known-colors", "RoyalBlue"],
    ["getLocationOnScreen(): Point\tClass Slider", "getLocationOnScreen()"],
    ["Turquoise: any\tModule color/known-colors", "Turquoise"],
    ["loadedEvent: string\tClass ProxyViewContainer", "Static loadedEvent"],
    ["get(name: string): any\tClass ProxyObject", "get(${1:name: string})"],
    ["notify<T>(data: T): void\tClass TextBase", "notify<T>(${1:data: T})"],
    ["SlateGray: any\tModule color/known-colors", "SlateGray"],
    ["SteelBlue: any\tModule color/known-colors", "SteelBlue"],
    ["attachComment: boolean\tInterface Options", "Optional attachComment"],
    ["_isInheritedChange(): boolean\tClass Slider", "_isInheritedChange()"],
    ["_removeFromSuperview(): any\tClass Slider", "_removeFromSuperview()"],
    ["minValueProperty: Property\tClass Slider", "Static minValueProperty"],
    ["maxValueProperty: Property\tClass Slider", "Static maxValueProperty"],
    ["_isInheritedChange(): boolean\tClass Layout", "_isInheritedChange()"],
    ["PeachPuff: any\tModule color/known-colors", "PeachPuff"],
    ["columnProperty: Property\tClass GridLayout", "Static columnProperty"],
    ["classNameProperty: Property\tClass View", "Static classNameProperty"],
    ["_removeFromSuperview(): any\tClass Layout", "_removeFromSuperview()"],
    ["isEnabledProperty: Property\tClass View", "Static isEnabledProperty"],
    ["BurlyWood: any\tModule color/known-colors", "BurlyWood"],
    ["navigatedFromEvent: string\tClass Page", "Static navigatedFromEvent"],
    ["type: rule | keyframes | declaration\tInterface Declaration", "type"],
    ["getChildrenCount(): number\tClass StackLayout", "getChildrenCount()"],
    ["minuteProperty: Property\tClass TimePicker", "Static minuteProperty"],
    ["cssPseudoClasses: Set<string>\tClass ListPicker", "cssPseudoClasses"],
    ["SlateBlue: any\tModule color/known-colors", "SlateBlue"],
    ["cssClassProperty: Property\tClass Layout", "Static cssClassProperty"],
    ["notify<T>(data: T): void\tClass Progress", "notify<T>(${1:data: T})"],
    ["_onContextChanged(): void\tClass StackLayout", "_onContextChanged()"],
    ["cssClassProperty: Property\tClass Slider", "Static cssClassProperty"],
    ["cssClassProperty: Property\tClass Button", "Static cssClassProperty"],
    ["getMeasuredWidth(): number\tClass StackLayout", "getMeasuredWidth()"],
    ["notify<T>(data: T): void\tClass TextView", "notify<T>(${1:data: T})"],
    ["get(name: string): any\tClass ContentView", "get(${1:name: string})"],
    ["getLocationInWindow(): Point\tClass Switch", "getLocationInWindow()"],
    ["getLocationOnScreen(): Point\tClass Border", "getLocationOnScreen()"],
    ["getFocusY(): number\tInterface PinchGestureEventData", "getFocusY()"],
    ["cssPseudoClasses: Set<string>\tClass TimePicker", "cssPseudoClasses"],
    ["LawnGreen: any\tModule color/known-colors", "LawnGreen"],
    ["getLocationInWindow(): Point\tClass Button", "getLocationInWindow()"],
    ["getMeasuredHeight(): number\tClass ActionBar", "getMeasuredHeight()"],
    ["_onContextChanged(): void\tClass Placeholder", "_onContextChanged()"],
    ["_removeFromSuperview(): any\tClass Switch", "_removeFromSuperview()"],
    ["getLocationInWindow(): Point\tClass Border", "getLocationInWindow()"],
    ["getLocationOnScreen(): Point\tClass Switch", "getLocationOnScreen()"],
    ["_onContextChanged(): void\tClass ContentView", "_onContextChanged()"],
    ["getMeasuredHeight(): number\tClass TextField", "getMeasuredHeight()"],
    ["GoldenRod: any\tModule color/known-colors", "GoldenRod"],
    ["cssPseudoClasses: Set<string>\tClass DockLayout", "cssPseudoClasses"],
    ["Gainsboro: any\tModule color/known-colors", "Gainsboro"],
    ["notify<T>(data: T): void\tClass Bindable", "notify<T>(${1:data: T})"],
    ["FireBrick: any\tModule color/known-colors", "FireBrick"],
    ["backgroundColor: Color\tClass ProxyViewContainer", "backgroundColor"],
    ["IndianRed: any\tModule color/known-colors", "IndianRed"],
    ["_gestureObservers: any\tClass EditableTextBase", "_gestureObservers"],
    ["unloadedEvent: string\tClass AbsoluteLayout", "Static unloadedEvent"],
    ["cssPseudoClasses: Set<string>\tClass LayoutBase", "cssPseudoClasses"],
    ["leftProperty: Property\tClass AbsoluteLayout", "Static leftProperty"],
    ["cssPseudoClasses: Set<string>\tClass GridLayout", "cssPseudoClasses"],
    ["getLocationOnScreen(): Point\tClass Button", "getLocationOnScreen()"],
    ["_updateTextTransform(): void\tClass Style", "_updateTextTransform()"],
    ["LimeGreen: any\tModule color/known-colors", "LimeGreen"],
    ["cancelable: boolean\tInterface DialogOptions", "Optional cancelable"],
    ["horizontalAlignment: string\tClass SearchBar", "horizontalAlignment"],
    ["LightPink: any\tModule color/known-colors", "LightPink"],
    ["getFocusX(): number\tInterface PinchGestureEventData", "getFocusX()"],
    ["_isInheritedChange(): boolean\tClass Switch", "_isInheritedChange()"],
    ["newValue: string\tInterface OrientationChangedEventData", "newValue"],
    ["DarkGreen: any\tModule color/known-colors", "DarkGreen"],
    ["Chocolate: any\tModule color/known-colors", "Chocolate"],
    ["backgroundImage: string\tClass ActivityIndicator", "backgroundImage"],
    ["DarkKhaki: any\tModule color/known-colors", "DarkKhaki"],
    ["itemsProperty: Property\tClass SegmentedBar", "Static itemsProperty"],
    ["getMeasuredWidth(): number\tClass Placeholder", "getMeasuredWidth()"],
    ["getMeasuredWidth(): number\tClass ContentView", "getMeasuredWidth()"],
    ["LightBlue: any\tModule color/known-colors", "LightBlue"],
    ["itemLoadingEvent: string\tClass ListView", "Static itemLoadingEvent"],
    ["_removeFromSuperview(): any\tClass Button", "_removeFromSuperview()"],
    ["LightGray: any\tModule color/known-colors", "LightGray"],
    ["CadetBlue: any\tModule color/known-colors", "CadetBlue"],
    ["_isInheritedChange(): boolean\tClass Button", "_isInheritedChange()"],
    ["LightCyan: any\tModule color/known-colors", "LightCyan"],
    ["get(name: string): any\tClass DatePicker", "get(${1:name: string})"],
    ["_onContextChanged(): void\tClass DatePicker", "_onContextChanged()"],
    ["idProperty: Property\tClass ActivityIndicator", "Static idProperty"],
    ["_updateLayout(): void\tClass ProxyViewContainer", "_updateLayout()"],
    ["remove(key: string): void\tClass Cache", "remove(${1:key: string})"],
    ["_removeFromSuperview(): any\tClass Image", "_removeFromSuperview()"],
    ["getActualSize(): Size\tClass ProxyViewContainer", "getActualSize()"],
    ["_setNativeMaxTime(): void\tClass TimePicker", "_setNativeMaxTime()"],
    ["getMeasuredWidth(): number\tClass WrapLayout", "getMeasuredWidth()"],
    ["cssClassProperty: Property\tClass Label", "Static cssClassProperty"],
    ["requestLayout(): void\tClass ProxyViewContainer", "requestLayout()"],
    ["getMeasuredWidth(): number\tClass TimePicker", "getMeasuredWidth()"],
    ["getMeasuredWidth(): number\tClass DatePicker", "getMeasuredWidth()"],
    ["_setNativeMinTime(): void\tClass TimePicker", "_setNativeMinTime()"],
    ["getChildrenCount(): number\tClass WrapLayout", "getChildrenCount()"],
    ["get(name: string): any\tClass TimePicker", "get(${1:name: string})"],
    ["comb: + | ~ | > |  \tInterface IdSelector", "Optional comb"],
    ["_onContextChanged(): void\tClass TimePicker", "_onContextChanged()"],
    ["StartElement: string\tClass ParserEventType", "Static StartElement"],
    ["horizontalAlignment: string\tClass TextView", "horizontalAlignment"],
    ["verticalAlignment: string\tClass SegmentedBar", "verticalAlignment"],
    ["getLocationOnScreen(): Point\tClass Image", "getLocationOnScreen()"],
    ["cssPseudoClasses: Set<string>\tClass ActionBar", "cssPseudoClasses"],
    ["getMeasuredHeight(): number\tClass TextView", "getMeasuredHeight()"],
    ["horizontalAlignment: string\tClass HtmlView", "horizontalAlignment"],
    ["cancelable: boolean\tInterface AlertOptions", "Optional cancelable"],
    ["getLayerType(): number\tInterface CacheLayerType", "getLayerType()"],
    ["backgroundImage: string\tClass EditableTextBase", "backgroundImage"],
    ["horizontalAlignment: string\tClass Progress", "horizontalAlignment"],
    ["_isInheritedChange(): boolean\tClass Image", "_isInheritedChange()"],
    ["backgroundImage: string\tClass CustomLayoutView", "backgroundImage"],
    ["_onContextChanged(): void\tClass WrapLayout", "_onContextChanged()"],
    ["_removeFromSuperview(): any\tClass Label", "_removeFromSuperview()"],
    ["_isInheritedChange(): boolean\tClass Label", "_isInheritedChange()"],
    ["textWrapProperty: Property\tClass Label", "Static textWrapProperty"],
    ["getMeasuredHeight(): number\tClass ListView", "getMeasuredHeight()"],
    ["get(name: string): any\tClass WrapLayout", "get(${1:name: string})"],
    ["getMeasuredHeight(): number\tClass Repeater", "getMeasuredHeight()"],
    ["cssClassProperty: Property\tClass Image", "Static cssClassProperty"],
    ["_childrenCount: number\tClass ProxyViewContainer", "_childrenCount"],
    ["getLocationInWindow(): Point\tClass Image", "getLocationInWindow()"],
    ["horizontalAlignment: string\tClass ListView", "horizontalAlignment"],
    ["automationText: string\tClass ProxyViewContainer", "automationText"],
    ["getLocationInWindow(): Point\tClass Label", "getLocationInWindow()"],
    ["getLocationOnScreen(): Point\tClass Label", "getLocationOnScreen()"],
    ["getMeasuredHeight(): number\tClass TextBase", "getMeasuredHeight()"],
    ["cancelable: boolean\tInterface LoginOptions", "Optional cancelable"],
    ["_removeFromSuperview(): any\tClass Frame", "_removeFromSuperview()"],
    ["notify<T>(data: T): void\tClass TabView", "notify<T>(${1:data: T})"],
    ["get(name: string): any\tClass ActionItem", "get(${1:name: string})"],
    ["getMeasuredHeight(): number\tClass HtmlView", "getMeasuredHeight()"],
    ["horizontalAlignment: string\tClass TextBase", "horizontalAlignment"],
    ["propertyName: string\tInterface PropertyChangeData", "propertyName"],
    ["getMeasuredWidth(): number\tClass ScrollView", "getMeasuredWidth()"],
    ["get(name: string): any\tClass ScrollView", "get(${1:name: string})"],
    ["cssClassProperty: Property\tClass Frame", "Static cssClassProperty"],
    ["opacity: number\tInterface AnimationDefinition", "Optional opacity"],
    ["get(name: string): any\tClass DockLayout", "get(${1:name: string})"],
    ["_isInheritedChange(): boolean\tClass Frame", "_isInheritedChange()"],
    ["get(name: string): any\tClass ListPicker", "get(${1:name: string})"],
    ["widthPercent: number\tInterface CommonLayoutParams", "widthPercent"],
    ["cssPseudoClasses: Set<string>\tClass TextField", "cssPseudoClasses"],
    ["eventName: string\tInterface RotationGestureEventData", "eventName"],
    ["targetProperty: string\tInterface BindingOptions", "targetProperty"],
    ["sourceProperty: string\tInterface BindingOptions", "sourceProperty"],
    ["notify<T>(data: T): void\tClass WebView", "notify<T>(${1:data: T})"],
    ["getMeasuredWidth(): number\tClass DockLayout", "getMeasuredWidth()"],
    ["cssPseudoClasses: Set<string>\tClass SearchBar", "cssPseudoClasses"],
    ["getMeasuredWidth(): number\tClass LayoutBase", "getMeasuredWidth()"],
    ["get(name: string): any\tClass Observable", "get(${1:name: string})"],
    ["getChildrenCount(): number\tClass DockLayout", "getChildrenCount()"],
    ["_onContextChanged(): void\tClass ListPicker", "_onContextChanged()"],
    ["horizontalAlignment: string\tClass Repeater", "horizontalAlignment"],
    ["getLocationOnScreen(): Point\tClass Frame", "getLocationOnScreen()"],
    ["getLocationInWindow(): Point\tClass Frame", "getLocationInWindow()"],
    ["bottomMargin: number\tInterface CommonLayoutParams", "bottomMargin"],
    ["get(name: string): any\tClass GridLayout", "get(${1:name: string})"],
    ["loadedEvent: string\tClass ActivityIndicator", "Static loadedEvent"],
    ["elementName: string\tInterface ParserEvent", "Optional elementName"],
    ["getChildrenCount(): number\tClass GridLayout", "getChildrenCount()"],
    ["_onContextChanged(): void\tClass ScrollView", "_onContextChanged()"],
    ["eventName: string\tInterface AndroidActivityEventData", "eventName"],
    ["getMeasuredWidth(): number\tClass GridLayout", "getMeasuredWidth()"],
    ["navigationTypes: string[]\tClass WebView", "Static navigationTypes"],
    ["backgroundColor: Color\tClass ActivityIndicator", "backgroundColor"],
    ["_onContextChanged(): void\tClass LayoutBase", "_onContextChanged()"],
    ["loadStartedEvent: string\tClass WebView", "Static loadStartedEvent"],
    ["_onContextChanged(): void\tClass GridLayout", "_onContextChanged()"],
    ["getChildrenCount(): number\tClass LayoutBase", "getChildrenCount()"],
    ["getMeasuredHeight(): number\tClass Progress", "getMeasuredHeight()"],
    ["get(name: string): any\tClass LayoutBase", "get(${1:name: string})"],
    ["getMeasuredWidth(): number\tClass ListPicker", "getMeasuredWidth()"],
    ["_onContextChanged(): void\tClass DockLayout", "_onContextChanged()"],
    ["idProperty: Property\tClass CustomLayoutView", "Static idProperty"],
    ["monthProperty: Property\tClass DatePicker", "Static monthProperty"],
    ["cssPseudoClasses: Set<string>\tClass HtmlView", "cssPseudoClasses"],
    ["getLocationOnScreen(): Point\tClass Page", "getLocationOnScreen()"],
    ["cssPseudoClasses: Set<string>\tClass Repeater", "cssPseudoClasses"],
    ["systemIcon: number\tInterface IOSActionItemSettings", "systemIcon"],
    ["cssPseudoClasses: Set<string>\tClass Progress", "cssPseudoClasses"],
    ["loadedEvent: string\tClass CustomLayoutView", "Static loadedEvent"],
    ["_onContextChanged(): void\tClass TextField", "_onContextChanged()"],
    ["getLocationInWindow(): Point\tClass Page", "getLocationInWindow()"],
    ["getMeasuredHeight(): number\tClass TabView", "getMeasuredHeight()"],
    ["getMeasuredWidth(): number\tClass SearchBar", "getMeasuredWidth()"],
    ["verticalAlignment: string\tClass ContentView", "verticalAlignment"],
    ["getMeasuredHeight(): number\tClass WebView", "getMeasuredHeight()"],
    ["Lavender: any\tModule color/known-colors", "Lavender"],
    ["unloadedEvent: string\tClass SegmentedBar", "Static unloadedEvent"],
    ["_onContextChanged(): void\tClass SearchBar", "_onContextChanged()"],
    ["_onContextChanged(): void\tClass ActionBar", "_onContextChanged()"],
    ["ensureSelectors(): boolean\tClass StyleScope", "ensureSelectors()"],
    ["getActualSize(): Size\tClass ActivityIndicator", "getActualSize()"],
    ["cssPseudoClasses: Set<string>\tClass ListView", "cssPseudoClasses"],
    ["topProperty: Property\tClass AbsoluteLayout", "Static topProperty"],
    ["DarkGray: any\tModule color/known-colors", "DarkGray"],
    ["_gestureObservers: any\tClass AbsoluteLayout", "_gestureObservers"],
    ["_updateLayout(): void\tClass ActivityIndicator", "_updateLayout()"],
    ["notify<T>(data: T): void\tClass Switch", "notify<T>(${1:data: T})"],
    ["get(name: string): any\tClass SearchBar", "get(${1:name: string})"],
    ["notify<T>(data: T): void\tClass Button", "notify<T>(${1:data: T})"],
    ["Cornsilk: any\tModule color/known-colors", "Cornsilk"],
    ["DarkCyan: any\tModule color/known-colors", "DarkCyan"],
    ["DarkBlue: any\tModule color/known-colors", "DarkBlue"],
    ["animated: boolean\tInterface NavigationEntry", "Optional animated"],
    ["isLayoutValid: boolean\tClass ProxyViewContainer", "isLayoutValid"],
    ["horizontalAlignment: string\tClass WebView", "horizontalAlignment"],
    ["_isInheritedChange(): boolean\tClass View", "_isInheritedChange()"],
    ["verticalAlignment: string\tClass Placeholder", "verticalAlignment"],
    ["type: rule | keyframes | declaration\tInterface Keyframes", "type"],
    ["backgroundColor: Color\tClass CustomLayoutView", "backgroundColor"],
    ["_childrenCount: number\tClass ActivityIndicator", "_childrenCount"],
    ["cssPseudoClasses: Set<string>\tClass TextBase", "cssPseudoClasses"],
    ["cssClassProperty: Property\tClass View", "Static cssClassProperty"],
    ["shownModallyEvent: string\tClass Page", "Static shownModallyEvent"],
    ["getMeasuredWidth(): number\tClass TextField", "getMeasuredWidth()"],
    ["timeout: number\tInterface HttpRequestOptions", "Optional timeout"],
    ["_removeFromSuperview(): any\tClass Page", "_removeFromSuperview()"],
    ["get(name: string): any\tClass TextField", "get(${1:name: string})"],
    ["notify<T>(data: T): void\tClass Slider", "notify<T>(${1:data: T})"],
    ["SeaShell: any\tModule color/known-colors", "SeaShell"],
    ["DeepPink: any\tModule color/known-colors", "DeepPink"],
    ["position: string\tInterface AndroidActionItemSettings", "position"],
    ["verticalAlignment: string\tClass StackLayout", "verticalAlignment"],
    ["SeaGreen: any\tModule color/known-colors", "SeaGreen"],
    ["cssClassProperty: Property\tClass Page", "Static cssClassProperty"],
    ["isLayoutRequired: boolean\tClass SegmentedBar", "isLayoutRequired"],
    ["getMeasuredWidth(): number\tClass ActionBar", "getMeasuredWidth()"],
    ["horizontalAlignment: string\tClass TabView", "horizontalAlignment"],
    ["automationText: string\tClass ActivityIndicator", "automationText"],
    ["navigatingToEvent: string\tClass Page", "Static navigatingToEvent"],
    ["android: AndroidLocationManager\tClass LocationManager", "android"],
    ["checkedProperty: Property\tClass Switch", "Static checkedProperty"],
    ["HoneyDew: any\tModule color/known-colors", "HoneyDew"],
    ["object: Observable\tInterface GestureEventDataWithState", "object"],
    ["idProperty: Property\tClass EditableTextBase", "Static idProperty"],
    ["navigationType: string\tInterface LoadEventData", "navigationType"],
    ["notify<T>(data: T): void\tClass Layout", "notify<T>(${1:data: T})"],
    ["Moccasin: any\tModule color/known-colors", "Moccasin"],
    ["requestLayout(): void\tClass ActivityIndicator", "requestLayout()"],
    ["itemsProperty: Property\tClass ListPicker", "Static itemsProperty"],
    ["_isInheritedChange(): boolean\tClass Page", "_isInheritedChange()"],
    ["desiredAccuracy: number\tClass LocationManager", "desiredAccuracy"],
    ["getLocationInWindow(): Point\tClass View", "getLocationInWindow()"],
    ["backgroundColor: Color\tClass EditableTextBase", "backgroundColor"],
    ["loadedEvent: string\tClass EditableTextBase", "Static loadedEvent"],
    ["attributes: Set<string>\tInterface Changes", "Optional attributes"],
    ["_removeFromSuperview(): any\tClass View", "_removeFromSuperview()"],
    ["get(name: string): any\tClass ActionBar", "get(${1:name: string})"],
    ["getLocationOnScreen(): Point\tClass View", "getLocationOnScreen()"],
    ["notify<T>(data: T): void\tClass Border", "notify<T>(${1:data: T})"],
    ["cssPseudoClasses: Set<string>\tClass TextView", "cssPseudoClasses"],
    ["backgroundColor: Color\tClass FormattedString", "backgroundColor"],
    ["verticalAlignment: string\tClass DatePicker", "verticalAlignment"],
    ["foregroundColor: Color\tClass FormattedString", "foregroundColor"],
    ["rightMargin: number\tInterface CommonLayoutParams", "rightMargin"],
    ["changeEvent: string\tClass VirtualArray<T>", "Static changeEvent"],
    ["isLayoutRequired: boolean\tClass ContentView", "isLayoutRequired"],
    ["get(name: string): any\tClass Bindable", "get(${1:name: string})"],
    ["horizontalAccuracy: number\tClass Location", "horizontalAccuracy"],
    ["notify<T>(data: T): void\tClass Label", "notify<T>(${1:data: T})"],
    ["navBarVisibility: string\tInterface iOSFrame", "navBarVisibility"],
    ["isLayoutRequired: boolean\tClass Placeholder", "isLayoutRequired"],
    ["getMeasuredWidth(): number\tClass Progress", "getMeasuredWidth()"],
    ["automationText: string\tClass CustomLayoutView", "automationText"],
    ["_onContextChanged(): void\tClass HtmlView", "_onContextChanged()"],
    ["verticalAlignment: string\tClass GridLayout", "verticalAlignment"],
    ["get(name: string): any\tClass HtmlView", "get(${1:name: string})"],
    ["getMeasuredWidth(): number\tClass HtmlView", "getMeasuredWidth()"],
    ["content: HttpContent\tInterface HttpResponse", "Optional content"],
    ["verticalAlignment: string\tClass TimePicker", "verticalAlignment"],
    ["getActualSize(): Size\tClass EditableTextBase", "getActualSize()"],
    ["getMeasuredHeight(): number\tClass Slider", "getMeasuredHeight()"],
    ["_updateLayout(): void\tClass EditableTextBase", "_updateLayout()"],
    ["_childrenCount: number\tClass CustomLayoutView", "_childrenCount"],
    ["_onContextChanged(): void\tClass Progress", "_onContextChanged()"],
    ["verticalAlignment: string\tClass LayoutBase", "verticalAlignment"],
    ["attributes: Object\tInterface ParserEvent", "Optional attributes"],
    ["get(name: string): any\tClass Progress", "get(${1:name: string})"],
    ["horizontalAlignment: string\tClass Border", "horizontalAlignment"],
    ["horizontalAlignment: string\tClass Button", "horizontalAlignment"],
    ["horizontalAlignment: string\tClass Slider", "horizontalAlignment"],
    ["inputType: string\tInterface PromptOptions", "Optional inputType"],
    ["rotate: number\tInterface AnimationDefinition", "Optional rotate"],
    ["eventName: string\tInterface AndroidOptionEventData", "eventName"],
    ["get(name: string): any\tClass TextView", "get(${1:name: string})"],
    ["requestLayout(): void\tClass EditableTextBase", "requestLayout()"],
    ["getMeasuredWidth(): number\tClass TextView", "getMeasuredWidth()"],
    ["textFieldHintColor: Color\tClass SearchBar", "textFieldHintColor"],
    ["unloadedEvent: string\tClass ContentView", "Static unloadedEvent"],
    ["getMeasuredHeight(): number\tClass Button", "getMeasuredHeight()"],
    ["notify<T>(data: T): void\tClass Image", "notify<T>(${1:data: T})"],
    ["backgroundImage: string\tClass AbsoluteLayout", "backgroundImage"],
    ["reloadPage(): void\tModule ui/frame", "reloadPage()"],
    ["notify<T>(data: T): void\tClass Style", "notify<T>(${1:data: T})"],
    ["formattedText: FormattedString\tClass TextField", "formattedText"],
    ["verticalAlignment: string\tClass ScrollView", "verticalAlignment"],
    ["verticalAlignment: string\tClass WrapLayout", "verticalAlignment"],
    ["_onContextChanged(): void\tClass TextView", "_onContextChanged()"],
    ["removeChildren(): void\tClass AbsoluteLayout", "removeChildren()"],
    ["verticalAlignment: string\tClass ListPicker", "verticalAlignment"],
    ["_onContextChanged(): void\tClass Repeater", "_onContextChanged()"],
    ["stretchProperty: Property\tClass Image", "Static stretchProperty"],
    ["getMeasuredWidth(): number\tClass Repeater", "getMeasuredWidth()"],
    ["getMeasuredWidth(): number\tClass ListView", "getMeasuredWidth()"],
    ["unloadedEvent: string\tClass StackLayout", "Static unloadedEvent"],
    ["getMeasuredWidth(): number\tClass TextBase", "getMeasuredWidth()"],
    ["automationText: string\tClass EditableTextBase", "automationText"],
    ["_updateLayout(): void\tClass CustomLayoutView", "_updateLayout()"],
    ["get(name: string): any\tClass ListView", "get(${1:name: string})"],
    ["horizontalAlignment: string\tClass Layout", "horizontalAlignment"],
    ["notify<T>(data: T): void\tClass Style", "notify<T>(${1:data: T})"],
    ["notify<T>(data: T): void\tClass Cache", "notify<T>(${1:data: T})"],
    ["get(name: string): any\tClass Repeater", "get(${1:name: string})"],
    ["cssPseudoClasses: Set<string>\tClass WebView", "cssPseudoClasses"],
    ["paddingBottom: number\tClass ProxyViewContainer", "paddingBottom"],
    ["_onContextChanged(): void\tClass ListView", "_onContextChanged()"],
    ["cssPseudoClasses: Set<string>\tClass TabView", "cssPseudoClasses"],
    ["horizontalAlignment: string\tClass Switch", "horizontalAlignment"],
    ["rotation: number\tInterface RotationGestureEventData", "rotation"],
    ["object: Observable\tInterface RotationGestureEventData", "object"],
    ["isLayoutRequired: boolean\tClass StackLayout", "isLayoutRequired"],
    ["_childrenCount: number\tClass EditableTextBase", "_childrenCount"],
    ["unloadedEvent: string\tClass Placeholder", "Static unloadedEvent"],
    ["requestLayout(): void\tClass CustomLayoutView", "requestLayout()"],
    ["verticalAlignment: string\tClass DockLayout", "verticalAlignment"],
    ["getMeasuredHeight(): number\tClass Switch", "getMeasuredHeight()"],
    ["_onContextChanged(): void\tClass TextBase", "_onContextChanged()"],
    ["tabsBackgroundColor: Color\tClass TabView", "tabsBackgroundColor"],
    ["getMeasuredHeight(): number\tClass Layout", "getMeasuredHeight()"],
    ["isLayoutValid: boolean\tClass ActivityIndicator", "isLayoutValid"],
    ["notify<T>(data: T): void\tClass Frame", "notify<T>(${1:data: T})"],
    ["_getAndroidTabView(): any\tClass TabView", "_getAndroidTabView()"],
    ["getActualSize(): Size\tClass CustomLayoutView", "getActualSize()"],
    ["get(name: string): any\tClass TextBase", "get(${1:name: string})"],
    ["getMeasuredHeight(): number\tClass Border", "getMeasuredHeight()"],
    ["android: any\tInterface ApplicationEventData", "Optional android"],
    ["itemsProperty: Property\tClass Repeater", "Static itemsProperty"],
    ["unloadedEvent: string\tClass GridLayout", "Static unloadedEvent"],
    ["affectsLayout: boolean\tClass PropertyMetadata", "affectsLayout"],
    ["unloadedEvent: string\tClass DatePicker", "Static unloadedEvent"],
    ["verticalAlignment: string\tClass ActionBar", "verticalAlignment"],
    ["Thistle: any\tModule color/known-colors", "Thistle"],
    ["cssPseudoClasses: Set<string>\tClass Button", "cssPseudoClasses"],
    ["getColumns(): Array<ItemSpec>\tClass GridLayout", "getColumns()"],
    ["navigatedToEvent: string\tClass Page", "Static navigatedToEvent"],
    ["cssPseudoClasses: Set<string>\tClass Switch", "cssPseudoClasses"],
    ["isLayoutRequired: boolean\tClass ListPicker", "isLayoutRequired"],
    ["type: GestureTypes\tInterface GestureEventDataWithState", "type"],
    ["textProperty: Property\tClass ActionItem", "Static textProperty"],
    ["isLayoutRequired: boolean\tClass LayoutBase", "isLayoutRequired"],
    ["object: any\tInterface AndroidActivityBundleEventData", "object"],
    ["currentContext: any\tClass AndroidApplication", "currentContext"],
    ["rootController: any\tInterface iOSApplication", "rootController"],
    ["get(object: any): Source\tClass Source", "get(${1:object: any})"],
    ["bundle: any\tInterface AndroidActivityBundleEventData", "bundle"],
    ["notify<T>(data: T): void\tClass Span", "notify<T>(${1:data: T})"],
    ["cssPseudoClasses: Set<string>\tClass Slider", "cssPseudoClasses"],
    ["formattedText: FormattedString\tClass TextView", "formattedText"],
    ["valueProperty: Property\tClass Progress", "Static valueProperty"],
    ["hourProperty: Property\tClass TimePicker", "Static hourProperty"],
    ["notify<T>(data: T): void\tClass View", "notify<T>(${1:data: T})"],
    ["_gestureObservers: any\tClass SegmentedBar", "_gestureObservers"],
    ["OldLace: any\tModule color/known-colors", "OldLace"],
    ["isLayoutRequired: boolean\tClass WrapLayout", "isLayoutRequired"],
    ["context: any\tInterface CreateViewEventData", "Optional context"],
    ["isLayoutValid: boolean\tClass CustomLayoutView", "isLayoutValid"],
    ["unloadedEvent: string\tClass ListPicker", "Static unloadedEvent"],
    ["timeProperty: Property\tClass TimePicker", "Static timeProperty"],
    ["eventName: string\tInterface PinchGestureEventData", "eventName"],
    ["unloadedEvent: string\tClass LayoutBase", "Static unloadedEvent"],
    ["unloadedEvent: string\tClass ScrollView", "Static unloadedEvent"],
    ["DimGray: any\tModule color/known-colors", "DimGray"],
    ["stopMonitoring(): void\tModule connectivity", "stopMonitoring()"],
    ["unloadedEvent: string\tClass TimePicker", "Static unloadedEvent"],
    ["itemTemplate: string | Template\tClass Repeater", "itemTemplate"],
    ["Fuchsia: any\tModule color/known-colors", "Fuchsia"],
    ["SkyBlue: any\tModule color/known-colors", "SkyBlue"],
    ["fontAttributes: number\tClass FormattedString", "fontAttributes"],
    ["horizontalAlignment: string\tClass Image", "horizontalAlignment"],
    ["verticalAlignment: string\tClass SearchBar", "verticalAlignment"],
    ["toString: function(): string\tInterface HttpContent", "toString"],
    ["getMeasuredWidth(): number\tClass TabView", "getMeasuredWidth()"],
    ["get(name: string): any\tClass TabView", "get(${1:name: string})"],
    ["currentActivity: any\tInterface AndroidFrame", "currentActivity"],
    ["isLayoutRequired: boolean\tClass GridLayout", "isLayoutRequired"],
    ["affectsLayout: boolean\tClass PropertyMetadata", "affectsLayout"],
    ["unloadedEvent: string\tClass DockLayout", "Static unloadedEvent"],
    ["showActionBar: boolean\tInterface AndroidFrame", "showActionBar"],
    ["idProperty: Property\tClass AbsoluteLayout", "Static idProperty"],
    ["navigationBarHeight: number\tClass Frame", "navigationBarHeight"],
    ["sizeX: number\tInterface BackgroundDrawParams", "Optional sizeX"],
    ["dismissSoftInput(): void\tClass TextField", "dismissSoftInput()"],
    ["stretchLastChild: boolean\tClass DockLayout", "stretchLastChild"],
    ["formattedText: FormattedString\tClass TextBase", "formattedText"],
    ["horizontalAlignment: string\tClass Frame", "horizontalAlignment"],
    ["loadedEvent: string\tClass AbsoluteLayout", "Static loadedEvent"],
    ["dockProperty: Property\tClass DockLayout", "Static dockProperty"],
    ["sizeY: number\tInterface BackgroundDrawParams", "Optional sizeY"],
    ["getMeasuredWidth(): number\tClass WebView", "getMeasuredWidth()"],
    ["notify<T>(data: T): void\tClass Page", "notify<T>(${1:data: T})"],
    ["selectors: SelectorCore[]\tClass SelectorsMatch<T>", "selectors"],
    ["iconProperty: Property\tClass ActionItem", "Static iconProperty"],
    ["intent: any\tInterface AndroidActivityResultEventData", "intent"],
    ["android: AndroidActionItemSettings\tClass ActionItem", "android"],
    ["updateDistance: number\tClass LocationManager", "updateDistance"],
    ["object: any\tInterface AndroidActivityResultEventData", "object"],
    ["eventName: string\tInterface SwipeGestureEventData", "eventName"],
    ["isLayoutValid: boolean\tClass EditableTextBase", "isLayoutValid"],
    ["eventName: string\tInterface TouchGestureEventData", "eventName"],
    ["isNavigation: boolean\tInterface BackstackEntry", "isNavigation"],
    ["_onContextChanged(): void\tClass WebView", "_onContextChanged()"],
    ["updateTextTrigger: string\tClass TextField", "updateTextTrigger"],
    ["ios: any\tInterface OrientationChangedEventData", "Optional ios"],
    ["version: string\tModule js-libs/esprima", "version"],
    ["horizontalAlignment: string\tClass Style", "horizontalAlignment"],
    ["get(name: string): any\tClass WebView", "get(${1:name: string})"],
    ["dismissSoftInput(): void\tClass SearchBar", "dismissSoftInput()"],
    ["verticalAlignment: string\tClass TextField", "verticalAlignment"],
    ["getMeasuredHeight(): number\tClass Frame", "getMeasuredHeight()"],
    ["_onContextChanged(): void\tClass TabView", "_onContextChanged()"],
    ["horizontalAlignment: string\tClass Style", "horizontalAlignment"],
    ["cssPseudoClasses: Set<string>\tClass Border", "cssPseudoClasses"],
    ["yearProperty: Property\tClass DatePicker", "Static yearProperty"],
    ["isLayoutRequired: boolean\tClass ScrollView", "isLayoutRequired"],
    ["DarkRed: any\tModule color/known-colors", "DarkRed"],
    ["dateProperty: Property\tClass DatePicker", "Static dateProperty"],
    ["bindingContext: any\tClass ProxyViewContainer", "bindingContext"],
    ["getMeasuredHeight(): number\tClass Label", "getMeasuredHeight()"],
    ["isLayoutRequired: boolean\tClass DatePicker", "isLayoutRequired"],
    ["isLayoutRequired: boolean\tClass TimePicker", "isLayoutRequired"],
    ["isLayoutRequired: boolean\tClass DockLayout", "isLayoutRequired"],
    ["horizontalAlignment: string\tClass Label", "horizontalAlignment"],
    ["getMeasuredHeight(): number\tClass Image", "getMeasuredHeight()"],
    ["clipToBounds: boolean\tClass ProxyViewContainer", "clipToBounds"],
    ["itemTemplate: string | Template\tClass ListView", "itemTemplate"],
    ["HotPink: any\tModule color/known-colors", "HotPink"],
    ["cssClasses: Set<string>\tClass ProxyViewContainer", "cssClasses"],
    ["itemsProperty: Property\tClass ListView", "Static itemsProperty"],
    ["Crimson: any\tModule color/known-colors", "Crimson"],
    ["unloadedEvent: string\tClass WrapLayout", "Static unloadedEvent"],
    ["Magenta: any\tModule color/known-colors", "Magenta"],
    ["backgroundColor: Color\tClass AbsoluteLayout", "backgroundColor"],
    ["cssPseudoClasses: Set<string>\tClass Layout", "cssPseudoClasses"],
    ["unloadedEvent: string\tClass TextField", "Static unloadedEvent"],
    ["textProperty: Property\tClass TextField", "Static textProperty"],
    ["leftMargin: number\tInterface CommonLayoutParams", "leftMargin"],
    ["verticalAlignment: string\tClass TextView", "verticalAlignment"],
    ["get(name: string): any\tClass Slider", "get(${1:name: string})"],
    ["_onContextChanged(): void\tClass Layout", "_onContextChanged()"],
    ["unloadedEvent: string\tClass ActionBar", "Static unloadedEvent"],
    ["textProperty: Property\tClass SearchBar", "Static textProperty"],
    ["getMeasuredWidth(): number\tClass Layout", "getMeasuredWidth()"],
    ["verticalAlignment: string\tClass TextBase", "verticalAlignment"],
    ["horizontalOffset: number\tClass ScrollView", "horizontalOffset"],
    ["isLayoutRequired: boolean\tClass ActionBar", "isLayoutRequired"],
    ["cssClasses: Set<string>\tInterface Node", "Optional cssClasses"],
    ["_gestureObservers: any\tClass Placeholder", "_gestureObservers"],
    ["getMeasuredWidth(): number\tClass Slider", "getMeasuredWidth()"],
    ["stack(): Array<Frame>\tModule ui/frame", "stack()"],
    ["unloadedEvent: string\tClass SearchBar", "Static unloadedEvent"],
    ["returnKeyType: string\tClass EditableTextBase", "returnKeyType"],
    ["cssPseudoClasses: Set<string>\tClass Image", "cssPseudoClasses"],
    ["object: Observable\tInterface AndroidOptionEventData", "object"],
    ["bindingContext: any\tClass ActivityIndicator", "bindingContext"],
    ["delay: number\tInterface AnimationDefinition", "Optional delay"],
    ["verticalAlignment: string\tClass HtmlView", "verticalAlignment"],
    ["updateTextTrigger: string\tClass TextView", "updateTextTrigger"],
    ["horizontalAlignment: string\tClass View", "horizontalAlignment"],
    ["horizontalAlignment: string\tClass Page", "horizontalAlignment"],
    ["downloadedEvent: string\tClass Cache", "Static downloadedEvent"],
    ["getActualSize(): Size\tClass AbsoluteLayout", "getActualSize()"],
    ["_updateLayout(): void\tClass AbsoluteLayout", "_updateLayout()"],
    ["itemsProperty: Property\tClass TabView", "Static itemsProperty"],
    ["borderRadius: number\tClass ProxyViewContainer", "borderRadius"],
    ["marginBottom: number\tClass ProxyViewContainer", "marginBottom"],
    ["getMeasuredHeight(): number\tClass Page", "getMeasuredHeight()"],
    ["backgroundImage: string\tClass SegmentedBar", "backgroundImage"],
    ["namespace: string\tInterface ParserEvent", "Optional namespace"],
    ["getMeasuredWidth(): number\tClass Border", "getMeasuredWidth()"],
    ["isLayoutRequired: boolean\tClass TextField", "isLayoutRequired"],
    ["get(name: string): any\tClass Border", "get(${1:name: string})"],
    ["isForwards: boolean\tClass KeyframeAnimationInfo", "isForwards"],
    ["getMeasuredWidth(): number\tClass Switch", "getMeasuredWidth()"],
    ["verticalAlignment: string\tClass Progress", "verticalAlignment"],
    ["cssPseudoClasses: Set<string>\tClass Frame", "cssPseudoClasses"],
    ["eventName: string\tInterface ApplicationEventData", "eventName"],
    ["_onContextChanged(): void\tClass Border", "_onContextChanged()"],
    ["verticalAlignment: string\tClass ListView", "verticalAlignment"],
    ["EndElement: string\tClass ParserEventType", "Static EndElement"],
    ["textAlignment: string\tClass EditableTextBase", "textAlignment"],
    ["visualStateValue: any\tClass PropertyEntry", "visualStateValue"],
    ["scrollableHeight: number\tClass ScrollView", "scrollableHeight"],
    ["type: GestureTypes\tInterface RotationGestureEventData", "type"],
    ["requestLayout(): void\tClass AbsoluteLayout", "requestLayout()"],
    ["target: View\tInterface AnimationDefinition", "Optional target"],
    ["automationText: string\tClass AbsoluteLayout", "automationText"],
    ["get(name: string): any\tClass Layout", "get(${1:name: string})"],
    ["_gestureObservers: any\tClass ContentView", "_gestureObservers"],
    ["paddingRight: number\tClass ProxyViewContainer", "paddingRight"],
    ["headers: any\tInterface HttpRequestOptions", "Optional headers"],
    ["getChildrenCount(): number\tClass Layout", "getChildrenCount()"],
    ["cssPseudoClasses: Set<string>\tClass Label", "cssPseudoClasses"],
    ["_onContextChanged(): void\tClass Switch", "_onContextChanged()"],
    ["get(name: string): any\tClass Button", "get(${1:name: string})"],
    ["_onContextChanged(): void\tClass Button", "_onContextChanged()"],
    ["cssClasses: Set<string>\tClass ActivityIndicator", "cssClasses"],
    ["_onContextChanged(): void\tClass Slider", "_onContextChanged()"],
    ["getMeasuredWidth(): number\tClass Button", "getMeasuredWidth()"],
    ["getItems(): Array<ActionItem>\tClass ActionItems", "getItems()"],
    ["get(name: string): any\tClass Switch", "get(${1:name: string})"],
    ["_gestureObservers: any\tClass StackLayout", "_gestureObservers"],
    ["dismissSoftInput(): void\tClass TextView", "dismissSoftInput()"],
    ["isLayoutRequired: boolean\tClass SearchBar", "isLayoutRequired"],
    ["_childrenCount: number\tClass AbsoluteLayout", "_childrenCount"],
    ["verticalAlignment: string\tClass Repeater", "verticalAlignment"],
    ["getMeasuredHeight(): number\tClass View", "getMeasuredHeight()"],
    ["object: Observable\tInterface PinchGestureEventData", "object"],
    ["heightPixels: number\tInterface ScreenMetrics", "heightPixels"],
    ["Maroon: any\tModule color/known-colors", "Maroon"],
    ["getMeasuredWidth(): number\tClass Image", "getMeasuredWidth()"],
    ["backgroundImage: string\tClass Placeholder", "backgroundImage"],
    ["object: Observable\tInterface TouchGestureEventData", "object"],
    ["verticalAlignment: string\tClass TabView", "verticalAlignment"],
    ["eventName: string\tInterface PanGestureEventData", "eventName"],
    ["object: Observable\tInterface SwipeGestureEventData", "object"],
    ["type:  | * | # | . | : | []\tInterface SimpleSelector", "type"],
    ["_onContextChanged(): void\tClass Frame", "_onContextChanged()"],
    ["_gestureObservers: any\tClass DockLayout", "_gestureObservers"],
    ["removeChildren(): void\tClass StackLayout", "removeChildren()"],
    ["getMeasuredWidth(): number\tClass Label", "getMeasuredWidth()"],
    ["dayProperty: Property\tClass DatePicker", "Static dayProperty"],
    ["borderRadius: number\tClass ActivityIndicator", "borderRadius"],
    ["backgroundPosition: string\tClass Style", "backgroundPosition"],
    ["password: string\tInterface LoginOptions", "Optional password"],
    ["userName: string\tInterface LoginOptions", "Optional userName"],
    ["backgroundImage: string\tClass ContentView", "backgroundImage"],
    ["get(name: string): any\tClass Label", "get(${1:name: string})"],
    ["_onContextChanged(): void\tClass Image", "_onContextChanged()"],
    ["_onContextChanged(): void\tClass Label", "_onContextChanged()"],
    ["loadedEvent: string\tClass SegmentedBar", "Static loadedEvent"],
    ["attributes: any\tInterface LoadOptions", "Optional attributes"],
    ["strikethrough: number\tClass FormattedString", "strikethrough"],
    ["isLayoutRequired: boolean\tClass TextBase", "isLayoutRequired"],
    ["get(name: string): any\tClass Style", "get(${1:name: string})"],
    ["_gestureObservers: any\tClass GridLayout", "_gestureObservers"],
    ["_gestureObservers: any\tClass LayoutBase", "_gestureObservers"],
    ["android: AndroidActionBarSettings\tClass ActionBar", "android"],
    ["unloadedEvent: string\tClass TextBase", "Static unloadedEvent"],
    ["_gestureObservers: any\tClass ListPicker", "_gestureObservers"],
    ["handled: boolean\tInterface AndroidOptionEventData", "handled"],
    ["Indigo: any\tModule color/known-colors", "Indigo"],
    ["message: string\tInterface ConfirmOptions", "Optional message"],
    ["get(name: string): any\tClass Style", "get(${1:name: string})"],
    ["iterations: number\tClass KeyframeAnimationInfo", "iterations"],
    ["getMeasuredWidth(): number\tClass Frame", "getMeasuredWidth()"],
    ["_gestureObservers: any\tClass TimePicker", "_gestureObservers"],
    ["affectsStyle: boolean\tClass PropertyMetadata", "affectsStyle"],
    ["get(name: string): any\tClass Image", "get(${1:name: string})"],
    ["isLayoutRequired: boolean\tClass ListView", "isLayoutRequired"],
    ["textProperty: Property\tClass TextBase", "Static textProperty"],
    ["get(name: string): any\tClass Frame", "get(${1:name: string})"],
    ["startActivity: any\tClass AndroidApplication", "startActivity"],
    ["cssPseudoClasses: Set<string>\tClass View", "cssPseudoClasses"],
    ["activity: any\tInterface AndroidActivityEventData", "activity"],
    ["unloadedEvent: string\tClass TextView", "Static unloadedEvent"],
    ["Orange: any\tModule color/known-colors", "Orange"],
    ["cssClasses: Set<string>\tClass EditableTextBase", "cssClasses"],
    ["Error: ErrorConstructor\tInterface NativeScriptError", "Error"],
    ["_gestureObservers: any\tClass ScrollView", "_gestureObservers"],
    ["Silver: any\tModule color/known-colors", "Silver"],
    ["verticalAlignment: string\tClass WebView", "verticalAlignment"],
    ["eventName: string\tInterface CreateViewEventData", "eventName"],
    ["Tomato: any\tModule color/known-colors", "Tomato"],
    ["isLayoutRequired: boolean\tClass Repeater", "isLayoutRequired"],
    ["formattedText: FormattedString\tClass Button", "formattedText"],
    ["backgroundImage: string\tClass StackLayout", "backgroundImage"],
    ["cssPseudoClasses: Set<string>\tClass Page", "cssPseudoClasses"],
    ["bindingContext: any\tClass NavigationButton", "bindingContext"],
    ["idProperty: Property\tClass SegmentedBar", "Static idProperty"],
    ["backgroundPosition: string\tClass Style", "backgroundPosition"],
    ["marginBottom: number\tClass ActivityIndicator", "marginBottom"],
    ["Orchid: any\tModule color/known-colors", "Orchid"],
    ["bindingContext: any\tClass CustomLayoutView", "bindingContext"],
    ["isLayoutRequired: boolean\tClass TextView", "isLayoutRequired"],
    ["unloadedEvent: string\tClass Progress", "Static unloadedEvent"],
    ["unloadedEvent: string\tClass Repeater", "Static unloadedEvent"],
    ["isLayoutValid: boolean\tClass AbsoluteLayout", "isLayoutValid"],
    ["_gestureObservers: any\tClass WrapLayout", "_gestureObservers"],
    ["Purple: any\tModule color/known-colors", "Purple"],
    ["Sienna: any\tModule color/known-colors", "Sienna"],
    ["_gestureObservers: any\tClass DatePicker", "_gestureObservers"],
    ["textProperty: Property\tClass TextView", "Static textProperty"],
    ["Salmon: any\tModule color/known-colors", "Salmon"],
    ["Bisque: any\tModule color/known-colors", "Bisque"],
    ["cssClasses: Set<string>\tClass CustomLayoutView", "cssClasses"],
    ["name: string\tInterface NavigationTransition", "Optional name"],
    ["unloadedEvent: string\tClass HtmlView", "Static unloadedEvent"],
    ["position: string\tInterface IOSActionItemSettings", "position"],
    ["valueProperty: Property\tClass Slider", "Static valueProperty"],
    ["isLayoutRequired: boolean\tClass HtmlView", "isLayoutRequired"],
    ["affectsStyle: boolean\tClass PropertyMetadata", "affectsStyle"],
    ["backgroundColor: Color\tClass SegmentedBar", "backgroundColor"],
    ["Violet: any\tModule color/known-colors", "Violet"],
    ["isLayoutRequired: boolean\tClass Progress", "isLayoutRequired"],
    ["bindingContext: any\tClass EditableTextBase", "bindingContext"],
    ["Yellow: any\tModule color/known-colors", "Yellow"],
    ["rowProperty: Property\tClass GridLayout", "Static rowProperty"],
    ["htmlProperty: Property\tClass HtmlView", "Static htmlProperty"],
    ["bindingContext: any\tClass SegmentedBarItem", "bindingContext"],
    ["getAndroidTypeface(): any\tClass Font", "getAndroidTypeface()"],
    ["unloadedEvent: string\tClass ListView", "Static unloadedEvent"],
    ["_gestureObservers: any\tClass ActionBar", "_gestureObservers"],
    ["paddingBottom: number\tClass AbsoluteLayout", "paddingBottom"],
    ["backgroundColor: Color\tClass ContentView", "backgroundColor"],
    ["backgroundImage: string\tClass LayoutBase", "backgroundImage"],
    ["onUnloaded(): void\tClass ProxyViewContainer", "onUnloaded()"],
    ["isLayoutRequired: boolean\tClass TabView", "isLayoutRequired"],
    ["backgroundImage: string\tClass WrapLayout", "backgroundImage"],
    ["_gestureObservers: any\tClass TextField", "_gestureObservers"],
    ["backgroundImage: string\tClass TimePicker", "backgroundImage"],
    ["getMeasuredWidth(): number\tClass Page", "getMeasuredWidth()"],
    ["borderRadius: number\tClass EditableTextBase", "borderRadius"],
    ["removeChildren(): void\tClass LayoutBase", "removeChildren()"],
    ["object: any\tInterface OrientationChangedEventData", "object"],
    ["android: any\tInterface GestureEventDataWithState", "android"],
    ["verticalAlignment: string\tClass Border", "verticalAlignment"],
    ["backgroundColor: Color\tClass StackLayout", "backgroundColor"],
    ["scrollableWidth: number\tClass ScrollView", "scrollableWidth"],
    ["_setNativeTime(): void\tClass TimePicker", "_setNativeTime()"],
    ["curve: any\tInterface NavigationTransition", "Optional curve"],
    ["idProperty: Property\tClass Placeholder", "Static idProperty"],
    ["type: rule | keyframes | declaration\tInterface Rule", "type"],
    ["eventName: string\tInterface PropertyChangeData", "eventName"],
    ["idProperty: Property\tClass ContentView", "Static idProperty"],
    ["cacheable: boolean\tInterface NativeValueResult", "cacheable"],
    ["marginRight: number\tClass ProxyViewContainer", "marginRight"],
    ["loadedEvent: string\tClass Placeholder", "Static loadedEvent"],
    ["borderRadius: number\tClass CustomLayoutView", "borderRadius"],
    ["type: rule | keyframes | declaration\tInterface Node", "type"],
    ["verticalAlignment: string\tClass Layout", "verticalAlignment"],
    ["backgroundImage: string\tClass DatePicker", "backgroundImage"],
    ["scale: Pair\tInterface AnimationDefinition", "Optional scale"],
    ["message: string\tInterface PromptOptions", "Optional message"],
    ["isLayoutRequired: boolean\tClass WebView", "isLayoutRequired"],
    ["unloadedEvent: string\tClass WebView", "Static unloadedEvent"],
    ["backgroundImage: string\tClass ScrollView", "backgroundImage"],
    ["message: string\tInterface DialogOptions", "Optional message"],
    ["spans: ObservableArray<Span>\tClass FormattedString", "spans"],
    ["idProperty: Property\tClass StackLayout", "Static idProperty"],
    ["loadedEvent: string\tClass StackLayout", "Static loadedEvent"],
    ["removeChildren(): void\tClass GridLayout", "removeChildren()"],
    ["loadedEvent: string\tClass ContentView", "Static loadedEvent"],
    ["marginBottom: number\tClass CustomLayoutView", "marginBottom"],
    ["automationText: string\tClass SegmentedBar", "automationText"],
    ["_onContextChanged(): void\tClass Page", "_onContextChanged()"],
    ["removeChildren(): void\tClass DockLayout", "removeChildren()"],
    ["verticalAlignment: string\tClass Slider", "verticalAlignment"],
    ["formattedText: FormattedString\tClass Label", "formattedText"],
    ["keyboardType: string\tClass EditableTextBase", "keyboardType"],
    ["backgroundColor: Color\tClass Placeholder", "backgroundColor"],
    ["unloadedEvent: string\tClass TabView", "Static unloadedEvent"],
    ["fragmentTag: string\tInterface BackstackEntry", "fragmentTag"],
    ["angularSyntax: boolean\tClass EasySAXParser", "angularSyntax"],
    ["verticalAccuracy: number\tClass Location", "verticalAccuracy"],
    ["nativeError: any\tInterface NativeScriptError", "nativeError"],
    ["_updateLayout(): void\tClass SegmentedBar", "_updateLayout()"],
    ["paddingLeft: number\tClass ProxyViewContainer", "paddingLeft"],
    ["topMargin: number\tInterface CommonLayoutParams", "topMargin"],
    ["verticalAlignment: string\tClass Switch", "verticalAlignment"],
    ["isReverse: boolean\tClass KeyframeAnimationInfo", "isReverse"],
    ["_getStyleScope(): StyleScope\tClass Page", "_getStyleScope()"],
    ["lowMemoryEvent: string\tModule application", "lowMemoryEvent"],
    ["removeChildren(): void\tClass WrapLayout", "removeChildren()"],
    ["twoWay: boolean\tInterface BindingOptions", "Optional twoWay"],
    ["get(name: string): any\tClass View", "get(${1:name: string})"],
    ["get(name: string): any\tClass Page", "get(${1:name: string})"],
    ["backgroundImage: string\tClass GridLayout", "backgroundImage"],
    ["eventName: string\tInterface PropertyChangeData", "eventName"],
    ["resolvedPage: Page\tInterface BackstackEntry", "resolvedPage"],
    ["getActualSize(): Size\tClass SegmentedBar", "getActualSize()"],
    ["_onContextChanged(): void\tClass View", "_onContextChanged()"],
    ["maximumAge: number\tInterface Options", "Optional maximumAge"],
    ["marginBottom: number\tClass EditableTextBase", "marginBottom"],
    ["get(name: string): any\tClass Span", "get(${1:name: string})"],
    ["requestLayout(): void\tClass SegmentedBar", "requestLayout()"],
    ["borderWidth: number\tClass ProxyViewContainer", "borderWidth"],
    ["backgroundImage: string\tClass ListPicker", "backgroundImage"],
    ["packageName: string\tClass AndroidApplication", "packageName"],
    ["property: Property\tInterface PropertyChangeData", "property"],
    ["message: string\tInterface ActionOptions", "Optional message"],
    ["getMeasuredWidth(): number\tClass View", "getMeasuredWidth()"],
    ["verticalAlignment: string\tClass Button", "verticalAlignment"],
    ["_gestureObservers: any\tClass SearchBar", "_gestureObservers"],
    ["_childrenCount: number\tClass SegmentedBar", "_childrenCount"],
    ["value: string\tInterface AttributeSelector", "Optional value"],
    ["backgroundImage: string\tClass DockLayout", "backgroundImage"],
    ["idProperty: Property\tClass ScrollView", "Static idProperty"],
    ["idProperty: Property\tClass DockLayout", "Static idProperty"],
    ["idProperty: Property\tClass DatePicker", "Static idProperty"],
    ["loadedEvent: string\tClass DatePicker", "Static loadedEvent"],
    ["Olive: any\tModule color/known-colors", "Olive"],
    ["topmost(): Frame\tModule ui/frame", "topmost()"],
    ["_childrenCount: number\tClass StackLayout", "_childrenCount"],
    ["isLayoutValid: boolean\tClass SegmentedBar", "isLayoutValid"],
    ["object: Observable\tInterface CreateViewEventData", "object"],
    ["backgroundColor: Color\tClass GridLayout", "backgroundColor"],
    ["android: any\tInterface LaunchEventData", "Optional android"],
    ["loadedEvent: string\tClass ScrollView", "Static loadedEvent"],
    ["getActualSize(): Size\tClass Placeholder", "getActualSize()"],
    ["android: any\tInterface RotationGestureEventData", "android"],
    ["inheritable: boolean\tClass PropertyMetadata", "inheritable"],
    ["_updateLayout(): void\tClass ContentView", "_updateLayout()"],
    ["requestLayout(): void\tClass Placeholder", "requestLayout()"],
    ["Coral: any\tModule color/known-colors", "Coral"],
    ["type: GestureTypes\tInterface SwipeGestureEventData", "type"],
    ["Khaki: any\tModule color/known-colors", "Khaki"],
    ["Ivory: any\tModule color/known-colors", "Ivory"],
    ["backgroundColor: Color\tClass DockLayout", "backgroundColor"],
    ["items: Array<SegmentedBarItem>\tClass SegmentedBar", "items"],
    ["idProperty: Property\tClass LayoutBase", "Static idProperty"],
    ["automationText: string\tClass Placeholder", "automationText"],
    ["context: any\tInterface NavigationEntry", "Optional context"],
    ["inheritable: boolean\tClass PropertyMetadata", "inheritable"],
    ["backgroundColor: Color\tClass ListPicker", "backgroundColor"],
    ["unloadedEvent: string\tClass Layout", "Static unloadedEvent"],
    ["type: GestureTypes\tInterface TouchGestureEventData", "type"],
    ["White: any\tModule color/known-colors", "White"],
    ["Wheat: any\tModule color/known-colors", "Wheat"],
    ["backgroundImage: string\tClass SearchBar", "backgroundImage"],
    ["backgroundImage: string\tClass TextField", "backgroundImage"],
    ["cancel: function(): void\tClass KeyframeAnimation", "cancel"],
    ["Linen: any\tModule color/known-colors", "Linen"],
    ["type: GestureTypes\tInterface PinchGestureEventData", "type"],
    ["loadedEvent: string\tClass LayoutBase", "Static loadedEvent"],
    ["_gestureObservers: any\tClass TextBase", "_gestureObservers"],
    ["requestLayout(): void\tClass ContentView", "requestLayout()"],
    ["isLayoutRequired: boolean\tClass Layout", "isLayoutRequired"],
    ["Beige: any\tModule color/known-colors", "Beige"],
    ["message: string\tInterface LoginOptions", "Optional message"],
    ["_gestureObservers: any\tClass Progress", "_gestureObservers"],
    ["loadedEvent: string\tClass DockLayout", "Static loadedEvent"],
    ["Azure: any\tModule color/known-colors", "Azure"],
    ["getActualSize(): Size\tClass ContentView", "getActualSize()"],
    ["Black: any\tModule color/known-colors", "Black"],
    ["Green: any\tModule color/known-colors", "Green"],
    ["_updateLayout(): void\tClass Placeholder", "_updateLayout()"],
    ["curve: any\tInterface AnimationDefinition", "Optional curve"],
    ["Brown: any\tModule color/known-colors", "Brown"],
    ["scrollEvent: string\tClass ScrollView", "Static scrollEvent"],
    ["verticalAlignment: string\tClass Style", "verticalAlignment"],
    ["backgroundColor: Color\tClass ScrollView", "backgroundColor"],
    ["backgroundColor: Color\tClass DatePicker", "backgroundColor"],
    ["backgroundColor: Color\tClass LayoutBase", "backgroundColor"],
    ["verticalAlignment: string\tClass Image", "verticalAlignment"],
    ["verticalAlignment: string\tClass Style", "verticalAlignment"],
    ["registerHandlers(): any\tClass Styler", "registerHandlers()"],
    ["isLayoutRequired: boolean\tClass Switch", "isLayoutRequired"],
    ["_gestureObservers: any\tClass ListView", "_gestureObservers"],
    ["bindingContext: any\tClass AbsoluteLayout", "bindingContext"],
    ["isLayoutRequired: boolean\tClass Slider", "isLayoutRequired"],
    ["unloadedEvent: string\tClass Border", "Static unloadedEvent"],
    ["backgroundColor: Color\tClass WrapLayout", "backgroundColor"],
    ["state: number\tInterface GestureEventDataWithState", "state"],
    ["onUnloaded(): void\tClass ActivityIndicator", "onUnloaded()"],
    ["_childrenCount: number\tClass Placeholder", "_childrenCount"],
    ["widthPixels: number\tInterface ScreenMetrics", "widthPixels"],
    ["loadedEvent: string\tClass TimePicker", "Static loadedEvent"],
    ["idProperty: Property\tClass TimePicker", "Static idProperty"],
    ["unloadedEvent: string\tClass Slider", "Static unloadedEvent"],
    ["repeatX: boolean\tInterface BackgroundDrawParams", "repeatX"],
    ["requestLayout(): void\tClass StackLayout", "requestLayout()"],
    ["automationText: string\tClass StackLayout", "automationText"],
    ["itemTapEvent: string\tClass ListView", "Static itemTapEvent"],
    ["object: Observable\tInterface PanGestureEventData", "object"],
    ["unloadedEvent: string\tClass Button", "Static unloadedEvent"],
    ["mainEntry: NavigationEntry\tModule application", "mainEntry"],
    ["loadedEvent: string\tClass ListPicker", "Static loadedEvent"],
    ["play: function(): AnimationPromise\tClass Animation", "play"],
    ["clipToBounds: boolean\tClass AbsoluteLayout", "clipToBounds"],
    ["cssClasses: Set<string>\tClass AbsoluteLayout", "cssClasses"],
    ["get(key: string): any\tClass Cache", "get(${1:key: string})"],
    ["_updateLayout(): void\tClass StackLayout", "_updateLayout()"],
    ["getActualSize(): Size\tClass StackLayout", "getActualSize()"],
    ["borderColor: Color\tClass ProxyViewContainer", "borderColor"],
    ["textProperty: Property\tClass Button", "Static textProperty"],
    ["message: string\tInterface AlertOptions", "Optional message"],
    ["repeatY: boolean\tInterface BackgroundDrawParams", "repeatY"],
    ["verticalAlignment: string\tClass Label", "verticalAlignment"],
    ["borderWidth: number\tClass ActivityIndicator", "borderWidth"],
    ["isLayoutRequired: boolean\tClass Border", "isLayoutRequired"],
    ["backgroundColor: Color\tClass TimePicker", "backgroundColor"],
    ["appSelectors: RuleSet[]\tModule application", "appSelectors"],
    ["_gestureObservers: any\tClass TextView", "_gestureObservers"],
    ["unloadedEvent: string\tClass Switch", "Static unloadedEvent"],
    ["_gestureObservers: any\tClass Repeater", "_gestureObservers"],
    ["autocorrect: boolean\tClass EditableTextBase", "autocorrect"],
    ["isLayoutRequired: boolean\tClass Button", "isLayoutRequired"],
    ["_gestureObservers: any\tClass HtmlView", "_gestureObservers"],
    ["backgroundImage: string\tClass ActionBar", "backgroundImage"],
    ["loadedEvent: string\tClass GridLayout", "Static loadedEvent"],
    ["marginRight: number\tClass ActivityIndicator", "marginRight"],
    ["idProperty: Property\tClass GridLayout", "Static idProperty"],
    ["loadedEvent: string\tClass WrapLayout", "Static loadedEvent"],
    ["idProperty: Property\tClass ListPicker", "Static idProperty"],
    ["property: string\tInterface KeyframeDeclaration", "property"],
    ["idProperty: Property\tClass WrapLayout", "Static idProperty"],
    ["transition: NavigationTransition\tClass Frame", "transition"],
    ["verticalAlignment: string\tClass Frame", "verticalAlignment"],
    ["rootViewGroup: any\tInterface AndroidFrame", "rootViewGroup"],
    ["deviceType: string\tInterface PlatformContext", "deviceType"],
    ["_isVisible: boolean\tClass ProxyViewContainer", "_isVisible"],
    ["_childrenCount: number\tClass ContentView", "_childrenCount"],
    ["automationText: string\tClass ContentView", "automationText"],
    ["cssSelectors: RuleSet[]\tModule application", "cssSelectors"],
    ["tapEvent: string\tClass NavigationButton", "Static tapEvent"],
    ["isLayoutValid: boolean\tClass Placeholder", "isLayoutValid"],
    ["automationText: string\tClass TimePicker", "automationText"],
    ["_childrenCount: number\tClass ListPicker", "_childrenCount"],
    ["minuteInterval: number\tClass TimePicker", "minuteInterval"],
    ["verticalOffset: number\tClass ScrollView", "verticalOffset"],
    ["android: AndroidApplication\tModule application", "android"],
    ["automationText: string\tClass WrapLayout", "automationText"],
    ["backgroundImage: string\tClass Progress", "backgroundImage"],
    ["requestLayout(): void\tClass TimePicker", "requestLayout()"],
    ["requestLayout(): void\tClass LayoutBase", "requestLayout()"],
    ["_childrenCount: number\tClass DatePicker", "_childrenCount"],
    ["getActualSize(): Size\tClass TimePicker", "getActualSize()"],
    ["getActualSize(): Size\tClass LayoutBase", "getActualSize()"],
    ["requestLayout(): void\tClass GridLayout", "requestLayout()"],
    ["_updateLayout(): void\tClass GridLayout", "_updateLayout()"],
    ["getActualSize(): Size\tClass GridLayout", "getActualSize()"],
    ["_updateLayout(): void\tClass ScrollView", "_updateLayout()"],
    ["_updateLayout(): void\tClass LayoutBase", "_updateLayout()"],
    ["removeColumns(): void\tClass GridLayout", "removeColumns()"],
    ["_updateLayout(): void\tClass TimePicker", "_updateLayout()"],
    ["automationText: string\tClass DatePicker", "automationText"],
    ["inheritedValue: any\tClass PropertyEntry", "inheritedValue"],
    ["verticalAlignment: string\tClass Page", "verticalAlignment"],
    ["marginRight: number\tClass CustomLayoutView", "marginRight"],
    ["borderRadius: number\tClass AbsoluteLayout", "borderRadius"],
    ["baseClassInfo: ClassInfo\tClass ClassInfo", "baseClassInfo"],
    ["effectiveValue: any\tClass PropertyEntry", "effectiveValue"],
    ["backgroundImage: string\tClass HtmlView", "backgroundImage"],
    ["backgroundImage: string\tClass TextView", "backgroundImage"],
    ["marginBottom: number\tClass AbsoluteLayout", "marginBottom"],
    ["toString(): string\tClass ObservableArray<T>", "toString()"],
    ["borderWidth: number\tClass CustomLayoutView", "borderWidth"],
    ["_childrenCount: number\tClass WrapLayout", "_childrenCount"],
    ["ident: string\tInterface SimpleIdentifierSelector", "ident"],
    ["_childrenCount: number\tClass TimePicker", "_childrenCount"],
    ["requestLayout(): void\tClass ListPicker", "requestLayout()"],
    ["isLayoutRequired: boolean\tClass Frame", "isLayoutRequired"],
    ["isLayoutValid: boolean\tClass StackLayout", "isLayoutValid"],
    ["remove(): Promise<any>\tClass FileSystemEntity", "remove()"],
    ["state: number\tInterface RotationGestureEventData", "state"],
    ["_updateLayout(): void\tClass DockLayout", "_updateLayout()"],
    ["unloadedEvent: string\tClass Frame", "Static unloadedEvent"],
    ["automationText: string\tClass DockLayout", "automationText"],
    ["requestLayout(): void\tClass DockLayout", "requestLayout()"],
    ["idProperty: Property\tClass ActionBar", "Static idProperty"],
    ["getActualSize(): Size\tClass DockLayout", "getActualSize()"],
    ["addedCount: number\tInterface ChangedData<T>", "addedCount"],
    ["loadedEvent: string\tClass ActionBar", "Static loadedEvent"],
    ["currentEntry: NavigationEntry\tClass Frame", "currentEntry"],
    ["onUnloaded(): void\tClass CustomLayoutView", "onUnloaded()"],
    ["borderWidth: number\tClass EditableTextBase", "borderWidth"],
    ["backgroundImage: string\tClass Repeater", "backgroundImage"],
    ["dump(obj: any): void\tClass Console", "dump(${1:obj: any})"],
    ["backStack: Array<BackstackEntry>\tClass Frame", "backStack"],
    ["selectedIndex: number\tClass SegmentedBar", "selectedIndex"],
    ["_updateLayout(): void\tClass ListPicker", "_updateLayout()"],
    ["object: Observable\tInterface PropertyChangeData", "object"],
    ["_isVisible: boolean\tClass ActivityIndicator", "_isVisible"],
    ["lastModified: Date\tClass FileSystemEntity", "lastModified"],
    ["borderColor: Color\tClass ActivityIndicator", "borderColor"],
    ["backgroundImage: string\tClass TextBase", "backgroundImage"],
    ["marginRight: number\tClass EditableTextBase", "marginRight"],
    ["getActualSize(): Size\tClass ListPicker", "getActualSize()"],
    ["_childrenCount: number\tClass ScrollView", "_childrenCount"],
    ["_childrenCount: number\tClass DockLayout", "_childrenCount"],
    ["requestLayout(): void\tClass WrapLayout", "requestLayout()"],
    ["unloadedEvent: string\tClass Image", "Static unloadedEvent"],
    ["backgroundImage: string\tClass ListView", "backgroundImage"],
    ["clearCache(): void\tClass FileNameResolver", "clearCache()"],
    ["_gestureObservers: any\tClass WebView", "_gestureObservers"],
    ["height: number\tInterface CameraOptions", "Optional height"],
    ["requestLayout(): void\tClass DatePicker", "requestLayout()"],
    ["unloadedEvent: string\tClass Label", "Static unloadedEvent"],
    ["_updateLayout(): void\tClass WrapLayout", "_updateLayout()"],
    ["textProperty: Property\tClass Label", "Static textProperty"],
    ["isLayoutValid: boolean\tClass ContentView", "isLayoutValid"],
    ["getActualSize(): Size\tClass DatePicker", "getActualSize()"],
    ["_updateLayout(): void\tClass DatePicker", "_updateLayout()"],
    ["isLayoutRequired: boolean\tClass Label", "isLayoutRequired"],
    ["isLayoutRequired: boolean\tClass Image", "isLayoutRequired"],
    ["_gestureObservers: any\tClass TabView", "_gestureObservers"],
    ["automationText: string\tClass ListPicker", "automationText"],
    ["addedCount: number\tInterface ChangedData<T>", "addedCount"],
    ["urlProperty: Property\tClass WebView", "Static urlProperty"],
    ["stylesheet: StyleSheet\tInterface SyntaxTree", "stylesheet"],
    ["automationText: string\tClass ScrollView", "automationText"],
    ["_createUI(): void\tClass ProxyViewContainer", "_createUI()"],
    ["paddingTop: number\tClass ProxyViewContainer", "paddingTop"],
    ["marginLeft: number\tClass ProxyViewContainer", "marginLeft"],
    ["verticalAlignment: string\tClass View", "verticalAlignment"],
    ["translateX: number\tClass ProxyViewContainer", "translateX"],
    ["visibility: string\tClass ProxyViewContainer", "visibility"],
    ["translateY: number\tClass ProxyViewContainer", "translateY"],
    ["getActualSize(): Size\tClass WrapLayout", "getActualSize()"],
    ["loadedEvent: string\tClass TextField", "Static loadedEvent"],
    ["automationText: string\tClass GridLayout", "automationText"],
    ["declarations: Declaration[]\tClass RuleSet", "declarations"],
    ["onUnloaded(): void\tClass EditableTextBase", "onUnloaded()"],
    ["changeMap: ChangeMap\tClass SelectorsMatch<T>", "changeMap"],
    ["backgroundColor: Color\tClass ActionBar", "backgroundColor"],
    ["automationText: string\tClass LayoutBase", "automationText"],
    ["paddingRight: number\tClass AbsoluteLayout", "paddingRight"],
    ["eventName: string\tInterface GestureEventData", "eventName"],
    ["eventName: string\tInterface ShownModallyData", "eventName"],
    ["_childrenCount: number\tClass LayoutBase", "_childrenCount"],
    ["isEnabled(): boolean\tClass LocationManager", "isEnabled()"],
    ["idProperty: Property\tClass SearchBar", "Static idProperty"],
    ["backgroundColor: Color\tClass SearchBar", "backgroundColor"],
    ["_childrenCount: number\tClass GridLayout", "_childrenCount"],
    ["submitEvent: string\tClass SearchBar", "Static submitEvent"],
    ["backgroundColor: Color\tClass TextField", "backgroundColor"],
    ["loadedEvent: string\tClass SearchBar", "Static loadedEvent"],
    ["requestLayout(): void\tClass ScrollView", "requestLayout()"],
    ["idProperty: Property\tClass TextField", "Static idProperty"],
    ["getActualSize(): Size\tClass ScrollView", "getActualSize()"],
    ["object: Observable\tInterface PropertyChangeData", "object"],
    ["getActualSize(): Size\tClass ActionBar", "getActualSize()"],
    ["entry: NavigationEntry\tInterface BackstackEntry", "entry"],
    ["loadedEvent: string\tClass HtmlView", "Static loadedEvent"],
    ["loadedEvent: string\tClass TextView", "Static loadedEvent"],
    ["bindingContext: any\tClass SegmentedBar", "bindingContext"],
    ["idProperty: Property\tClass HtmlView", "Static idProperty"],
    ["heightDIPs: number\tInterface ScreenMetrics", "heightDIPs"],
    ["defaultValue: any\tClass PropertyMetadata", "defaultValue"],
    ["isLayoutValid: boolean\tClass ScrollView", "isLayoutValid"],
    ["isLayoutValid: boolean\tClass WrapLayout", "isLayoutValid"],
    ["_childrenCount: number\tClass ActionBar", "_childrenCount"],
    ["backgroundColor: Color\tClass HtmlView", "backgroundColor"],
    ["disconnect(): any\tClass GesturesObserver", "disconnect()"],
    ["loadedEvent: string\tClass TextBase", "Static loadedEvent"],
    ["unloadedEvent: string\tClass View", "Static unloadedEvent"],
    ["idProperty: Property\tClass TextBase", "Static idProperty"],
    ["Cyan: any\tModule color/known-colors", "Cyan"],
    ["backgroundImage: string\tClass WebView", "backgroundImage"],
    ["automationText: string\tClass SearchBar", "automationText"],
    ["type: GestureTypes\tInterface PanGestureEventData", "type"],
    ["automationText: string\tClass TextField", "automationText"],
    ["Pink: any\tModule color/known-colors", "Pink"],
    ["Peru: any\tModule color/known-colors", "Peru"],
    ["backgroundRepeat: string\tClass Style", "backgroundRepeat"],
    ["declarations: Node[]\tInterface Keyframes", "declarations"],
    ["_gestureObservers: any\tClass Switch", "_gestureObservers"],
    ["loadedEvent: string\tClass ListView", "Static loadedEvent"],
    ["object: any\tInterface AndroidActivityEventData", "object"],
    ["Snow: any\tModule color/known-colors", "Snow"],
    ["Teal: any\tModule color/known-colors", "Teal"],
    ["isEnabled: boolean\tClass ProxyViewContainer", "isEnabled"],
    ["isLayoutRequired: boolean\tClass View", "isLayoutRequired"],
    ["getActualSize(): Size\tClass SearchBar", "getActualSize()"],
    ["idProperty: Property\tClass ListView", "Static idProperty"],
    ["Aqua: any\tModule color/known-colors", "Aqua"],
    ["backgroundColor: Color\tClass Progress", "backgroundColor"],
    ["isLayoutValid: boolean\tClass TimePicker", "isLayoutValid"],
    ["isLayoutValid: boolean\tClass DatePicker", "isLayoutValid"],
    ["backgroundImage: string\tClass TabView", "backgroundImage"],
    ["_updateLayout(): void\tClass SearchBar", "_updateLayout()"],
    ["Plum: any\tModule color/known-colors", "Plum"],
    ["isLayoutValid: boolean\tClass GridLayout", "isLayoutValid"],
    ["paddingBottom: number\tClass StackLayout", "paddingBottom"],
    ["isLayoutRequired: boolean\tClass Page", "isLayoutRequired"],
    ["_gestureObservers: any\tClass Border", "_gestureObservers"],
    ["_gestureObservers: any\tClass Slider", "_gestureObservers"],
    ["Lime: any\tModule color/known-colors", "Lime"],
    ["manager: any\tInterface AndroidLocationManager", "manager"],
    ["eventName: string\tInterface LaunchEventData", "eventName"],
    ["Blue: any\tModule color/known-colors", "Blue"],
    ["idProperty: Property\tClass TextView", "Static idProperty"],
    ["idProperty: Property\tClass Repeater", "Static idProperty"],
    ["getX(): number\tInterface TouchGestureEventData", "getX()"],
    ["Navy: any\tModule color/known-colors", "Navy"],
    ["_gestureObservers: any\tClass Button", "_gestureObservers"],
    ["actionBar: ActionBar\tClass NavigationButton", "actionBar"],
    ["duration: number\tClass KeyframeAnimationInfo", "duration"],
    ["loadedEvent: string\tClass Repeater", "Static loadedEvent"],
    ["borderColor: Color\tClass EditableTextBase", "borderColor"],
    ["isLayoutValid: boolean\tClass DockLayout", "isLayoutValid"],
    ["action: string\tInterface TouchGestureEventData", "action"],
    ["isLayoutValid: boolean\tClass LayoutBase", "isLayoutValid"],
    ["_resetCssValues(): void\tClass Style", "_resetCssValues()"],
    ["marginLeft: number\tClass ActivityIndicator", "marginLeft"],
    ["_isVisible: boolean\tClass CustomLayoutView", "_isVisible"],
    ["backgroundColor: Color\tClass Repeater", "backgroundColor"],
    ["translateX: number\tClass ActivityIndicator", "translateX"],
    ["requestLayout(): void\tClass SearchBar", "requestLayout()"],
    ["_gestureObservers: any\tClass Layout", "_gestureObservers"],
    ["backgroundRepeat: string\tClass Style", "backgroundRepeat"],
    ["_nativeView: any\tClass ProxyViewContainer", "_nativeView"],
    ["getRows(): Array<ItemSpec>\tClass GridLayout", "getRows()"],
    ["getY(): number\tInterface TouchGestureEventData", "getY()"],
    ["ios: IOSActionItemSettings\tClass NavigationButton", "ios"],
    ["translateY: number\tClass ActivityIndicator", "translateY"],
    ["_updateLayout(): void\tClass TextField", "_updateLayout()"],
    ["automationText: string\tClass ActionBar", "automationText"],
    ["visibility: string\tClass ActivityIndicator", "visibility"],
    ["_resetCssValues(): void\tClass Style", "_resetCssValues()"],
    ["getActualSize(): Size\tClass TextField", "getActualSize()"],
    ["_createUI(): void\tClass ActivityIndicator", "_createUI()"],
    ["requestLayout(): void\tClass TextField", "requestLayout()"],
    ["backgroundColor: Color\tClass ListView", "backgroundColor"],
    ["borderColor: Color\tClass CustomLayoutView", "borderColor"],
    ["_updateLayout(): void\tClass ActionBar", "_updateLayout()"],
    ["Gray: any\tModule color/known-colors", "Gray"],
    ["start(): any\tClass ControlStateChangeListener", "start()"],
    ["tolerant: boolean\tInterface Options", "Optional tolerant"],
    ["idProperty: Property\tClass Progress", "Static idProperty"],
    ["eventName: string\tInterface ScrollEventData", "eventName"],
    ["loadedEvent: string\tClass Progress", "Static loadedEvent"],
    ["disableDownload(): void\tClass Cache", "disableDownload()"],
    ["Gold: any\tModule color/known-colors", "Gold"],
    ["iterations: number\tClass KeyframeAnimation", "iterations"],
    ["requestLayout(): void\tClass ActionBar", "requestLayout()"],
    ["backgroundColor: Color\tClass TextBase", "backgroundColor"],
    ["isLayoutValid: boolean\tClass ListPicker", "isLayoutValid"],
    ["_isVisible: boolean\tClass EditableTextBase", "_isVisible"],
    ["title: string\tInterface ConfirmOptions", "Optional title"],
    ["unloadedEvent: string\tClass Page", "Static unloadedEvent"],
    ["cssClasses: Set<string>\tClass SegmentedBar", "cssClasses"],
    ["_childrenCount: number\tClass SearchBar", "_childrenCount"],
    ["defaultValue: any\tClass PropertyMetadata", "defaultValue"],
    ["backgroundColor: Color\tClass TextView", "backgroundColor"],
    ["_childrenCount: number\tClass TextField", "_childrenCount"],
    ["marginTop: number\tClass ProxyViewContainer", "marginTop"],
    ["translateX: number\tClass EditableTextBase", "translateX"],
    ["_createUI(): void\tClass CustomLayoutView", "_createUI()"],
    ["placeholderColor: Color\tClass Style", "placeholderColor"],
    ["getActualSize(): Size\tClass Repeater", "getActualSize()"],
    ["srcProperty: Property\tClass Image", "Static srcProperty"],
    ["className: string\tClass ProxyViewContainer", "className"],
    ["icon: string\tInterface AndroidActionBarSettings", "icon"],
    ["requestLayout(): void\tClass HtmlView", "requestLayout()"],
    ["automationText: string\tClass ListView", "automationText"],
    ["getDuration(): number\tClass Transition", "getDuration()"],
    ["backgroundImage: string\tClass Layout", "backgroundImage"],
    ["_childrenCount: number\tClass ListView", "_childrenCount"],
    ["layerType: number\tInterface CacheLayerType", "layerType"],
    ["backgroundColor: Color\tClass WebView", "backgroundColor"],
    ["ios: any\tInterface ApplicationEventData", "Optional ios"],
    ["_updateLayout(): void\tClass Repeater", "_updateLayout()"],
    ["requestLayout(): void\tClass Repeater", "requestLayout()"],
    ["minHeight: number\tClass ProxyViewContainer", "minHeight"],
    ["cssClasses: Set<string>\tClass ContentView", "cssClasses"],
    ["bindingContext: any\tClass ProxyObject", "bindingContext"],
    ["_childrenCount: number\tClass TextBase", "_childrenCount"],
    ["isEnabled: boolean\tClass ActivityIndicator", "isEnabled"],
    ["automationText: string\tClass TextBase", "automationText"],
    ["_nativeView: any\tClass ActivityIndicator", "_nativeView"],
    ["toJSON: function(): any\tInterface HttpContent", "toJSON"],
    ["isLayoutValid: boolean\tClass SearchBar", "isLayoutValid"],
    ["_childrenCount: number\tClass Repeater", "_childrenCount"],
    ["debug: boolean\tModule utils/debug", "debug"],
    ["bindingContext: any\tClass ContentView", "bindingContext"],
    ["marginBottom: number\tClass SegmentedBar", "marginBottom"],
    ["automationText: string\tClass Repeater", "automationText"],
    ["_gestureObservers: any\tClass Frame", "_gestureObservers"],
    ["placeholderColor: Color\tClass Style", "placeholderColor"],
    ["android: any\tInterface TouchGestureEventData", "android"],
    ["marginLeft: number\tClass EditableTextBase", "marginLeft"],
    ["clipToBounds: boolean\tClass StackLayout", "clipToBounds"],
    ["android: any\tInterface PinchGestureEventData", "android"],
    ["typeName: string\tClass DependencyObservable", "typeName"],
    ["dir(obj: any): void\tClass Console", "dir(${1:obj: any})"],
    ["paddingBottom: number\tClass DockLayout", "paddingBottom"],
    ["eventName: string\tInterface DownloadedData", "eventName"],
    ["cssClasses: Set<string>\tClass StackLayout", "cssClasses"],
    ["clearEvent: string\tClass SearchBar", "Static clearEvent"],
    ["selectedIndex: number\tClass ListPicker", "selectedIndex"],
    ["requestLayout(): void\tClass TextBase", "requestLayout()"],
    ["onLoaded(): void\tClass ProxyViewContainer", "onLoaded()"],
    ["requestLayout(): void\tClass ListView", "requestLayout()"],
    ["backgroundImage: string\tClass Switch", "backgroundImage"],
    ["bindingContext: any\tClass TabViewItem", "bindingContext"],
    ["getActualSize(): Size\tClass ListView", "getActualSize()"],
    ["_gestureObservers: any\tClass Label", "_gestureObservers"],
    ["title: string\tInterface ActionOptions", "Optional title"],
    ["suspendEvent: string\tModule application", "suspendEvent"],
    ["_gestureObservers: any\tClass Image", "_gestureObservers"],
    ["_updateLayout(): void\tClass ListView", "_updateLayout()"],
    ["getActualSize(): Size\tClass TextBase", "getActualSize()"],
    ["backgroundColor: Color\tClass TabView", "backgroundColor"],
    ["removeChildren(): void\tClass Layout", "removeChildren()"],
    ["title: string\tInterface DialogOptions", "Optional title"],
    ["borderRadius: number\tClass SegmentedBar", "borderRadius"],
    ["eventName: string\tInterface ChangedData<T>", "eventName"],
    ["loadedEvent: string\tClass TabView", "Static loadedEvent"],
    ["idProperty: Property\tClass TabView", "Static idProperty"],
    ["idProperty: Property\tClass WebView", "Static idProperty"],
    ["_updateLayout(): void\tClass TextBase", "_updateLayout()"],
    ["eventName: string\tInterface ChangedData<T>", "eventName"],
    ["translateY: number\tClass EditableTextBase", "translateY"],
    ["loadedEvent: string\tClass WebView", "Static loadedEvent"],
    ["actionItems: ActionItems\tClass ActionBar", "actionItems"],
    ["borderWidth: number\tClass AbsoluteLayout", "borderWidth"],
    ["marginRight: number\tClass AbsoluteLayout", "marginRight"],
    ["visibility: string\tClass CustomLayoutView", "visibility"],
    ["automationText: string\tClass HtmlView", "automationText"],
    ["getActualSize(): Size\tClass Progress", "getActualSize()"],
    ["marginLeft: number\tClass CustomLayoutView", "marginLeft"],
    ["_childrenCount: number\tClass Progress", "_childrenCount"],
    ["object: Observable\tInterface ShownModallyData", "object"],
    ["prefix: string\tInterface ParserEvent", "Optional prefix"],
    ["automationText: string\tClass TextView", "automationText"],
    ["isPlaying: boolean\tClass KeyframeAnimation", "isPlaying"],
    ["paddingBottom: number\tClass LayoutBase", "paddingBottom"],
    ["isLayoutValid: boolean\tClass TextField", "isLayoutValid"],
    ["title: string\tInterface PromptOptions", "Optional title"],
    ["getActualSize(): Size\tClass TextView", "getActualSize()"],
    ["backgroundImage: string\tClass Slider", "backgroundImage"],
    ["_updateLayout(): void\tClass TextView", "_updateLayout()"],
    ["android: any\tInterface SwipeGestureEventData", "android"],
    ["Comment: string\tClass ParserEventType", "Static Comment"],
    ["automationText: string\tClass Progress", "automationText"],
    ["statusCode: number\tInterface HttpResponse", "statusCode"],
    ["requestLayout(): void\tClass TextView", "requestLayout()"],
    ["_raiseTap(): void\tClass NavigationButton", "_raiseTap()"],
    ["isLayoutValid: boolean\tClass ActionBar", "isLayoutValid"],
    ["_updateLayout(): void\tClass HtmlView", "_updateLayout()"],
    ["_updateLayout(): void\tClass Progress", "_updateLayout()"],
    ["_createUI(): void\tClass EditableTextBase", "_createUI()"],
    ["visibility: string\tClass NavigationButton", "visibility"],
    ["_childrenCount: number\tClass HtmlView", "_childrenCount"],
    ["onUnloaded(): void\tClass AbsoluteLayout", "onUnloaded()"],
    ["cssClasses: Set<string>\tClass Placeholder", "cssClasses"],
    ["_childrenCount: number\tClass TextView", "_childrenCount"],
    ["width: number\tInterface CameraOptions", "Optional width"],
    ["object: Observable\tInterface GestureEventData", "object"],
    ["paddingLeft: number\tClass AbsoluteLayout", "paddingLeft"],
    ["translateY: number\tClass CustomLayoutView", "translateY"],
    ["backgroundImage: string\tClass Button", "backgroundImage"],
    ["paddingBottom: number\tClass WrapLayout", "paddingBottom"],
    ["translateX: number\tClass CustomLayoutView", "translateX"],
    ["getActualSize(): Size\tClass HtmlView", "getActualSize()"],
    ["paddingBottom: number\tClass GridLayout", "paddingBottom"],
    ["bindingContext: any\tClass Placeholder", "bindingContext"],
    ["bindingContext: any\tClass StackLayout", "bindingContext"],
    ["requestLayout(): void\tClass Progress", "requestLayout()"],
    ["backgroundImage: string\tClass Border", "backgroundImage"],
    ["visibility: string\tClass EditableTextBase", "visibility"],
    ["clipToBounds: boolean\tClass WrapLayout", "clipToBounds"],
    ["isEnabled: boolean\tClass CustomLayoutView", "isEnabled"],
    ["valueSource: number\tClass PropertyEntry", "valueSource"],
    ["deltaX: number\tInterface PanGestureEventData", "deltaX"],
    ["backgroundColor: Color\tClass Switch", "backgroundColor"],
    ["goBack(): any\tModule ui/frame", "goBack()"],
    ["deltaY: number\tInterface PanGestureEventData", "deltaY"],
    ["bindingContext: any\tClass WrapLayout", "bindingContext"],
    ["idProperty: Property\tClass Switch", "Static idProperty"],
    ["marginBottom: number\tClass StackLayout", "marginBottom"],
    ["_gestureObservers: any\tClass View", "_gestureObservers"],
    ["cssClasses: Set<string>\tClass WrapLayout", "cssClasses"],
    ["isEnabled: boolean\tClass EditableTextBase", "isEnabled"],
    ["marginBottom: number\tClass ContentView", "marginBottom"],
    ["idProperty: Property\tClass Slider", "Static idProperty"],
    ["isLayoutValid: boolean\tClass Progress", "isLayoutValid"],
    ["borderColor: Color\tClass AbsoluteLayout", "borderColor"],
    ["automationText: string\tClass TabView", "automationText"],
    ["cssClasses: Set<string>\tClass ListPicker", "cssClasses"],
    ["Tan: any\tModule color/known-colors", "Tan"],
    ["paddingRight: number\tClass StackLayout", "paddingRight"],
    ["resetValue(): void\tClass PropertyEntry", "resetValue()"],
    ["idProperty: Property\tClass Layout", "Static idProperty"],
    ["loadedEvent: string\tClass Switch", "Static loadedEvent"],
    ["_childrenCount: number\tClass TabView", "_childrenCount"],
    ["getActualSize(): Size\tClass WebView", "getActualSize()"],
    ["bindingContext: any\tClass DockLayout", "bindingContext"],
    ["className: string\tClass ActivityIndicator", "className"],
    ["_nativeView: any\tClass EditableTextBase", "_nativeView"],
    ["_nativeView: any\tClass CustomLayoutView", "_nativeView"],
    ["bindingContext: any\tClass DatePicker", "bindingContext"],
    ["borderRadius: number\tClass ContentView", "borderRadius"],
    ["requestLayout(): void\tClass WebView", "requestLayout()"],
    ["exports: any\tInterface LoadOptions", "Optional exports"],
    ["default: Background\tClass Background", "Static default"],
    ["bindingContext: any\tClass ListPicker", "bindingContext"],
    ["bindingContext: any\tClass GridLayout", "bindingContext"],
    ["backgroundColor: Color\tClass Button", "backgroundColor"],
    ["backgroundImage: string\tClass Style", "backgroundImage"],
    ["_boundsChanged(): void\tClass Style", "_boundsChanged()"],
    ["eventName: string\tInterface LoadEventData", "eventName"],
    ["oldValue: any\tInterface PropertyChangeData", "oldValue"],
    ["marginTop: number\tClass ActivityIndicator", "marginTop"],
    ["minHeight: number\tClass ActivityIndicator", "minHeight"],
    ["newValue: any\tInterface PropertyChangeData", "newValue"],
    ["borderRadius: number\tClass Placeholder", "borderRadius"],
    ["toString(): string\tInterface ParserEvent", "toString()"],
    ["cssClasses: Set<string>\tClass DatePicker", "cssClasses"],
    ["cssClasses: Set<string>\tClass DockLayout", "cssClasses"],
    ["loadedEvent: string\tClass Border", "Static loadedEvent"],
    ["idProperty: Property\tClass Border", "Static idProperty"],
    ["actionBarHidden: boolean\tClass Page", "actionBarHidden"],
    ["clipToBounds: boolean\tClass DockLayout", "clipToBounds"],
    ["_updateLayout(): void\tClass WebView", "_updateLayout()"],
    ["isLayoutValid: boolean\tClass TextView", "isLayoutValid"],
    ["backgroundImage: string\tClass Style", "backgroundImage"],
    ["view: View\tInterface GestureEventDataWithState", "view"],
    ["backgroundImage: string\tClass Frame", "backgroundImage"],
    ["_gestureObservers: any\tClass Page", "_gestureObservers"],
    ["comment: boolean\tInterface Options", "Optional comment"],
    ["cssClasses: Set<string>\tClass GridLayout", "cssClasses"],
    ["clipToBounds: boolean\tClass GridLayout", "clipToBounds"],
    ["requestLayout(): void\tClass TabView", "requestLayout()"],
    ["isLayoutValid: boolean\tClass TextBase", "isLayoutValid"],
    ["_updateLayout(): void\tClass TabView", "_updateLayout()"],
    ["title: string\tInterface LoginOptions", "Optional title"],
    ["getActualSize(): Size\tClass TabView", "getActualSize()"],
    ["eventName: string\tInterface NavigatedData", "eventName"],
    ["loadedEvent: string\tClass Layout", "Static loadedEvent"],
    ["affectsLayout: boolean\tClass Property", "affectsLayout"],
    ["onLoaded(): void\tClass ActivityIndicator", "onLoaded()"],
    ["cssClasses: Set<string>\tClass LayoutBase", "cssClasses"],
    ["cssClasses: Set<string>\tClass TimePicker", "cssClasses"],
    ["affectsLayout: boolean\tClass Property", "affectsLayout"],
    ["automationText: string\tClass WebView", "automationText"],
    ["bindingContext: any\tClass TimePicker", "bindingContext"],
    ["separatorColor: Color\tClass ListView", "separatorColor"],
    ["clipToBounds: boolean\tClass LayoutBase", "clipToBounds"],
    ["isLayoutValid: boolean\tClass HtmlView", "isLayoutValid"],
    ["backgroundImage: string\tClass Image", "backgroundImage"],
    ["cssClasses: Set<string>\tClass ScrollView", "cssClasses"],
    ["onLowMemory(): any\tModule application", "onLowMemory()"],
    ["stop(): any\tClass ControlStateChangeListener", "stop()"],
    ["toString(): string\tClass FormattedString", "toString()"],
    ["component: View\tInterface ComponentModule", "component"],
    ["backgroundImage: string\tClass Label", "backgroundImage"],
    ["backgroundColor: Color\tClass Slider", "backgroundColor"],
    ["widthDIPs: number\tInterface ScreenMetrics", "widthDIPs"],
    ["affectsLayout: boolean\tClass Property", "affectsLayout"],
    ["backgroundColor: Color\tClass Layout", "backgroundColor"],
    ["fontFamily: string\tClass FormattedString", "fontFamily"],
    ["idProperty: Property\tClass Button", "Static idProperty"],
    ["eventName: string\tInterface ItemEventData", "eventName"],
    ["returnKeyType: string\tClass TextField", "returnKeyType"],
    ["bindingContext: any\tClass ActionItem", "bindingContext"],
    ["message: string\tInterface NativeScriptError", "message"],
    ["navigationContext: any\tClass Page", "navigationContext"],
    ["object: Observable\tInterface ScrollEventData", "object"],
    ["enableDownload(): void\tClass Cache", "enableDownload()"],
    ["loadedEvent: string\tClass Slider", "Static loadedEvent"],
    ["_isVisible: boolean\tClass AbsoluteLayout", "_isVisible"],
    ["isLayoutValid: boolean\tClass ListView", "isLayoutValid"],
    ["textAlignment: string\tClass TextField", "textAlignment"],
    ["marginBottom: number\tClass Placeholder", "marginBottom"],
    ["loadedEvent: string\tClass Button", "Static loadedEvent"],
    ["_childrenCount: number\tClass WebView", "_childrenCount"],
    ["isLoaded: boolean\tClass ProxyViewContainer", "isLoaded"],
    ["backgroundColor: Color\tClass Border", "backgroundColor"],
    ["title: string\tInterface AlertOptions", "Optional title"],
    ["borderRadius: number\tClass StackLayout", "borderRadius"],
    ["Red: any\tModule color/known-colors", "Red"],
    ["scale: number\tInterface PinchGestureEventData", "scale"],
    ["bindingContext: any\tClass LayoutBase", "bindingContext"],
    ["bindingContext: any\tClass ScrollView", "bindingContext"],
    ["state: number\tInterface PinchGestureEventData", "state"],
    ["isLayoutValid: boolean\tClass Repeater", "isLayoutValid"],
    ["view: View\tInterface RotationGestureEventData", "view"],
    ["paddingTop: number\tClass AbsoluteLayout", "paddingTop"],
    ["paddingRight: number\tClass LayoutBase", "paddingRight"],
    ["getActualSize(): Size\tClass Slider", "getActualSize()"],
    ["borderRadius: number\tClass GridLayout", "borderRadius"],
    ["onLoaded(): void\tClass CustomLayoutView", "onLoaded()"],
    ["paddingRight: number\tClass WrapLayout", "paddingRight"],
    ["actionView: View\tClass NavigationButton", "actionView"],
    ["typeName: string\tClass ProxyViewContainer", "typeName"],
    ["isAvailable(): Boolean\tModule camera", "isAvailable()"],
    ["idProperty: Property\tClass Image", "Static idProperty"],
    ["requestLayout(): void\tClass Border", "requestLayout()"],
    ["height: number\tInterface CommonLayoutParams", "height"],
    ["cssClasses: Set<string>\tClass SearchBar", "cssClasses"],
    ["bindingContext: any\tClass ActionBar", "bindingContext"],
    ["_childrenCount: number\tClass Slider", "_childrenCount"],
    ["launchEvent: string\tModule application", "launchEvent"],
    ["object: Observable\tInterface ChangedData<T>", "object"],
    ["borderRadius: number\tClass ScrollView", "borderRadius"],
    ["removed: Array<T>\tInterface ChangedData<T>", "removed"],
    ["borderRadius: number\tClass LayoutBase", "borderRadius"],
    ["marginTop: number\tClass CustomLayoutView", "marginTop"],
    ["borderRadius: number\tClass DatePicker", "borderRadius"],
    ["requestLayout(): void\tClass Switch", "requestLayout()"],
    ["marginLeft: number\tClass AbsoluteLayout", "marginLeft"],
    ["cssClasses: Set<string>\tClass ActionBar", "cssClasses"],
    ["timeout: number\tInterface Options", "Optional timeout"],
    ["_createUI(): void\tClass AbsoluteLayout", "_createUI()"],
    ["translateX: number\tClass AbsoluteLayout", "translateX"],
    ["automationText: string\tClass Button", "automationText"],
    ["_childrenCount: number\tClass Switch", "_childrenCount"],
    ["automationText: string\tClass Layout", "automationText"],
    ["marginBottom: number\tClass DockLayout", "marginBottom"],
    ["marginBottom: number\tClass GridLayout", "marginBottom"],
    ["type: GestureTypes\tInterface GestureEventData", "type"],
    ["cssClasses: Set<string>\tClass TextField", "cssClasses"],
    ["paddingRight: number\tClass DockLayout", "paddingRight"],
    ["backgroundColor: Color\tClass Style", "backgroundColor"],
    ["pos: number\tInterface SimpleIdentifierSelector", "pos"],
    ["manufacturer: string\tInterface Device", "manufacturer"],
    ["automationText: string\tClass Switch", "automationText"],
    ["_childrenCount: number\tClass Layout", "_childrenCount"],
    ["className: string\tClass EditableTextBase", "className"],
    ["object: Observable\tInterface DownloadedData", "object"],
    ["isLoaded: boolean\tClass ActivityIndicator", "isLoaded"],
    ["loadedEvent: string\tClass Image", "Static loadedEvent"],
    ["_updateLayout(): void\tClass Slider", "_updateLayout()"],
    ["marginBottom: number\tClass ScrollView", "marginBottom"],
    ["isLayoutValid: boolean\tClass TabView", "isLayoutValid"],
    ["metadata: PropertyMetadata\tClass Property", "metadata"],
    ["_childrenCount: number\tClass Border", "_childrenCount"],
    ["minHeight: number\tClass CustomLayoutView", "minHeight"],
    ["idProperty: Property\tClass Label", "Static idProperty"],
    ["itemsLayout: LayoutBase\tClass Repeater", "itemsLayout"],
    ["_childrenCount: number\tClass Button", "_childrenCount"],
    ["marginBottom: number\tClass LayoutBase", "marginBottom"],
    ["loadedEvent: string\tClass Label", "Static loadedEvent"],
    ["borderRadius: number\tClass Background", "borderRadius"],
    ["typeName: string\tClass AndroidApplication", "typeName"],
    ["visibility: string\tClass AbsoluteLayout", "visibility"],
    ["_updateLayout(): void\tClass Border", "_updateLayout()"],
    ["resumeEvent: string\tModule application", "resumeEvent"],
    ["backgroundImage: string\tClass View", "backgroundImage"],
    ["borderRadius: number\tClass WrapLayout", "borderRadius"],
    ["bindingContext: any\tClass TextField", "bindingContext"],
    ["minWidth: number\tClass ProxyViewContainer", "minWidth"],
    ["root: View\tInterface LaunchEventData", "Optional root"],
    ["spanModifiers: Array<any>\tClass Span", "spanModifiers"],
    ["borderRadius: number\tClass DockLayout", "borderRadius"],
    ["object: Observable\tInterface ChangedData<T>", "object"],
    ["removed: Array<T>\tInterface ChangedData<T>", "removed"],
    ["marginBottom: number\tClass DatePicker", "marginBottom"],
    ["backgroundColor: Color\tClass Label", "backgroundColor"],
    ["backgroundColor: Color\tClass Frame", "backgroundColor"],
    ["backgroundColor: Color\tClass Image", "backgroundColor"],
    ["getActualSize(): Size\tClass Border", "getActualSize()"],
    ["_updateLayout(): void\tClass Layout", "_updateLayout()"],
    ["method: string\tInterface HttpRequestOptions", "method"],
    ["getActualSize(): Size\tClass Layout", "getActualSize()"],
    ["backgroundImage: string\tClass Page", "backgroundImage"],
    ["marginRight: number\tClass SegmentedBar", "marginRight"],
    ["navDepth: number\tInterface BackstackEntry", "navDepth"],
    ["textAlignment: string\tClass TextView", "textAlignment"],
    ["metadata: PropertyMetadata\tClass Property", "metadata"],
    ["requestLayout(): void\tClass Layout", "requestLayout()"],
    ["android: any\tInterface PanGestureEventData", "android"],
    ["translateY: number\tClass AbsoluteLayout", "translateY"],
    ["automationText: string\tClass Border", "automationText"],
    ["isLayoutValid: boolean\tClass WebView", "isLayoutValid"],
    ["className: string\tClass CustomLayoutView", "className"],
    ["_updateLayout(): void\tClass Button", "_updateLayout()"],
    ["_updateLayout(): void\tClass Switch", "_updateLayout()"],
    ["requestLayout(): void\tClass Slider", "requestLayout()"],
    ["borderRadius: number\tClass TimePicker", "borderRadius"],
    ["eventName: string\tInterface ItemsLoading", "eventName"],
    ["marginTop: number\tClass EditableTextBase", "marginTop"],
    ["getActualSize(): Size\tClass Switch", "getActualSize()"],
    ["onUnloaded(): void\tClass SegmentedBar", "onUnloaded()"],
    ["cssClass: string\tClass ProxyViewContainer", "cssClass"],
    ["returnKeyType: string\tClass TextView", "returnKeyType"],
    ["paddingRight: number\tClass GridLayout", "paddingRight"],
    ["requestLayout(): void\tClass Button", "requestLayout()"],
    ["bindingContext: any\tClass SearchBar", "bindingContext"],
    ["marginBottom: number\tClass WrapLayout", "marginBottom"],
    ["getActualSize(): Size\tClass Button", "getActualSize()"],
    ["idProperty: Property\tClass Frame", "Static idProperty"],
    ["marginBottom: number\tClass TimePicker", "marginBottom"],
    ["typeName: string\tClass ObservableArray<T>", "typeName"],
    ["backgroundColor: Color\tClass Style", "backgroundColor"],
    ["metadata: PropertyMetadata\tClass Property", "metadata"],
    ["onLoaded(): void\tClass EditableTextBase", "onLoaded()"],
    ["automationText: string\tClass Slider", "automationText"],
    ["borderRadius: number\tClass ListPicker", "borderRadius"],
    ["isStarted: boolean\tClass LocationManager", "isStarted"],
    ["minHeight: number\tClass EditableTextBase", "minHeight"],
    ["marginBottom: number\tClass ListPicker", "marginBottom"],
    ["textAlignment: string\tClass TextBase", "textAlignment"],
    ["borderWidth: number\tClass SegmentedBar", "borderWidth"],
    ["loadedEvent: string\tClass Frame", "Static loadedEvent"],
    ["backgroundSize: string\tClass Style", "backgroundSize"],
    ["isLoaded: boolean\tClass EditableTextBase", "isLoaded"],
    ["affectsStyle: boolean\tClass Property", "affectsStyle"],
    ["isLoaded: boolean\tClass CustomLayoutView", "isLoaded"],
    ["isLayoutValid: boolean\tClass Border", "isLayoutValid"],
    ["foregroundColor: Color\tClass Span", "foregroundColor"],
    ["position: Position\tInterface Declaration", "position"],
    ["tapEvent: string\tClass ActionItem", "Static tapEvent"],
    ["bindingContext: any\tClass Bindable", "bindingContext"],
    ["borderRadius: number\tClass SearchBar", "borderRadius"],
    ["backgroundColor: Color\tClass Span", "backgroundColor"],
    ["affectsStyle: boolean\tClass Property", "affectsStyle"],
    ["onUnloaded(): void\tClass StackLayout", "onUnloaded()"],
    ["_isVisible: boolean\tClass SegmentedBar", "_isVisible"],
    ["bindingContext: any\tClass HtmlView", "bindingContext"],
    ["_nativeView: any\tClass AbsoluteLayout", "_nativeView"],
    ["cssClasses: Set<string>\tClass HtmlView", "cssClasses"],
    ["property: K\tInterface KeyValuePair<K, V>", "property"],
    ["paddingLeft: number\tClass StackLayout", "paddingLeft"],
    ["nativeApp: any\tClass AndroidApplication", "nativeApp"],
    ["marginBottom: number\tClass SearchBar", "marginBottom"],
    ["scrollY: number\tInterface ScrollEventData", "scrollY"],
    ["image: ImageSource\tInterface DownloadedData", "image"],
    ["object: Observable\tInterface LoadEventData", "object"],
    ["editable: boolean\tClass EditableTextBase", "editable"],
    ["source: boolean\tInterface Options", "Optional source"],
    ["tokens: boolean\tInterface Options", "Optional tokens"],
    ["ident: string\tInterface PseudoClassSelector", "ident"],
    ["orientation: string\tClass StackLayout", "orientation"],
    ["borderWidth: number\tClass StackLayout", "borderWidth"],
    ["borderColor: Color\tClass SegmentedBar", "borderColor"],
    ["marginRight: number\tClass StackLayout", "marginRight"],
    ["isEnabled: boolean\tClass AbsoluteLayout", "isEnabled"],
    ["position: Position\tInterface ParserEvent", "position"],
    ["bindingContext: any\tClass TextBase", "bindingContext"],
    ["minWidth: number\tClass ActivityIndicator", "minWidth"],
    ["idProperty: Property\tClass Page", "Static idProperty"],
    ["scrollX: number\tInterface ScrollEventData", "scrollX"],
    ["cssClass: string\tClass ActivityIndicator", "cssClass"],
    ["_updateLayout(): void\tClass Label", "_updateLayout()"],
    ["object: Observable\tInterface NavigatedData", "object"],
    ["cssClasses: Set<string>\tClass Progress", "cssClasses"],
    ["loadedEvent: string\tClass Page", "Static loadedEvent"],
    ["isLayoutValid: boolean\tClass Button", "isLayoutValid"],
    ["object: any\tInterface ApplicationEventData", "object"],
    ["bindingContext: any\tClass ListView", "bindingContext"],
    ["nativeApp: any\tInterface iOSApplication", "nativeApp"],
    ["automationText: string\tClass Frame", "automationText"],
    ["cssClasses: Set<string>\tClass TextBase", "cssClasses"],
    ["focus(): boolean\tClass ProxyViewContainer", "focus()"],
    ["typeName: string\tClass ActivityIndicator", "typeName"],
    ["bindingContext: any\tClass Repeater", "bindingContext"],
    ["bindingContext: any\tClass TextView", "bindingContext"],
    ["automationText: string\tClass Label", "automationText"],
    ["isLayoutValid: boolean\tClass Switch", "isLayoutValid"],
    ["_cssState: any\tClass ProxyViewContainer", "_cssState"],
    ["backgroundColor: Color\tClass View", "backgroundColor"],
    ["selectedIndex: number\tClass TabView", "selectedIndex"],
    ["automationText: string\tClass Image", "automationText"],
    ["isLayoutValid: boolean\tClass Layout", "isLayoutValid"],
    ["selectors: string[]\tInterface Keyframes", "selectors"],
    ["_childrenCount: number\tClass Image", "_childrenCount"],
    ["backgroundColor: Color\tClass Page", "backgroundColor"],
    ["requestLayout(): void\tClass Label", "requestLayout()"],
    ["requestLayout(): void\tClass Frame", "requestLayout()"],
    ["getActualSize(): Size\tClass Frame", "getActualSize()"],
    ["_updateLayout(): void\tClass Frame", "_updateLayout()"],
    ["getActualSize(): Size\tClass Label", "getActualSize()"],
    ["cssClasses: Set<string>\tClass TextView", "cssClasses"],
    ["reverse(): T[]\tClass ObservableArray<T>", "reverse()"],
    ["underline: number\tClass FormattedString", "underline"],
    ["eventType: string\tInterface ParserEvent", "eventType"],
    ["object: Observable\tInterface ItemEventData", "object"],
    ["clear(): void\tModule application-settings", "clear()"],
    ["borderWidth: number\tClass Placeholder", "borderWidth"],
    ["requestLayout(): void\tClass Image", "requestLayout()"],
    ["borderWidth: number\tClass ContentView", "borderWidth"],
    ["_childrenCount: number\tClass Label", "_childrenCount"],
    ["marginBottom: number\tClass TextField", "marginBottom"],
    ["bindingContext: any\tClass Progress", "bindingContext"],
    ["cssClasses: Set<string>\tClass Repeater", "cssClasses"],
    ["textDecoration: string\tClass Style", "textDecoration"],
    ["marginRight: number\tClass Placeholder", "marginRight"],
    ["getActualSize(): Size\tClass Image", "getActualSize()"],
    ["onUnloaded(): void\tClass ContentView", "onUnloaded()"],
    ["onUnloaded(): void\tClass Placeholder", "onUnloaded()"],
    ["selectors: SelectorCore[]\tClass RuleSet", "selectors"],
    ["manager: any\tInterface iOSLocationManager", "manager"],
    ["marginRight: number\tClass ContentView", "marginRight"],
    ["_updateLayout(): void\tClass Image", "_updateLayout()"],
    ["borderRadius: number\tClass ActionBar", "borderRadius"],
    ["marginBottom: number\tClass ActionBar", "marginBottom"],
    ["loadedEvent: string\tClass View", "Static loadedEvent"],
    ["affectsStyle: boolean\tClass Property", "affectsStyle"],
    ["ios: iOSLocationManager\tClass LocationManager", "ios"],
    ["state: number\tInterface PanGestureEventData", "state"],
    ["_childrenCount: number\tClass Frame", "_childrenCount"],
    ["idProperty: Property\tClass View", "Static idProperty"],
    ["isLayoutValid: boolean\tClass Slider", "isLayoutValid"],
    ["borderRadius: number\tClass TextField", "borderRadius"],
    ["cssClasses: Set<string>\tClass ListView", "cssClasses"],
    ["keyboardType: string\tClass TextField", "keyboardType"],
    ["backgroundSize: string\tClass Style", "backgroundSize"],
    ["textDecoration: string\tClass Style", "textDecoration"],
    ["borderWidth: number\tClass TimePicker", "borderWidth"],
    ["borderRadius: number\tClass HtmlView", "borderRadius"],
    ["bindingContext: any\tClass WebView", "bindingContext"],
    ["CDATA: string\tClass ParserEventType", "Static CDATA"],
    ["posY: number\tInterface BackgroundDrawParams", "posY"],
    ["minWidth: number\tClass CustomLayoutView", "minWidth"],
    ["marginRight: number\tClass TimePicker", "marginRight"],
    ["onUnloaded(): void\tClass WrapLayout", "onUnloaded()"],
    ["isLayoutValid: boolean\tClass Label", "isLayoutValid"],
    ["marginBottom: number\tClass Progress", "marginBottom"],
    ["marginRight: number\tClass DatePicker", "marginRight"],
    ["marginBottom: number\tClass ListView", "marginBottom"],
    ["cssType: string\tClass ProxyViewContainer", "cssType"],
    ["posX: number\tInterface BackgroundDrawParams", "posX"],
    ["typeName: string\tClass CustomLayoutView", "typeName"],
    ["borderRadius: number\tClass Progress", "borderRadius"],
    ["borderRadius: number\tClass ListView", "borderRadius"],
    ["data: string\tInterface ParserEvent", "Optional data"],
    ["cssClass: string\tClass CustomLayoutView", "cssClass"],
    ["marginRight: number\tClass GridLayout", "marginRight"],
    ["onLoaded(): void\tClass AbsoluteLayout", "onLoaded()"],
    ["autocorrect: boolean\tClass TextField", "autocorrect"],
    ["paddingLeft: number\tClass GridLayout", "paddingLeft"],
    ["actualLength: number\tClass ItemSpec", "actualLength"],
    ["onUnloaded(): void\tClass ScrollView", "onUnloaded()"],
    ["ios: any\tInterface GestureEventDataWithState", "ios"],
    ["typeName: string\tInterface AndroidFrame", "typeName"],
    ["_updateLayout(): void\tClass Page", "_updateLayout()"],
    ["borderWidth: number\tClass LayoutBase", "borderWidth"],
    ["borderWidth: number\tClass Background", "borderWidth"],
    ["requestLayout(): void\tClass Page", "requestLayout()"],
    ["getActualSize(): Size\tClass Page", "getActualSize()"],
    ["width: number\tInterface CommonLayoutParams", "width"],
    ["_isVisible: boolean\tClass ContentView", "_isVisible"],
    ["borderColor: Color\tClass ContentView", "borderColor"],
    ["borderWidth: number\tClass GridLayout", "borderWidth"],
    ["marginRight: number\tClass LayoutBase", "marginRight"],
    ["gridUnitType: string\tClass ItemSpec", "gridUnitType"],
    ["borderWidth: number\tClass DatePicker", "borderWidth"],
    ["marginBottom: number\tClass TextView", "marginBottom"],
    ["keyboardType: string\tClass TextView", "keyboardType"],
    ["marginRight: number\tClass WrapLayout", "marginRight"],
    ["className: string\tClass AbsoluteLayout", "className"],
    ["marginBottom: number\tClass HtmlView", "marginBottom"],
    ["paddingLeft: number\tClass WrapLayout", "paddingLeft"],
    ["orientation: string\tClass WrapLayout", "orientation"],
    ["borderWidth: number\tClass WrapLayout", "borderWidth"],
    ["onUnloaded(): void\tClass LayoutBase", "onUnloaded()"],
    ["typeName: string\tClass NavigationButton", "typeName"],
    ["onUnloaded(): void\tClass GridLayout", "onUnloaded()"],
    ["paddingLeft: number\tClass LayoutBase", "paddingLeft"],
    ["removeRows(): void\tClass GridLayout", "removeRows()"],
    ["onUnloaded(): void\tClass TimePicker", "onUnloaded()"],
    ["borderRadius: number\tClass TextView", "borderRadius"],
    ["marginTop: number\tClass AbsoluteLayout", "marginTop"],
    ["minHeight: number\tClass AbsoluteLayout", "minHeight"],
    ["placeholder: ImageSource\tClass Cache", "placeholder"],
    ["borderWidth: number\tClass ScrollView", "borderWidth"],
    ["isLayoutValid: boolean\tClass Frame", "isLayoutValid"],
    ["borderWidth: number\tClass DockLayout", "borderWidth"],
    ["_cssState: any\tClass ActivityIndicator", "_cssState"],
    ["canGoForward: boolean\tClass WebView", "canGoForward"],
    ["fontSize: number\tClass EditableTextBase", "fontSize"],
    ["cssClass: string\tClass EditableTextBase", "cssClass"],
    ["marginBottom: number\tClass TextBase", "marginBottom"],
    ["onUnloaded(): void\tClass ListPicker", "onUnloaded()"],
    ["onUnloaded(): void\tClass DockLayout", "onUnloaded()"],
    ["declarations: Node[]\tInterface Rule", "declarations"],
    ["object: Observable\tInterface ItemsLoading", "object"],
    ["typeName: string\tClass SegmentedBarItem", "typeName"],
    ["paddingBottom: number\tClass Layout", "paddingBottom"],
    ["selectedColor: Color\tClass TabView", "selectedColor"],
    ["_childrenCount: number\tClass View", "_childrenCount"],
    ["automationText: string\tClass View", "automationText"],
    ["automationText: string\tClass Page", "automationText"],
    ["borderRadius: number\tClass Repeater", "borderRadius"],
    ["borderRadius: number\tClass TextBase", "borderRadius"],
    ["_isVisible: boolean\tClass StackLayout", "_isVisible"],
    ["translateX: number\tClass SegmentedBar", "translateX"],
    ["paddingLeft: number\tClass DockLayout", "paddingLeft"],
    ["_isVisible: boolean\tClass Placeholder", "_isVisible"],
    ["marginLeft: number\tClass SegmentedBar", "marginLeft"],
    ["borderWidth: number\tClass ListPicker", "borderWidth"],
    ["marginRight: number\tClass ListPicker", "marginRight"],
    ["borderColor: Color\tClass Placeholder", "borderColor"],
    ["translateY: number\tClass SegmentedBar", "translateY"],
    ["visibility: string\tClass SegmentedBar", "visibility"],
    ["mainModule: string\tModule application", "mainModule"],
    ["borderColor: Color\tClass StackLayout", "borderColor"],
    ["minWidth: number\tClass EditableTextBase", "minWidth"],
    ["typeName: string\tClass EditableTextBase", "typeName"],
    ["_createUI(): void\tClass SegmentedBar", "_createUI()"],
    ["marginBottom: number\tClass Repeater", "marginBottom"],
    ["marginRight: number\tClass DockLayout", "marginRight"],
    ["focus(): boolean\tClass ActivityIndicator", "focus()"],
    ["_childrenCount: number\tClass Page", "_childrenCount"],
    ["imageSource: ImageSource\tClass Image", "imageSource"],
    ["marginRight: number\tClass ScrollView", "marginRight"],
    ["opacity: number\tClass ProxyViewContainer", "opacity"],
    ["duration: number\tInterface KeyframeInfo", "duration"],
    ["cssClasses: Set<string>\tClass WebView", "cssClasses"],
    ["isLayoutValid: boolean\tClass Image", "isLayoutValid"],
    ["onUnloaded(): void\tClass DatePicker", "onUnloaded()"],
    ["originY: number\tClass ProxyViewContainer", "originY"],
    ["orientation: string\tClass ScrollView", "orientation"],
    ["fontAttributes: number\tClass Span", "fontAttributes"],
    ["_updateLayout(): void\tClass View", "_updateLayout()"],
    ["getActualSize(): Size\tClass View", "getActualSize()"],
    ["padding: string\tClass ProxyViewContainer", "padding"],
    ["requestLayout(): void\tClass View", "requestLayout()"],
    ["originX: number\tClass ProxyViewContainer", "originX"],
    ["bindingContext: any\tClass TabView", "bindingContext"],
    ["cssClasses: Set<string>\tClass TabView", "cssClasses"],
    ["textAlignment: string\tClass Style", "textAlignment"],
    ["inheritable: boolean\tClass Property", "inheritable"],
    ["paddingBottom: number\tClass Style", "paddingBottom"],
    ["value: number\tInterface CSSValue", "Optional value"],
    ["translateX: number\tClass ContentView", "translateX"],
    ["letterSpacing: number\tClass Style", "letterSpacing"],
    ["marginRight: number\tClass SearchBar", "marginRight"],
    ["marginLeft: number\tClass ContentView", "marginLeft"],
    ["cancel: function(): void\tClass Animation", "cancel"],
    ["android: any\tInterface GestureEventData", "android"],
    ["marginRight: number\tClass ActionBar", "marginRight"],
    ["onUnloaded(): void\tClass SearchBar", "onUnloaded()"],
    ["textTransform: string\tClass Style", "textTransform"],
    ["translateY: number\tClass ContentView", "translateY"],
    ["marginBottom: number\tClass WebView", "marginBottom"],
    ["isScrolling: boolean\tClass ListView", "isScrolling"],
    ["borderColor: Color\tClass ListPicker", "borderColor"],
    ["borderColor: Color\tClass Background", "borderColor"],
    ["translateX: number\tClass Placeholder", "translateX"],
    ["marginLeft: number\tClass Placeholder", "marginLeft"],
    ["focus(): boolean\tClass EditableTextBase", "focus()"],
    ["borderColor: Color\tClass GridLayout", "borderColor"],
    ["_isVisible: boolean\tClass ListPicker", "_isVisible"],
    ["typeName: string\tClass VirtualArray<T>", "typeName"],
    ["translateY: number\tClass Placeholder", "translateY"],
    ["borderWidth: number\tClass ActionBar", "borderWidth"],
    ["loadSize: number\tClass VirtualArray<T>", "loadSize"],
    ["actionBar: any\tInterface AndroidFrame", "actionBar"],
    ["onUnloaded(): void\tClass TextField", "onUnloaded()"],
    ["visibility: string\tClass Placeholder", "visibility"],
    ["eventName: string\tInterface EventData", "eventName"],
    ["borderRadius: number\tClass WebView", "borderRadius"],
    ["iconSource: string\tClass TabViewItem", "iconSource"],
    ["bindingContext: any\tClass Slider", "bindingContext"],
    ["_isVisible: boolean\tClass WrapLayout", "_isVisible"],
    ["borderColor: Color\tClass WrapLayout", "borderColor"],
    ["paused: boolean\tClass AndroidApplication", "paused"],
    ["cssClasses: Set<string>\tClass Switch", "cssClasses"],
    ["isLoaded: boolean\tClass AbsoluteLayout", "isLoaded"],
    ["translateX: number\tClass StackLayout", "translateX"],
    ["autocorrect: boolean\tClass TextView", "autocorrect"],
    ["typeName: string\tClass FormattedString", "typeName"],
    ["height: number\tInterface PlatformContext", "height"],
    ["clearWriters(): any\tModule trace", "clearWriters()"],
    ["paddingTop: number\tClass StackLayout", "paddingTop"],
    ["borderColor: Color\tClass TimePicker", "borderColor"],
    ["item: any\tInterface AndroidOptionEventData", "item"],
    ["inheritable: boolean\tClass Property", "inheritable"],
    ["position: Position\tInterface Keyframes", "position"],
    ["borderRadius: number\tClass TabView", "borderRadius"],
    ["_context: any\tClass ProxyViewContainer", "_context"],
    ["marginLeft: number\tClass StackLayout", "marginLeft"],
    ["isBack: boolean\tInterface BackstackEntry", "isBack"],
    ["_isVisible: boolean\tClass TimePicker", "_isVisible"],
    ["stopLoading(): void\tClass WebView", "stopLoading()"],
    ["_cssState: any\tClass EditableTextBase", "_cssState"],
    ["onSuspend(): any\tModule application", "onSuspend()"],
    ["delegate: any\tInterface iOSApplication", "delegate"],
    ["isLayoutValid: boolean\tClass View", "isLayoutValid"],
    ["context: any\tInterface ShownModallyData", "context"],
    ["onUnloaded(): void\tClass ActionBar", "onUnloaded()"],
    ["marginBottom: number\tClass TabView", "marginBottom"],
    ["cssClasses: Set<string>\tClass Slider", "cssClasses"],
    ["_createUI(): void\tClass StackLayout", "_createUI()"],
    ["bindingContext: any\tClass Border", "bindingContext"],
    ["bindingContext: any\tClass Switch", "bindingContext"],
    ["visibility: string\tClass StackLayout", "visibility"],
    ["cssClasses: Set<string>\tClass Button", "cssClasses"],
    ["cssType: string\tClass ActivityIndicator", "cssType"],
    ["fontSize: number\tClass FormattedString", "fontSize"],
    ["opacity: number\tClass ActivityIndicator", "opacity"],
    ["originX: number\tClass ActivityIndicator", "originX"],
    ["textAlignment: string\tClass Label", "textAlignment"],
    ["cssClasses: Set<string>\tClass Border", "cssClasses"],
    ["translateY: number\tClass StackLayout", "translateY"],
    ["originY: number\tClass ActivityIndicator", "originY"],
    ["bindingContext: any\tClass Button", "bindingContext"],
    ["headers: Headers\tInterface HttpResponse", "headers"],
    ["_nativeView: any\tClass SegmentedBar", "_nativeView"],
    ["paddingBottom: number\tClass Style", "paddingBottom"],
    ["_createUI(): void\tClass Placeholder", "_createUI()"],
    ["borderWidth: number\tClass TextField", "borderWidth"],
    ["borderWidth: number\tClass SearchBar", "borderWidth"],
    ["view: View\tInterface SwipeGestureEventData", "view"],
    ["_isVisible: boolean\tClass DatePicker", "_isVisible"],
    ["borderColor: Color\tClass ScrollView", "borderColor"],
    ["marginRight: number\tClass TextField", "marginRight"],
    ["ios: IOSActionItemSettings\tClass ActionItem", "ios"],
    ["_isVisible: boolean\tClass ScrollView", "_isVisible"],
    ["isEnabled: boolean\tClass SegmentedBar", "isEnabled"],
    ["borderColor: Color\tClass DatePicker", "borderColor"],
    ["_cssState: any\tClass CustomLayoutView", "_cssState"],
    ["password: string\tInterface LoginResult", "password"],
    ["view: View\tInterface PinchGestureEventData", "view"],
    ["range: boolean\tInterface Options", "Optional range"],
    ["delay: number\tClass KeyframeAnimationInfo", "delay"],
    ["letterSpacing: number\tClass Style", "letterSpacing"],
    ["view: View\tInterface TouchGestureEventData", "view"],
    ["cssType: string\tInterface Node", "Optional cssType"],
    ["inheritable: boolean\tClass Property", "inheritable"],
    ["_isVisible: boolean\tClass DockLayout", "_isVisible"],
    ["focus(): boolean\tClass CustomLayoutView", "focus()"],
    ["ios: any\tInterface RotationGestureEventData", "ios"],
    ["bindingContext: any\tClass Layout", "bindingContext"],
    ["borderColor: Color\tClass DockLayout", "borderColor"],
    ["userName: string\tInterface LoginResult", "userName"],
    ["textAlignment: string\tClass Style", "textAlignment"],
    ["property: string\tInterface Declaration", "property"],
    ["clipToBounds: boolean\tClass Layout", "clipToBounds"],
    ["property: string\tInterface Declaration", "property"],
    ["visibility: string\tClass ContentView", "visibility"],
    ["_isVisible: boolean\tClass LayoutBase", "_isVisible"],
    ["isLayoutValid: boolean\tClass Page", "isLayoutValid"],
    ["_createUI(): void\tClass ContentView", "_createUI()"],
    ["_isVisible: boolean\tClass GridLayout", "_isVisible"],
    ["cssClasses: Set<string>\tClass Layout", "cssClasses"],
    ["borderColor: Color\tClass LayoutBase", "borderColor"],
    ["textTransform: string\tClass Style", "textTransform"],
    ["actionBar: ActionBar\tClass ActionItem", "actionBar"],
    ["ios: any\tInterface LaunchEventData", "Optional ios"],
    ["_createUI(): void\tClass TimePicker", "_createUI()"],
    ["marginLeft: number\tClass ListPicker", "marginLeft"],
    ["translateX: number\tClass LayoutBase", "translateX"],
    ["marginRight: number\tClass ListView", "marginRight"],
    ["borderRadius: number\tClass Switch", "borderRadius"],
    ["action: string\tInterface ChangedData<T>", "action"],
    ["action: string\tInterface ChangedData<T>", "action"],
    ["onUnloaded(): void\tClass TextView", "onUnloaded()"],
    ["visibility: string\tClass LayoutBase", "visibility"],
    ["translateY: number\tClass LayoutBase", "translateY"],
    ["visibility: string\tClass TimePicker", "visibility"],
    ["minWidth: number\tClass AbsoluteLayout", "minWidth"],
    ["cssClass: string\tClass AbsoluteLayout", "cssClass"],
    ["_createUI(): void\tClass ScrollView", "_createUI()"],
    ["scaleY: number\tClass ProxyViewContainer", "scaleY"],
    ["paddingTop: number\tClass LayoutBase", "paddingTop"],
    ["marginBottom: number\tClass Button", "marginBottom"],
    ["borderWidth: number\tClass Progress", "borderWidth"],
    ["_domId: number\tClass ProxyViewContainer", "_domId"],
    ["onUnloaded(): void\tClass ListView", "onUnloaded()"],
    ["_context: any\tClass ActivityIndicator", "_context"],
    ["marginBottom: number\tClass Border", "marginBottom"],
    ["onUnloaded(): void\tClass Repeater", "onUnloaded()"],
    ["isEnabled: boolean\tClass Placeholder", "isEnabled"],
    ["options: number\tClass PropertyMetadata", "options"],
    ["borderRadius: number\tClass Button", "borderRadius"],
    ["marginLeft: number\tClass TimePicker", "marginLeft"],
    ["translateY: number\tClass TimePicker", "translateY"],
    ["marginBottom: number\tClass Layout", "marginBottom"],
    ["localValue: any\tClass PropertyEntry", "localValue"],
    ["_createUI(): void\tClass DockLayout", "_createUI()"],
    ["paddingTop: number\tClass WrapLayout", "paddingTop"],
    ["length: number\tClass ObservableArray<T>", "length"],
    ["marginBottom: number\tClass Switch", "marginBottom"],
    ["bindingContext: any\tClass Image", "bindingContext"],
    ["strikethrough: number\tClass Span", "strikethrough"],
    ["scaleX: number\tClass ProxyViewContainer", "scaleX"],
    ["Text: string\tClass ParserEventType", "Static Text"],
    ["itemHeight: number\tClass WrapLayout", "itemHeight"],
    ["marginTop: number\tClass SegmentedBar", "marginTop"],
    ["marginRight: number\tClass TextView", "marginRight"],
    ["rotate: number\tClass ProxyViewContainer", "rotate"],
    ["marginRight: number\tClass Progress", "marginRight"],
    ["paddingRight: number\tClass Layout", "paddingRight"],
    ["borderWidth: number\tClass HtmlView", "borderWidth"],
    ["borderWidth: number\tClass TextView", "borderWidth"],
    ["onUnloaded(): void\tClass TextBase", "onUnloaded()"],
    ["_createUI(): void\tClass LayoutBase", "_createUI()"],
    ["borderRadius: number\tClass Layout", "borderRadius"],
    ["translateX: number\tClass TimePicker", "translateX"],
    ["marginLeft: number\tClass ScrollView", "marginLeft"],
    ["cssClasses: Set<string>\tClass Image", "cssClasses"],
    ["translateY: number\tClass WrapLayout", "translateY"],
    ["translateX: number\tClass WrapLayout", "translateX"],
    ["visibility: string\tClass WrapLayout", "visibility"],
    ["marginRight: number\tClass HtmlView", "marginRight"],
    ["marginLeft: number\tClass WrapLayout", "marginLeft"],
    ["cssType: string\tClass CustomLayoutView", "cssType"],
    ["isEnabled: boolean\tClass StackLayout", "isEnabled"],
    ["borderWidth: number\tClass Repeater", "borderWidth"],
    ["originY: number\tClass EditableTextBase", "originY"],
    ["originX: number\tClass EditableTextBase", "originX"],
    ["opacity: number\tClass EditableTextBase", "opacity"],
    ["value: any\tInterface KeyframeDeclaration", "value"],
    ["cssClasses: Set<string>\tClass Label", "cssClasses"],
    ["_nativeView: any\tClass ContentView", "_nativeView"],
    ["margin: string\tClass ProxyViewContainer", "margin"],
    ["borderWidth: number\tClass ListView", "borderWidth"],
    ["translateY: number\tClass ScrollView", "translateY"],
    ["translateX: number\tClass DatePicker", "translateX"],
    ["translateX: number\tClass ScrollView", "translateX"],
    ["_createUI(): void\tClass GridLayout", "_createUI()"],
    ["exports: any\tInterface ComponentModule", "exports"],
    ["minHeight: number\tClass SegmentedBar", "minHeight"],
    ["type: GestureTypes\tClass GesturesObserver", "type"],
    ["visibility: string\tClass ActionItem", "visibility"],
    ["_isEmpty(): boolean\tClass ActionBar", "_isEmpty()"],
    ["typeName: string\tClass AbsoluteLayout", "typeName"],
    ["_createUI(): void\tClass ListPicker", "_createUI()"],
    ["height: number\tClass ProxyViewContainer", "height"],
    ["borderColor: Color\tClass ActionBar", "borderColor"],
    ["paddingTop: number\tClass DockLayout", "paddingTop"],
    ["_beginUpdate(): any\tClass Style", "_beginUpdate()"],
    ["visibility: string\tClass ListPicker", "visibility"],
    ["_isVisible: boolean\tClass ActionBar", "_isVisible"],
    ["_nativeView: any\tClass StackLayout", "_nativeView"],
    ["translateX: number\tClass ListPicker", "translateX"],
    ["translateY: number\tClass ListPicker", "translateY"],
    ["marginRight: number\tClass Repeater", "marginRight"],
    ["marginLeft: number\tClass DockLayout", "marginLeft"],
    ["_nativeView: any\tClass Placeholder", "_nativeView"],
    ["cancel(): void\tClass AnimationPromise", "cancel()"],
    ["toString(): string\tClass Transition", "toString()"],
    ["isEnabled: boolean\tClass ContentView", "isEnabled"],
    ["visibility: string\tClass ScrollView", "visibility"],
    ["marginLeft: number\tClass DatePicker", "marginLeft"],
    ["result: any\tInterface NativeValueResult", "result"],
    ["options: number\tClass PropertyMetadata", "options"],
    ["exitEvent: string\tModule application", "exitEvent"],
    ["marginLeft: number\tClass GridLayout", "marginLeft"],
    ["borderRadius: number\tClass Slider", "borderRadius"],
    ["visibility: string\tClass DatePicker", "visibility"],
    ["_createUI(): void\tClass DatePicker", "_createUI()"],
    ["GC(): any\tModule utils/utils", "GC()"],
    ["marginBottom: number\tClass Slider", "marginBottom"],
    ["opacity: number\tClass CustomLayoutView", "opacity"],
    ["visibility: string\tClass DockLayout", "visibility"],
    ["marginRight: number\tClass TextBase", "marginRight"],
    ["_isVisible: boolean\tClass TextField", "_isVisible"],
    ["cssClasses: Set<string>\tClass Frame", "cssClasses"],
    ["translateX: number\tClass GridLayout", "translateX"],
    ["sdkVersion: string\tInterface Device", "sdkVersion"],
    ["cornerRadius: number\tClass Border", "cornerRadius"],
    ["onLoaded(): void\tClass SegmentedBar", "onLoaded()"],
    ["visibility: string\tClass GridLayout", "visibility"],
    ["marginLeft: number\tClass LayoutBase", "marginLeft"],
    ["translateY: number\tClass GridLayout", "translateY"],
    ["onUnloaded(): void\tClass Progress", "onUnloaded()"],
    ["borderRadius: number\tClass Border", "borderRadius"],
    ["_createUI(): void\tClass WrapLayout", "_createUI()"],
    ["className: string\tClass SegmentedBar", "className"],
    ["borderColor: Color\tClass TextField", "borderColor"],
    ["translateX: number\tClass DockLayout", "translateX"],
    ["translateY: number\tClass DatePicker", "translateY"],
    ["_isVisible: boolean\tClass SearchBar", "_isVisible"],
    ["_beginUpdate(): any\tClass Style", "_beginUpdate()"],
    ["borderColor: Color\tClass SearchBar", "borderColor"],
    ["borderWidth: number\tClass TextBase", "borderWidth"],
    ["bindingContext: any\tClass Label", "bindingContext"],
    ["page: Page\tInterface LoadOptions", "Optional page"],
    ["bindingContext: any\tClass Frame", "bindingContext"],
    ["onUnloaded(): void\tClass HtmlView", "onUnloaded()"],
    ["originX: number\tClass CustomLayoutView", "originX"],
    ["paddingTop: number\tClass GridLayout", "paddingTop"],
    ["_raiseTap(): void\tClass ActionItem", "_raiseTap()"],
    ["originY: number\tClass CustomLayoutView", "originY"],
    ["deviceType: string\tInterface Device", "deviceType"],
    ["cssType: string\tClass EditableTextBase", "cssType"],
    ["translateY: number\tClass DockLayout", "translateY"],
    ["bindingContext: any\tClass Span", "bindingContext"],
    ["borderRadius: number\tClass Label", "borderRadius"],
    ["marginTop: number\tClass Placeholder", "marginTop"],
    ["borderWidth: number\tClass WebView", "borderWidth"],
    ["minHeight: number\tClass Placeholder", "minHeight"],
    ["marginRight: number\tClass WebView", "marginRight"],
    ["name: string\tClass KeyframeAnimationInfo", "name"],
    ["marginBottom: number\tClass Frame", "marginBottom"],
    ["marginBottom: number\tClass Image", "marginBottom"],
    ["borderColor: Color\tClass TextBase", "borderColor"],
    ["onResume(): any\tModule application", "onResume()"],
    ["filter: string\tInterface EventListener", "filter"],
    ["_isVisible: boolean\tClass TextBase", "_isVisible"],
    ["borderColor: Color\tClass Repeater", "borderColor"],
    ["borderRadius: number\tClass Frame", "borderRadius"],
    ["margin: string\tClass ActivityIndicator", "margin"],
    ["rotate: number\tClass ActivityIndicator", "rotate"],
    ["scaleX: number\tClass ActivityIndicator", "scaleX"],
    ["scaleY: number\tClass ActivityIndicator", "scaleY"],
    ["running(): boolean\tModule fps-meter", "running()"],
    ["_createUI(): void\tClass ActionBar", "_createUI()"],
    ["prop: string\tInterface AttributeSelector", "prop"],
    ["marginLeft: number\tClass ActionBar", "marginLeft"],
    ["isEnabled: boolean\tClass DockLayout", "isEnabled"],
    ["unit: string\tInterface CSSValue", "Optional unit"],
    ["borderRadius: number\tClass Style", "borderRadius"],
    ["isLoaded: boolean\tClass SegmentedBar", "isLoaded"],
    ["className: string\tClass Placeholder", "className"],
    ["className: string\tClass StackLayout", "className"],
    ["visibility: string\tClass ActionBar", "visibility"],
    ["translateX: number\tClass ActionBar", "translateX"],
    ["translateY: number\tClass ActionBar", "translateY"],
    ["_isVisible: boolean\tClass Repeater", "_isVisible"],
    ["Delete: string\tClass ChangeType", "Static Delete"],
    ["context: any\tClass AndroidApplication", "context"],
    ["_nativeView: any\tClass ScrollView", "_nativeView"],
    ["minHeight: number\tClass StackLayout", "minHeight"],
    ["pos: number\tInterface PseudoClassSelector", "pos"],
    ["marginRight: number\tClass TabView", "marginRight"],
    ["items: Array<TabViewItem>\tClass TabView", "items"],
    ["isEnabled: boolean\tClass ScrollView", "isEnabled"],
    ["cssClasses: Set<string>\tClass Page", "cssClasses"],
    ["borderRadius: number\tClass Image", "borderRadius"],
    ["borderWidth: number\tClass TabView", "borderWidth"],
    ["marginTop: number\tClass StackLayout", "marginTop"],
    ["cssClasses: Set<string>\tClass View", "cssClasses"],
    ["_context: any\tClass EditableTextBase", "_context"],
    ["Update: string\tClass ChangeType", "Static Update"],
    ["Splice: string\tClass ChangeType", "Static Splice"],
    ["height: number\tClass ActivityIndicator", "height"],
    ["_domId: number\tClass ActivityIndicator", "_domId"],
    ["onUnloaded(): void\tClass WebView", "onUnloaded()"],
    ["bindingContext: any\tClass View", "bindingContext"],
    ["bindingContext: any\tClass Page", "bindingContext"],
    ["_nativeView: any\tClass DockLayout", "_nativeView"],
    ["onUnloaded(): void\tClass TabView", "onUnloaded()"],
    ["width: number\tInterface PlatformContext", "width"],
    ["_isVisible: boolean\tClass ListView", "_isVisible"],
    ["_nativeView: any\tClass ListPicker", "_nativeView"],
    ["onLoaded(): void\tClass Placeholder", "onLoaded()"],
    ["borderRadius: number\tClass Style", "borderRadius"],
    ["marginLeft: number\tClass TextField", "marginLeft"],
    ["defaultValue: any\tClass Property", "defaultValue"],
    ["result: boolean\tInterface PromptResult", "result"],
    ["paddingRight: number\tClass Style", "paddingRight"],
    ["_createUI(): void\tClass SearchBar", "_createUI()"],
    ["marginBottom: number\tClass Style", "marginBottom"],
    ["activity: any\tInterface AndroidFrame", "activity"],
    ["visibility: string\tClass SearchBar", "visibility"],
    ["className: string\tClass ContentView", "className"],
    ["_nativeView: any\tClass TimePicker", "_nativeView"],
    ["borderColor: Color\tClass HtmlView", "borderColor"],
    ["value: any\tInterface PropertyChangeData", "value"],
    ["isEnabled: boolean\tClass TimePicker", "isEnabled"],
    ["translateY: number\tClass SearchBar", "translateY"],
    ["translateX: number\tClass SearchBar", "translateX"],
    ["changeMap: ChangeMap\tClass CssState", "changeMap"],
    ["defaultValue: any\tClass Property", "defaultValue"],
    ["tapEvent: string\tClass Button", "Static tapEvent"],
    ["isEnabled: boolean\tClass LayoutBase", "isEnabled"],
    ["paddingRight: number\tClass Style", "paddingRight"],
    ["y2: number\tClass CubicBezierAnimationCurve", "y2"],
    ["_context: any\tClass CustomLayoutView", "_context"],
    ["borderColor: Color\tClass TextView", "borderColor"],
    ["_isVisible: boolean\tClass TextView", "_isVisible"],
    ["defaultValue: any\tClass Property", "defaultValue"],
    ["isAbsolute: boolean\tClass ItemSpec", "isAbsolute"],
    ["_nativeView: any\tClass WrapLayout", "_nativeView"],
    ["y1: number\tClass CubicBezierAnimationCurve", "y1"],
    ["x2: number\tClass CubicBezierAnimationCurve", "x2"],
    ["x1: number\tClass CubicBezierAnimationCurve", "x1"],
    ["Delete: string\tClass ChangeType", "Static Delete"],
    ["Splice: string\tClass ChangeType", "Static Splice"],
    ["Update: string\tClass ChangeType", "Static Update"],
    ["_nativeView: any\tClass DatePicker", "_nativeView"],
    ["view: View\tInterface PanGestureEventData", "view"],
    ["isEnabled: boolean\tClass WrapLayout", "isEnabled"],
    ["isEnabled: boolean\tClass GridLayout", "isEnabled"],
    ["_nativeView: any\tClass GridLayout", "_nativeView"],
    ["_nativeView: any\tClass LayoutBase", "_nativeView"],
    ["translateX: number\tClass TextField", "translateX"],
    ["isEnabled: boolean\tClass ListPicker", "isEnabled"],
    ["focus(): boolean\tClass AbsoluteLayout", "focus()"],
    ["name: string\tInterface NativeScriptError", "name"],
    ["controller: any\tInterface iOSFrame", "controller"],
    ["marginBottom: number\tClass Label", "marginBottom"],
    ["marginBottom: number\tClass Style", "marginBottom"],
    ["_createUI(): void\tClass TextField", "_createUI()"],
    ["marginLeft: number\tClass SearchBar", "marginLeft"],
    ["_isVisible: boolean\tClass Progress", "_isVisible"],
    ["onLoaded(): void\tClass StackLayout", "onLoaded()"],
    ["isEmpty(): boolean\tClass Background", "isEmpty()"],
    ["borderColor: Color\tClass Progress", "borderColor"],
    ["borderColor: Color\tClass ListView", "borderColor"],
    ["onLoaded(): void\tClass ContentView", "onLoaded()"],
    ["android: any\tClass ProxyViewContainer", "android"],
    ["object: Observable\tInterface EventData", "object"],
    ["_cssState: any\tClass AbsoluteLayout", "_cssState"],
    ["_isVisible: boolean\tClass HtmlView", "_isVisible"],
    ["isEnabled: boolean\tClass DatePicker", "isEnabled"],
    ["minHeight: number\tClass ContentView", "minHeight"],
    ["visibility: string\tClass TextField", "visibility"],
    ["translateY: number\tClass TextField", "translateY"],
    ["layoutView: View\tClass ContentView", "layoutView"],
    ["marginTop: number\tClass ContentView", "marginTop"],
    ["onUnloaded(): void\tClass Button", "onUnloaded()"],
    ["onLoaded(): void\tClass ScrollView", "onLoaded()"],
    ["marginTop: number\tClass LayoutBase", "marginTop"],
    ["minHeight: number\tClass DockLayout", "minHeight"],
    ["minWidth: number\tClass SegmentedBar", "minWidth"],
    ["borderWidth: number\tClass Border", "borderWidth"],
    ["translateY: number\tClass Repeater", "translateY"],
    ["actionView: View\tClass ActionItem", "actionView"],
    ["marginLeft: number\tClass Repeater", "marginLeft"],
    ["marginRight: number\tClass Slider", "marginRight"],
    ["translateX: number\tClass Repeater", "translateX"],
    ["minHeight: number\tClass LayoutBase", "minHeight"],
    ["marginRight: number\tClass Button", "marginRight"],
    ["translateY: number\tClass TextBase", "translateY"],
    ["borderWidth: number\tClass Button", "borderWidth"],
    ["parent: Folder\tClass FileSystemEntity", "parent"],
    ["visibility: string\tClass Repeater", "visibility"],
    ["translateX: number\tClass TextBase", "translateX"],
    ["marginTop: number\tClass DockLayout", "marginTop"],
    ["_domId: number\tClass EditableTextBase", "_domId"],
    ["_fragmentTag: string\tClass Page", "_fragmentTag"],
    ["isLoaded: boolean\tClass ContentView", "isLoaded"],
    ["onLoaded(): void\tClass GridLayout", "onLoaded()"],
    ["android: any\tClass ActivityIndicator", "android"],
    ["isEnabled: boolean\tClass SearchBar", "isEnabled"],
    ["_nativeView: any\tClass TextField", "_nativeView"],
    ["className: string\tClass LayoutBase", "className"],
    ["height: number\tClass EditableTextBase", "height"],
    ["typeName: string\tClass SegmentedBar", "typeName"],
    ["isPlaying: boolean\tClass Animation", "isPlaying"],
    ["minHeight: number\tClass ListPicker", "minHeight"],
    ["minHeight: number\tClass GridLayout", "minHeight"],
    ["className: string\tClass ListPicker", "className"],
    ["ios: any\tInterface SwipeGestureEventData", "ios"],
    ["margin: string\tClass EditableTextBase", "margin"],
    ["marginTop: number\tClass GridLayout", "marginTop"],
    ["isEnabled: boolean\tClass TextField", "isEnabled"],
    ["rotate: number\tClass EditableTextBase", "rotate"],
    ["borderWidth: number\tClass Slider", "borderWidth"],
    ["onUnloaded(): void\tClass Switch", "onUnloaded()"],
    ["className: string\tClass GridLayout", "className"],
    ["marginLeft: number\tClass TextBase", "marginLeft"],
    ["_nativeView: any\tClass ActionBar", "_nativeView"],
    ["marginTop: number\tClass ListPicker", "marginTop"],
    ["scaleX: number\tClass EditableTextBase", "scaleX"],
    ["cssClass: string\tClass SegmentedBar", "cssClass"],
    ["isEnabled: boolean\tClass ActionBar", "isEnabled"],
    ["_nativeView: any\tClass SearchBar", "_nativeView"],
    ["scaleY: number\tClass EditableTextBase", "scaleY"],
    ["onUnloaded(): void\tClass Slider", "onUnloaded()"],
    ["marginRight: number\tClass Border", "marginRight"],
    ["isLoaded: boolean\tClass Placeholder", "isLoaded"],
    ["width: number\tClass ProxyViewContainer", "width"],
    ["className: string\tClass TimePicker", "className"],
    ["translateX: number\tClass Progress", "translateX"],
    ["height: number\tClass CustomLayoutView", "height"],
    ["minHeight: number\tClass ScrollView", "minHeight"],
    ["marginLeft: number\tClass Progress", "marginLeft"],
    ["isAndroid: boolean\tModule platform", "isAndroid"],
    ["marginTop: number\tClass ScrollView", "marginTop"],
    ["marginBottom: number\tClass View", "marginBottom"],
    ["translateY: number\tClass Progress", "translateY"],
    ["minHeight: number\tClass TimePicker", "minHeight"],
    ["minMinute: number\tClass TimePicker", "minMinute"],
    ["_createUI(): void\tClass TextView", "_createUI()"],
    ["borderWidth: number\tClass Switch", "borderWidth"],
    ["maxMinute: number\tClass TimePicker", "maxMinute"],
    ["view: any\tInterface CreateViewEventData", "view"],
    ["marginTop: number\tClass TimePicker", "marginTop"],
    ["layoutView: View\tClass ScrollView", "layoutView"],
    ["marginBottom: number\tClass Page", "marginBottom"],
    ["_createUI(): void\tClass Repeater", "_createUI()"],
    ["parent: View\tClass ProxyViewContainer", "parent"],
    ["margin: string\tClass CustomLayoutView", "margin"],
    ["visibility: string\tClass ListView", "visibility"],
    ["lastModified: Date\tClass Folder", "lastModified"],
    ["scaleY: number\tClass CustomLayoutView", "scaleY"],
    ["onUnloaded(): void\tClass Border", "onUnloaded()"],
    ["translateY: number\tClass ListView", "translateY"],
    ["translateX: number\tClass ListView", "translateX"],
    ["marginLeft: number\tClass ListView", "marginLeft"],
    ["marginTop: number\tClass DatePicker", "marginTop"],
    ["remove(): Promise<any>\tClass Folder", "remove()"],
    ["minHeight: number\tClass DatePicker", "minHeight"],
    ["borderColor: Color\tClass WebView", "borderColor"],
    ["scaleX: number\tClass CustomLayoutView", "scaleX"],
    ["curve: any\tClass KeyframeAnimationInfo", "curve"],
    ["ios: any\tInterface TouchGestureEventData", "ios"],
    ["ios: any\tInterface PinchGestureEventData", "ios"],
    ["borderWidth: number\tClass Layout", "borderWidth"],
    ["onLoaded(): void\tClass DatePicker", "onLoaded()"],
    ["osVersion: string\tInterface Device", "osVersion"],
    ["rotate: number\tClass CustomLayoutView", "rotate"],
    ["android: any\tInterface ItemEventData", "android"],
    ["_createUI(): void\tClass ListView", "_createUI()"],
    ["onLoaded(): void\tClass WrapLayout", "onLoaded()"],
    ["_isVisible: boolean\tClass TabView", "_isVisible"],
    ["object: any\tInterface LaunchEventData", "object"],
    ["result: boolean\tInterface LoginResult", "result"],
    ["_createUI(): void\tClass TextBase", "_createUI()"],
    ["index: number\tInterface ChangedData<T>", "index"],
    ["onLoaded(): void\tClass DockLayout", "onLoaded()"],
    ["_createUI(): void\tClass HtmlView", "_createUI()"],
    ["onUnloaded(): void\tClass Layout", "onUnloaded()"],
    ["onLoaded(): void\tClass LayoutBase", "onLoaded()"],
    ["marginRight: number\tClass Switch", "marginRight"],
    ["borderRadius: number\tClass View", "borderRadius"],
    ["_domId: number\tClass CustomLayoutView", "_domId"],
    ["canGoBack(): boolean\tClass Frame", "canGoBack()"],
    ["_isVisible: boolean\tClass WebView", "_isVisible"],
    ["className: string\tClass DockLayout", "className"],
    ["context: any\tInterface NavigatedData", "context"],
    ["visibility: string\tClass TextBase", "visibility"],
    ["isLoaded: boolean\tClass StackLayout", "isLoaded"],
    ["onLoaded(): void\tClass ListPicker", "onLoaded()"],
    ["padding: string\tClass AbsoluteLayout", "padding"],
    ["opacity: number\tClass AbsoluteLayout", "opacity"],
    ["originX: number\tClass AbsoluteLayout", "originX"],
    ["originY: number\tClass AbsoluteLayout", "originY"],
    ["onLoaded(): void\tClass TimePicker", "onLoaded()"],
    ["className: string\tClass WrapLayout", "className"],
    ["_createUI(): void\tClass Progress", "_createUI()"],
    ["marginTop: number\tClass WrapLayout", "marginTop"],
    ["translateX: number\tClass HtmlView", "translateX"],
    ["className: string\tClass ScrollView", "className"],
    ["translateY: number\tClass HtmlView", "translateY"],
    ["index: number\tInterface ChangedData<T>", "index"],
    ["minHeight: number\tClass WrapLayout", "minHeight"],
    ["marginLeft: number\tClass HtmlView", "marginLeft"],
    ["borderColor: Color\tClass TabView", "borderColor"],
    ["visibility: string\tClass Progress", "visibility"],
    ["visibility: string\tClass TextView", "visibility"],
    ["className: string\tClass DatePicker", "className"],
    ["visibility: string\tClass HtmlView", "visibility"],
    ["paddingLeft: number\tClass Layout", "paddingLeft"],
    ["itemWidth: number\tClass WrapLayout", "itemWidth"],
    ["translateX: number\tClass TextView", "translateX"],
    ["marginLeft: number\tClass TextView", "marginLeft"],
    ["url: string\tInterface HttpRequestOptions", "url"],
    ["marginRight: number\tClass Layout", "marginRight"],
    ["borderRadius: number\tClass Page", "borderRadius"],
    ["cssType: string\tClass AbsoluteLayout", "cssType"],
    ["translateY: number\tClass TextView", "translateY"],
    ["selectors: string[]\tInterface Rule", "selectors"],
    ["scale: number\tInterface ScreenMetrics", "scale"],
    ["keyframes: any\tModule application", "keyframes"],
    ["shift(): T\tClass ObservableArray<T>", "shift()"],
    ["dynamic: boolean\tClass SelectorCore", "dynamic"],
    ["ruleset: RuleSet\tClass SelectorCore", "ruleset"],
    ["parent: Node\tInterface Node", "Optional parent"],
    ["_context: any\tClass AbsoluteLayout", "_context"],
    ["isEnabled: boolean\tClass TextView", "isEnabled"],
    ["_nativeView: any\tClass TextView", "_nativeView"],
    ["context: any\tClass GesturesObserver", "context"],
    ["length: number\tClass VirtualArray<T>", "length"],
    ["isLoaded: boolean\tClass GridLayout", "isLoaded"],
    ["delay: number\tClass KeyframeAnimation", "delay"],
    ["loc: boolean\tInterface Options", "Optional loc"],
    ["raw: boolean\tInterface Options", "Optional raw"],
    ["index: number\tInterface ItemEventData", "index"],
    ["pos: number\tInterface UniversalSelector", "pos"],
    ["cssClass: string\tClass StackLayout", "cssClass"],
    ["_nativeView: any\tClass Repeater", "_nativeView"],
    ["isEnabled: boolean\tClass Repeater", "isEnabled"],
    ["typeName: string\tClass ProxyObject", "typeName"],
    ["focus(): boolean\tClass SegmentedBar", "focus()"],
    ["resources: any\tModule application", "resources"],
    ["minWidth: number\tClass StackLayout", "minWidth"],
    ["typeName: string\tClass StackLayout", "typeName"],
    ["value: V\tInterface KeyValuePair<K, V>", "value"],
    ["color: Color\tClass ProxyViewContainer", "color"],
    ["_cssState: any\tClass SegmentedBar", "_cssState"],
    ["style: Style\tClass ProxyViewContainer", "style"],
    ["borderColor: Color\tClass Switch", "borderColor"],
    ["_isVisible: boolean\tClass Switch", "_isVisible"],
    ["className: string\tClass SearchBar", "className"],
    ["_nativeView: any\tClass TextBase", "_nativeView"],
    ["borderColor: Color\tClass Slider", "borderColor"],
    ["marginRight: number\tClass Style", "marginRight"],
    ["paddingLeft: number\tClass Style", "paddingLeft"],
    ["borderWidth: number\tClass Style", "borderWidth"],
    ["onLoaded(): void\tClass ActionBar", "onLoaded()"],
    ["_isVisible: boolean\tClass Slider", "_isVisible"],
    ["ident: string\tInterface ClassSelector", "ident"],
    ["visibility: string\tClass WebView", "visibility"],
    ["error: string\tInterface LoadEventData", "error"],
    ["typeName: string\tClass ContentView", "typeName"],
    ["_nativeView: any\tClass HtmlView", "_nativeView"],
    ["marginRight: number\tClass Image", "marginRight"],
    ["borderColor: Color\tClass Button", "borderColor"],
    ["borderWidth: number\tClass Label", "borderWidth"],
    ["minHeight: number\tClass TextField", "minHeight"],
    ["pos: number\tInterface AttributeSelector", "pos"],
    ["_isVisible: boolean\tClass Button", "_isVisible"],
    ["cssClass: string\tClass Placeholder", "cssClass"],
    ["onLoaded(): void\tClass SearchBar", "onLoaded()"],
    ["isLoaded: boolean\tClass DockLayout", "isLoaded"],
    ["translateY: number\tClass TabView", "translateY"],
    ["className: string\tClass ActionBar", "className"],
    ["_isVisible: boolean\tClass Layout", "_isVisible"],
    ["minHeight: number\tClass ActionBar", "minHeight"],
    ["marginTop: number\tClass ActionBar", "marginTop"],
    ["typeName: string\tClass TabViewItem", "typeName"],
    ["getCurve(): any\tClass Transition", "getCurve()"],
    ["visibility: string\tClass TabView", "visibility"],
    ["android: any\tClass CustomLayoutView", "android"],
    ["translateX: number\tClass TabView", "translateX"],
    ["borderColor: Color\tClass Layout", "borderColor"],
    ["isLoaded: boolean\tClass DatePicker", "isLoaded"],
    ["marginLeft: number\tClass WebView", "marginLeft"],
    ["cssClass: string\tClass ContentView", "cssClass"],
    ["onLoaded(): void\tClass TextField", "onLoaded()"],
    ["minHeight: number\tClass SearchBar", "minHeight"],
    ["translateX: number\tClass WebView", "translateX"],
    ["translateY: number\tClass WebView", "translateY"],
    ["isLoaded: boolean\tClass WrapLayout", "isLoaded"],
    ["marginTop: number\tClass SearchBar", "marginTop"],
    ["marginLeft: number\tClass TabView", "marginLeft"],
    ["_nativeView: any\tClass Progress", "_nativeView"],
    ["onUnloaded(): void\tClass Image", "onUnloaded()"],
    ["isLoaded: boolean\tClass ScrollView", "isLoaded"],
    ["maxRequests: number\tClass Cache", "maxRequests"],
    ["_createUI(): void\tClass WebView", "_createUI()"],
    ["borderWidth: number\tClass Frame", "borderWidth"],
    ["borderWidth: number\tClass Style", "borderWidth"],
    ["minWidth: number\tClass Placeholder", "minWidth"],
    ["className: string\tClass TextField", "className"],
    ["_nativeView: any\tClass ListView", "_nativeView"],
    ["width: number\tClass ActivityIndicator", "width"],
    ["isEnabled: boolean\tClass ListView", "isEnabled"],
    ["isEnabled: boolean\tClass HtmlView", "isEnabled"],
    ["isLoaded: boolean\tClass TimePicker", "isLoaded"],
    ["marginRight: number\tClass Frame", "marginRight"],
    ["isLoaded: boolean\tClass LayoutBase", "isLoaded"],
    ["onUnloaded(): void\tClass Label", "onUnloaded()"],
    ["borderWidth: number\tClass Image", "borderWidth"],
    ["isLoaded: boolean\tClass ListPicker", "isLoaded"],
    ["marginRight: number\tClass Label", "marginRight"],
    ["typeName: string\tClass Placeholder", "typeName"],
    ["marginRight: number\tClass Style", "marginRight"],
    ["parent: View\tClass ActivityIndicator", "parent"],
    ["minWidth: number\tClass ContentView", "minWidth"],
    ["isEnabled: boolean\tClass TextBase", "isEnabled"],
    ["borderColor: Color\tClass Border", "borderColor"],
    ["_createUI(): void\tClass TabView", "_createUI()"],
    ["isEnabled: boolean\tClass Progress", "isEnabled"],
    ["onUnloaded(): void\tClass Frame", "onUnloaded()"],
    ["_isVisible: boolean\tClass Border", "_isVisible"],
    ["android: any\tClass EditableTextBase", "android"],
    ["marginTop: number\tClass TextField", "marginTop"],
    ["paddingLeft: number\tClass Style", "paddingLeft"],
    ["margin: string\tClass AbsoluteLayout", "margin"],
    ["busy: boolean\tClass ActivityIndicator", "busy"],
    ["translateY: number\tClass Border", "translateY"],
    ["marginLeft: number\tClass Switch", "marginLeft"],
    ["isLoaded: boolean\tClass SearchBar", "isLoaded"],
    ["onLoaded(): void\tClass HtmlView", "onLoaded()"],
    ["typeName: string\tClass ActionItem", "typeName"],
    ["translateX: number\tClass Border", "translateX"],
    ["translateY: number\tClass Slider", "translateY"],
    ["whiteSpace: string\tClass Button", "whiteSpace"],
    ["_createUI(): void\tClass Border", "_createUI()"],
    ["rotate: number\tClass AbsoluteLayout", "rotate"],
    ["translateY: number\tClass Button", "translateY"],
    ["minHeight: number\tClass TextView", "minHeight"],
    ["visibility: string\tClass Border", "visibility"],
    ["typeName: string\tClass Observable", "typeName"],
    ["height: number\tClass AbsoluteLayout", "height"],
    ["scaleX: number\tClass AbsoluteLayout", "scaleX"],
    ["position: string\tClass Background", "position"],
    ["borderColor: Color\tClass Image", "borderColor"],
    ["_createUI(): void\tClass Switch", "_createUI()"],
    ["typeName: string\tClass GridLayout", "typeName"],
    ["visibility: string\tClass Switch", "visibility"],
    ["borderWidth: number\tClass View", "borderWidth"],
    ["typeName: string\tClass DatePicker", "typeName"],
    ["lastModified: Date\tClass File", "lastModified"],
    ["focus(): boolean\tClass ContentView", "focus()"],
    ["cssClass: string\tClass WrapLayout", "cssClass"],
    ["translateX: number\tClass Switch", "translateX"],
    ["clipPath: string\tClass Background", "clipPath"],
    ["remove(): Promise<any>\tClass File", "remove()"],
    ["visibility: string\tClass Button", "visibility"],
    ["visibility: string\tClass Slider", "visibility"],
    ["cssClass: string\tClass DatePicker", "cssClass"],
    ["marginTop: number\tClass TextView", "marginTop"],
    ["scaleY: number\tClass AbsoluteLayout", "scaleY"],
    ["longitude: number\tClass Location", "longitude"],
    ["marginLeft: number\tClass Border", "marginLeft"],
    ["translateX: number\tClass Slider", "translateX"],
    ["position: Position\tInterface Rule", "position"],
    ["rowHeight: number\tClass ListView", "rowHeight"],
    ["editable: boolean\tClass TextField", "editable"],
    ["minHeight: number\tClass ListView", "minHeight"],
    ["cssClass: string\tClass DockLayout", "cssClass"],
    ["marginTop: number\tClass ListView", "marginTop"],
    ["ios: any\tInterface PanGestureEventData", "ios"],
    ["minHeight: number\tClass TextBase", "minHeight"],
    ["className: string\tClass TextBase", "className"],
    ["borderColor: Color\tClass Label", "borderColor"],
    ["minWidth: number\tClass TimePicker", "minWidth"],
    ["isLoaded: boolean\tClass TextField", "isLoaded"],
    ["marginTop: number\tClass TextBase", "marginTop"],
    ["clear(): Promise<any>\tClass Folder", "clear()"],
    ["className: string\tClass ListView", "className"],
    ["_createUI(): void\tClass Layout", "_createUI()"],
    ["onLoaded(): void\tClass Progress", "onLoaded()"],
    ["language: string\tInterface Device", "language"],
    ["marginLeft: number\tClass Layout", "marginLeft"],
    ["onLoaded(): void\tClass TextBase", "onLoaded()"],
    ["_isVisible: boolean\tClass Image", "_isVisible"],
    ["borderWidth: number\tClass Page", "borderWidth"],
    ["paddingTop: number\tClass Layout", "paddingTop"],
    ["onLoaded(): void\tClass TextView", "onLoaded()"],
    ["marginLeft: number\tClass Slider", "marginLeft"],
    ["visibility: string\tClass Layout", "visibility"],
    ["translateY: number\tClass Layout", "translateY"],
    ["translateX: number\tClass Layout", "translateX"],
    ["cssClass: string\tClass TimePicker", "cssClass"],
    ["minWidth: number\tClass LayoutBase", "minWidth"],
    ["_isVisible: boolean\tClass Label", "_isVisible"],
    ["onUnloaded(): void\tClass View", "onUnloaded()"],
    ["translateX: number\tClass Button", "translateX"],
    ["index: number\tInterface ItemsLoading", "index"],
    ["minWidth: number\tClass ScrollView", "minWidth"],
    ["color: Color\tClass ActivityIndicator", "color"],
    ["position: Position\tInterface Node", "position"],
    ["cssClass: string\tClass LayoutBase", "cssClass"],
    ["marginRight: number\tClass Page", "marginRight"],
    ["typeName: string\tClass LayoutBase", "typeName"],
    ["onUnloaded(): void\tClass Page", "onUnloaded()"],
    ["count: number\tInterface ItemsLoading", "count"],
    ["parent: View\tClass CustomLayoutView", "parent"],
    ["typeName: string\tClass ScrollView", "typeName"],
    ["width: number\tClass CustomLayoutView", "width"],
    ["cssClass: string\tClass ScrollView", "cssClass"],
    ["isEnabled: boolean\tClass TabView", "isEnabled"],
    ["originX: number\tClass SegmentedBar", "originX"],
    ["opacity: number\tClass SegmentedBar", "opacity"],
    ["originY: number\tClass SegmentedBar", "originY"],
    ["_endUpdate(): any\tClass Style", "_endUpdate()"],
    ["minWidth: number\tClass DockLayout", "minWidth"],
    ["typeName: string\tClass WrapLayout", "typeName"],
    ["marginRight: number\tClass View", "marginRight"],
    ["onLoaded(): void\tClass ListView", "onLoaded()"],
    ["typeName: string\tClass DockLayout", "typeName"],
    ["closeModal(): void\tClass Page", "closeModal()"],
    ["cssType: string\tClass SegmentedBar", "cssType"],
    ["_nativeView: any\tClass TabView", "_nativeView"],
    ["minWidth: number\tClass WrapLayout", "minWidth"],
    ["borderColor: Color\tClass Style", "borderColor"],
    ["translateY: number\tClass Switch", "translateY"],
    ["typeName: string\tClass ListPicker", "typeName"],
    ["_isVisible: boolean\tClass Frame", "_isVisible"],
    ["className: string\tClass Repeater", "className"],
    ["isLoaded: boolean\tClass ActionBar", "isLoaded"],
    ["goForward(): any\tClass WebView", "goForward()"],
    ["type: :\tInterface PseudoClassSelector", "type"],
    ["_domId: number\tClass AbsoluteLayout", "_domId"],
    ["minWidth: number\tClass DatePicker", "minWidth"],
    ["minWidth: number\tClass GridLayout", "minWidth"],
    ["width: number\tClass EditableTextBase", "width"],
    ["className: string\tClass TextView", "className"],
    ["borderColor: Color\tClass Frame", "borderColor"],
    ["parent: View\tClass EditableTextBase", "parent"],
    ["marginLeft: number\tClass Button", "marginLeft"],
    ["_createUI(): void\tClass Button", "_createUI()"],
    ["_nativeView: any\tClass WebView", "_nativeView"],
    ["canGoBack: boolean\tClass WebView", "canGoBack"],
    ["marginTop: number\tClass Repeater", "marginTop"],
    ["ios: iOSApplication\tModule application", "ios"],
    ["cssClass: string\tClass GridLayout", "cssClass"],
    ["running: boolean\tClass FPSCallback", "running"],
    ["cssFile: string\tModule application", "cssFile"],
    ["focus(): boolean\tClass StackLayout", "focus()"],
    ["minHeight: number\tClass Repeater", "minHeight"],
    ["typeName: string\tClass TimePicker", "typeName"],
    ["title: string\tClass SegmentedBarItem", "title"],
    ["_cssState: any\tClass Placeholder", "_cssState"],
    ["_cssState: any\tClass ContentView", "_cssState"],
    ["isEnabled: boolean\tClass WebView", "isEnabled"],
    ["className: string\tClass Progress", "className"],
    ["ident: string\tInterface TypeSelector", "ident"],
    ["className: string\tClass HtmlView", "className"],
    ["minHeight: number\tClass Progress", "minHeight"],
    ["minWidth: number\tClass ListPicker", "minWidth"],
    ["_endUpdate(): any\tClass Style", "_endUpdate()"],
    ["onLoaded(): void\tClass Repeater", "onLoaded()"],
    ["_cssState: any\tClass StackLayout", "_cssState"],
    ["marginTop: number\tClass HtmlView", "marginTop"],
    ["minHeight: number\tClass HtmlView", "minHeight"],
    ["cssClass: string\tClass ListPicker", "cssClass"],
    ["direction: number\tClass Location", "direction"],
    ["focus(): boolean\tClass Placeholder", "focus()"],
    ["cssValue: any\tClass PropertyEntry", "cssValue"],
    ["view: View\tInterface GestureEventData", "view"],
    ["_createUI(): void\tClass Slider", "_createUI()"],
    ["style: Style\tClass ActivityIndicator", "style"],
    ["borderColor: Color\tClass Style", "borderColor"],
    ["marginTop: number\tClass Progress", "marginTop"],
    ["className: string\tClass TabView", "className"],
    ["translateX: number\tClass Label", "translateX"],
    ["isEnabled: boolean\tClass Layout", "isEnabled"],
    ["translateY: number\tClass Label", "translateY"],
    ["focus(): boolean\tClass DockLayout", "focus()"],
    ["focus(): boolean\tClass WrapLayout", "focus()"],
    ["visibility: string\tClass Label", "visibility"],
    ["_nativeView: any\tClass Slider", "_nativeView"],
    ["backpublic: string\tClass Style", "backpublic"],
    ["_cssState: any\tClass ListPicker", "_cssState"],
    ["_cssState: any\tClass TimePicker", "_cssState"],
    ["marginLeft: number\tClass Style", "marginLeft"],
    ["fontWeight: string\tClass Style", "fontWeight"],
    ["isLoaded: boolean\tClass ListView", "isLoaded"],
    ["_nativeView: any\tClass Switch", "_nativeView"],
    ["fontFamily: string\tClass Style", "fontFamily"],
    ["translateX: number\tClass Image", "translateX"],
    ["padding: string\tClass StackLayout", "padding"],
    ["marginTop: number\tClass TabView", "marginTop"],
    ["fontWeight: string\tClass Style", "fontWeight"],
    ["_isVisible: boolean\tClass Page", "_isVisible"],
    ["_context: any\tClass SegmentedBar", "_context"],
    ["visibility: string\tClass Style", "visibility"],
    ["focus(): boolean\tClass TimePicker", "focus()"],
    ["actionBar: ActionBar\tClass Page", "actionBar"],
    ["typeName: string\tClass TextField", "typeName"],
    ["visibility: string\tClass Image", "visibility"],
    ["translateY: number\tClass Image", "translateY"],
    ["minHeight: number\tClass TabView", "minHeight"],
    ["_cssState: any\tClass ScrollView", "_cssState"],
    ["parent: View\tClass FormattedString", "parent"],
    ["isLoaded: boolean\tClass Progress", "isLoaded"],
    ["cssClass: string\tClass ActionBar", "cssClass"],
    ["_createUI(): void\tClass Label", "_createUI()"],
    ["value: string\tInterface Declaration", "value"],
    ["paddingTop: number\tClass Style", "paddingTop"],
    ["isEnabled: boolean\tClass Slider", "isEnabled"],
    ["focus(): boolean\tClass ListPicker", "focus()"],
    ["marginLeft: number\tClass Label", "marginLeft"],
    ["marginLeft: number\tClass Image", "marginLeft"],
    ["borderColor: Color\tClass Page", "borderColor"],
    ["cssClass: string\tClass TextField", "cssClass"],
    ["style: Style\tClass EditableTextBase", "style"],
    ["fontSize: number\tClass TextField", "fontSize"],
    ["opacity: number\tClass Placeholder", "opacity"],
    ["focus(): boolean\tClass GridLayout", "focus()"],
    ["originY: number\tClass Placeholder", "originY"],
    ["_cssState: any\tClass DockLayout", "_cssState"],
    ["originX: number\tClass Placeholder", "originX"],
    ["bottom: number\tInterface Thickness", "bottom"],
    ["cssType: string\tClass StackLayout", "cssType"],
    ["color: Color\tClass EditableTextBase", "color"],
    ["isLoaded: boolean\tClass TextBase", "isLoaded"],
    ["onLoaded(): void\tClass WebView", "onLoaded()"],
    ["paddingTop: number\tClass Style", "paddingTop"],
    ["isEnabled: boolean\tClass Button", "isEnabled"],
    ["originY: number\tClass StackLayout", "originY"],
    ["visibility: string\tClass Style", "visibility"],
    ["key: string\tInterface DownloadRequest", "key"],
    ["translateX: number\tClass Style", "translateX"],
    ["translateY: number\tClass Style", "translateY"],
    ["url: string\tInterface DownloadRequest", "url"],
    ["originX: number\tClass StackLayout", "originX"],
    ["whiteSpace: string\tClass Style", "whiteSpace"],
    ["message: string\tClass SourceError", "message"],
    ["minWidth: number\tClass TextField", "minWidth"],
    ["type: []\tInterface AttributeSelector", "type"],
    ["_nativeView: any\tClass Button", "_nativeView"],
    ["cssType: string\tClass Placeholder", "cssType"],
    ["marginLeft: number\tClass Style", "marginLeft"],
    ["opacity: number\tClass StackLayout", "opacity"],
    ["fontFamily: string\tClass Style", "fontFamily"],
    ["value: string\tInterface Declaration", "value"],
    ["marginLeft: number\tClass Frame", "marginLeft"],
    ["image: ImageSource\tClass Background", "image"],
    ["translateY: number\tClass Frame", "translateY"],
    ["visibility: string\tClass Frame", "visibility"],
    ["android: any\tClass AbsoluteLayout", "android"],
    ["titleView: View\tClass ActionBar", "titleView"],
    ["translateX: number\tClass Frame", "translateX"],
    ["_nativeView: any\tClass Layout", "_nativeView"],
    ["_cssState: any\tClass GridLayout", "_cssState"],
    ["isLoaded: boolean\tClass HtmlView", "isLoaded"],
    ["editable: boolean\tClass TextView", "editable"],
    ["isEnabled: boolean\tClass Border", "isEnabled"],
    ["className: string\tClass WebView", "className"],
    ["focus(): boolean\tClass LayoutBase", "focus()"],
    ["_createUI(): void\tClass Frame", "_createUI()"],
    ["typeName: string\tClass ActionBar", "typeName"],
    ["whiteSpace: string\tClass Style", "whiteSpace"],
    ["isLoaded: boolean\tClass TextView", "isLoaded"],
    ["borderColor: Color\tClass View", "borderColor"],
    ["onExit(): any\tModule application", "onExit()"],
    ["typeName: string\tClass SearchBar", "typeName"],
    ["focus(): boolean\tClass DatePicker", "focus()"],
    ["_isVisible: boolean\tClass View", "_isVisible"],
    ["minWidth: number\tClass SearchBar", "minWidth"],
    ["_cssState: any\tClass WrapLayout", "_cssState"],
    ["_cssState: any\tClass DatePicker", "_cssState"],
    ["_nativeView: any\tClass Border", "_nativeView"],
    ["android: AndroidFrame\tClass Frame", "android"],
    ["cssType: string\tClass ContentView", "cssType"],
    ["isLoaded: boolean\tClass Repeater", "isLoaded"],
    ["originX: number\tClass ContentView", "originX"],
    ["minWidth: number\tClass ActionBar", "minWidth"],
    ["color: Color\tClass CustomLayoutView", "color"],
    ["onLoaded(): void\tClass TabView", "onLoaded()"],
    ["isEnabled: boolean\tClass Switch", "isEnabled"],
    ["currentPage: Page\tClass Frame", "currentPage"],
    ["marginTop: number\tClass WebView", "marginTop"],
    ["opacity: number\tClass ContentView", "opacity"],
    ["_createUI(): void\tClass Image", "_createUI()"],
    ["focus(): boolean\tClass ScrollView", "focus()"],
    ["style: Style\tClass CustomLayoutView", "style"],
    ["originY: number\tClass ContentView", "originY"],
    ["cssClass: string\tClass SearchBar", "cssClass"],
    ["minHeight: number\tClass WebView", "minHeight"],
    ["_cssState: any\tClass LayoutBase", "_cssState"],
    ["minWidth: number\tClass TextBase", "minWidth"],
    ["originY: number\tClass DatePicker", "originY"],
    ["cssClass: string\tClass HtmlView", "cssClass"],
    ["opacity: number\tClass DatePicker", "opacity"],
    ["typeName: string\tClass ListView", "typeName"],
    ["visibility: string\tClass Page", "visibility"],
    ["originY: number\tClass TimePicker", "originY"],
    ["path: string\tClass FileSystemEntity", "path"],
    ["className: string\tClass Border", "className"],
    ["isLoading: boolean\tClass Image", "isLoading"],
    ["originX: number\tClass LayoutBase", "originX"],
    ["typeName: string\tClass HtmlView", "typeName"],
    ["cssType: string\tClass ListPicker", "cssType"],
    ["originY: number\tClass LayoutBase", "originY"],
    ["opacity: number\tClass TimePicker", "opacity"],
    ["focus(): boolean\tClass SearchBar", "focus()"],
    ["parent: View\tClass AbsoluteLayout", "parent"],
    ["_nativeView: any\tClass Image", "_nativeView"],
    ["cssClass: string\tClass TextBase", "cssClass"],
    ["fontSize: number\tClass TextBase", "fontSize"],
    ["className: string\tClass Slider", "className"],
    ["minHour: number\tClass TimePicker", "minHour"],
    ["name: string\tClass FileSystemEntity", "name"],
    ["isEnabled: boolean\tClass Label", "isEnabled"],
    ["cssClass: string\tClass TextView", "cssClass"],
    ["cssType: string\tClass LayoutBase", "cssType"],
    ["_nativeView: any\tClass Frame", "_nativeView"],
    ["hint: string\tClass EditableTextBase", "hint"],
    ["minHeight: number\tClass Slider", "minHeight"],
    ["altitude: number\tClass Location", "altitude"],
    ["marginTop: number\tClass Slider", "marginTop"],
    ["marginTop: number\tClass Border", "marginTop"],
    ["originX: number\tClass DatePicker", "originX"],
    ["minWidth: number\tClass Progress", "minWidth"],
    ["maxValue: number\tClass Progress", "maxValue"],
    ["layoutView: View\tClass Border", "layoutView"],
    ["_context: any\tClass StackLayout", "_context"],
    ["originY: number\tClass ListPicker", "originY"],
    ["originX: number\tClass ListPicker", "originX"],
    ["_cssState: any\tClass TextField", "_cssState"],
    ["_createUI(): void\tClass Page", "_createUI()"],
    ["cssType: string\tClass DatePicker", "cssType"],
    ["latitude: number\tClass Location", "latitude"],
    ["cssType: string\tClass TimePicker", "cssType"],
    ["opacity: number\tClass ListPicker", "opacity"],
    ["minHeight: number\tClass Border", "minHeight"],
    ["onLoaded(): void\tClass Switch", "onLoaded()"],
    ["onLoaded(): void\tClass Layout", "onLoaded()"],
    ["opacity: number\tClass LayoutBase", "opacity"],
    ["fontSize: number\tClass TextView", "fontSize"],
    ["isEnabled: boolean\tClass Frame", "isEnabled"],
    ["maxHour: number\tClass TimePicker", "maxHour"],
    ["minWidth: number\tClass ListView", "minWidth"],
    ["text: string\tClass EditableTextBase", "text"],
    ["typeName: string\tClass TextBase", "typeName"],
    ["timestamp: Date\tClass Location", "timestamp"],
    ["marginTop: number\tClass Layout", "marginTop"],
    ["text: string\tClass NavigationButton", "text"],
    ["isEnabled: boolean\tClass Image", "isEnabled"],
    ["minWidth: number\tClass HtmlView", "minWidth"],
    ["icon: string\tClass NavigationButton", "icon"],
    ["cssClass: string\tClass ListView", "cssClass"],
    ["minHeight: number\tClass Layout", "minHeight"],
    ["cssType: string\tClass DockLayout", "cssType"],
    ["cssType: string\tClass WrapLayout", "cssType"],
    ["originY: number\tClass WrapLayout", "originY"],
    ["fontFamily: string\tClass Font", "fontFamily"],
    ["translateX: number\tClass Page", "translateX"],
    ["originX: number\tClass TimePicker", "originX"],
    ["className: string\tClass Switch", "className"],
    ["marginLeft: number\tClass Page", "marginLeft"],
    ["beginEdit(): void\tClass Span", "beginEdit()"],
    ["height: number\tClass SegmentedBar", "height"],
    ["padding: string\tClass GridLayout", "padding"],
    ["margin: string\tClass SegmentedBar", "margin"],
    ["focus(): boolean\tClass TextField", "focus()"],
    ["minHeight: number\tClass Switch", "minHeight"],
    ["opacity: number\tClass WrapLayout", "opacity"],
    ["originX: number\tClass WrapLayout", "originX"],
    ["className: string\tClass Button", "className"],
    ["typeName: string\tClass Repeater", "typeName"],
    ["translateY: number\tClass Page", "translateY"],
    ["typeName: string\tClass TextView", "typeName"],
    ["_context: any\tClass ContentView", "_context"],
    ["_context: any\tClass Placeholder", "_context"],
    ["originY: number\tClass GridLayout", "originY"],
    ["onLoaded(): void\tClass Slider", "onLoaded()"],
    ["opacity: number\tClass ScrollView", "opacity"],
    ["className: string\tClass Layout", "className"],
    ["string: string\tInterface CSSValue", "string"],
    ["originX: number\tClass ScrollView", "originX"],
    ["originY: number\tClass ScrollView", "originY"],
    ["minWidth: number\tClass TextView", "minWidth"],
    ["fontFamily: string\tClass Span", "fontFamily"],
    ["_domId: number\tClass SegmentedBar", "_domId"],
    ["showModal(): Page\tClass Page", "showModal()"],
    ["opacity: number\tClass GridLayout", "opacity"],
    ["isLoaded: boolean\tClass WebView", "isLoaded"],
    ["cssClass: string\tClass Progress", "cssClass"],
    ["rules: Node[]\tInterface StyleSheet", "rules"],
    ["ident: string\tInterface IdSelector", "ident"],
    ["minWidth: number\tClass Repeater", "minWidth"],
    ["cssType: string\tClass ScrollView", "cssType"],
    ["_cssState: any\tClass SearchBar", "_cssState"],
    ["originX: number\tClass GridLayout", "originX"],
    ["isLoaded: boolean\tClass TabView", "isLoaded"],
    ["marginTop: number\tClass Switch", "marginTop"],
    ["column: number\tInterface Position", "column"],
    ["fontWeight: string\tClass Font", "fontWeight"],
    ["padding: string\tClass DockLayout", "padding"],
    ["cssType: string\tClass GridLayout", "cssType"],
    ["_createUI(): void\tClass View", "_createUI()"],
    ["page: View\tClass ProxyViewContainer", "page"],
    ["rotate: number\tClass SegmentedBar", "rotate"],
    ["scaleX: number\tClass SegmentedBar", "scaleX"],
    ["text: string\tInterface PromptResult", "text"],
    ["originY: number\tClass DockLayout", "originY"],
    ["originX: number\tClass DockLayout", "originX"],
    ["_nativeView: any\tClass Label", "_nativeView"],
    ["onLoaded(): void\tClass Button", "onLoaded()"],
    ["typeName: string\tClass Bindable", "typeName"],
    ["width: number\tClass AbsoluteLayout", "width"],
    ["cssClass: string\tClass Repeater", "cssClass"],
    ["onLoaded(): void\tClass Border", "onLoaded()"],
    ["opacity: number\tClass DockLayout", "opacity"],
    ["marginTop: number\tClass Button", "marginTop"],
    ["typeName: string\tClass Progress", "typeName"],
    ["scaleY: number\tClass SegmentedBar", "scaleY"],
    ["key: string\tInterface DownloadedData", "key"],
    ["minHeight: number\tClass Button", "minHeight"],
    ["translateY: number\tClass View", "translateY"],
    ["translateX: number\tClass View", "translateX"],
    ["padding: string\tClass LayoutBase", "padding"],
    ["message: string\tClass ScopeError", "message"],
    ["visibility: string\tClass View", "visibility"],
    ["pos: number\tInterface SimpleSelector", "pos"],
    ["type: *\tInterface UniversalSelector", "type"],
    ["padding: string\tClass WrapLayout", "padding"],
    ["marginLeft: number\tClass View", "marginLeft"],
    ["focus(): boolean\tClass ActionBar", "focus()"],
    ["_cssState: any\tClass ActionBar", "_cssState"],
    ["_context: any\tClass WrapLayout", "_context"],
    ["onLoaded(): void\tClass Image", "onLoaded()"],
    ["pop(): T\tClass ObservableArray<T>", "pop()"],
    ["focus(): boolean\tClass Progress", "focus()"],
    ["minHeight: number\tClass Image", "minHeight"],
    ["marginTop: number\tClass Image", "marginTop"],
    ["default: Font\tClass Font", "Static default"],
    ["_cssState: any\tClass TextView", "_cssState"],
    ["_context: any\tClass DatePicker", "_context"],
    ["isEnabled: boolean\tClass Page", "isEnabled"],
    ["_cssState: any\tClass Progress", "_cssState"],
    ["wrapped: any\tClass WrappedValue", "wrapped"],
    ["focus(): boolean\tClass TextView", "focus()"],
    ["className: string\tClass Image", "className"],
    ["android: any\tClass SegmentedBar", "android"],
    ["_context: any\tClass LayoutBase", "_context"],
    ["Add: string\tClass ChangeType", "Static Add"],
    ["color: Color\tClass AbsoluteLayout", "color"],
    ["marginTop: number\tClass Frame", "marginTop"],
    ["minHeight: number\tClass Frame", "minHeight"],
    ["os: string\tInterface PlatformContext", "os"],
    ["_cssState: any\tClass Repeater", "_cssState"],
    ["page: View\tClass ActivityIndicator", "page"],
    ["height: number\tClass ContentView", "height"],
    ["_cssState: any\tClass HtmlView", "_cssState"],
    ["height: number\tClass ImageSource", "height"],
    ["className: string\tClass Frame", "className"],
    ["margin: string\tClass ContentView", "margin"],
    ["ios: any\tInterface GestureEventData", "ios"],
    ["isLoaded: boolean\tClass Border", "isLoaded"],
    ["_context: any\tClass TimePicker", "_context"],
    ["getY(): number\tInterface Pointer", "getY()"],
    ["originY: number\tClass SearchBar", "originY"],
    ["opacity: number\tClass SearchBar", "opacity"],
    ["originX: number\tClass SearchBar", "originX"],
    ["Add: string\tClass ChangeType", "Static Add"],
    ["_nativeView: any\tClass View", "_nativeView"],
    ["rotate: number\tClass ContentView", "rotate"],
    ["scaleX: number\tClass ContentView", "scaleX"],
    ["onLoaded(): void\tClass Frame", "onLoaded()"],
    ["focus(): boolean\tClass HtmlView", "focus()"],
    ["scaleY: number\tClass ContentView", "scaleY"],
    ["cssClass: string\tClass WebView", "cssClass"],
    ["content: View\tClass ContentView", "content"],
    ["scaleX: number\tClass Placeholder", "scaleX"],
    ["rotate: number\tClass Placeholder", "rotate"],
    ["height: number\tClass StackLayout", "height"],
    ["margin: string\tClass StackLayout", "margin"],
    ["focus(): boolean\tClass Repeater", "focus()"],
    ["minHeight: number\tClass Style", "minHeight"],
    ["_domId: number\tClass StackLayout", "_domId"],
    ["fontStyle: string\tClass Style", "fontStyle"],
    ["refresh(): any\tClass Repeater", "refresh()"],
    ["_context: any\tClass ListPicker", "_context"],
    ["scaleY: number\tClass Placeholder", "scaleY"],
    ["marginTop: number\tClass Style", "marginTop"],
    ["margin: string\tClass Placeholder", "margin"],
    ["height: number\tClass Placeholder", "height"],
    ["start(): void\tClass FPSCallback", "start()"],
    ["minWidth: number\tClass WebView", "minWidth"],
    ["opacity: number\tClass ActionBar", "opacity"],
    ["originY: number\tClass ActionBar", "originY"],
    ["originX: number\tClass ActionBar", "originX"],
    ["cssType: string\tClass ActionBar", "cssType"],
    ["_domId: number\tClass ContentView", "_domId"],
    ["_domId: number\tClass Placeholder", "_domId"],
    ["source: Source\tClass SourceError", "source"],
    ["rotate: number\tClass StackLayout", "rotate"],
    ["scaleX: number\tClass StackLayout", "scaleX"],
    ["typeName: string\tClass WebView", "typeName"],
    ["scaleY: number\tClass StackLayout", "scaleY"],
    ["style: Style\tClass AbsoluteLayout", "style"],
    ["refresh(): any\tClass ListView", "refresh()"],
    ["_cssState: any\tClass TextBase", "_cssState"],
    ["className: string\tClass Label", "className"],
    ["path: string\tInterface LoadOptions", "path"],
    ["name: string\tInterface LoadOptions", "name"],
    ["opacity: number\tClass TextField", "opacity"],
    ["focus(): boolean\tClass ListView", "focus()"],
    ["fontStyle: string\tClass Style", "fontStyle"],
    ["marginTop: number\tClass Style", "marginTop"],
    ["minHeight: number\tClass Style", "minHeight"],
    ["originX: number\tClass TextField", "originX"],
    ["right: number\tInterface Thickness", "right"],
    ["cssType: string\tClass TextField", "cssType"],
    ["minHeight: number\tClass Label", "minHeight"],
    ["focus(): boolean\tClass TextBase", "focus()"],
    ["isLoaded: boolean\tClass Layout", "isLoaded"],
    ["onLoaded(): void\tClass Label", "onLoaded()"],
    ["marginTop: number\tClass Label", "marginTop"],
    ["view: View\tInterface ItemEventData", "view"],
    ["isLoaded: boolean\tClass Slider", "isLoaded"],
    ["_nativeView: any\tClass Page", "_nativeView"],
    ["_context: any\tClass DockLayout", "_context"],
    ["_cssState: any\tClass ListView", "_cssState"],
    ["originY: number\tClass TextField", "originY"],
    ["typeName: string\tClass TabView", "typeName"],
    ["getX(): number\tInterface Pointer", "getX()"],
    ["_context: any\tClass GridLayout", "_context"],
    ["cssClass: string\tClass TabView", "cssClass"],
    ["minWidth: number\tClass TabView", "minWidth"],
    ["_context: any\tClass ScrollView", "_context"],
    ["isLoaded: boolean\tClass Button", "isLoaded"],
    ["textWrap: boolean\tClass Button", "textWrap"],
    ["cssType: string\tClass SearchBar", "cssType"],
    ["url: string\tInterface LoadEventData", "url"],
    ["isLoaded: boolean\tClass Switch", "isLoaded"],
    ["pos: number\tInterface ClassSelector", "pos"],
    ["isEnabled: boolean\tClass View", "isEnabled"],
    ["curve: any\tInterface KeyframeInfo", "curve"],
    ["android: any\tInterface Pointer", "android"],
    ["_domId: number\tClass DatePicker", "_domId"],
    ["onLoaded(): void\tClass Page", "onLoaded()"],
    ["height: number\tClass LayoutBase", "height"],
    ["margin: string\tClass LayoutBase", "margin"],
    ["maxValue: number\tClass Slider", "maxValue"],
    ["_context: any\tClass TextField", "_context"],
    ["margin: string\tClass GridLayout", "margin"],
    ["height: number\tClass GridLayout", "height"],
    ["_domId: number\tClass LayoutBase", "_domId"],
    ["scaleY: number\tClass GridLayout", "scaleY"],
    ["cssClass: string\tClass Slider", "cssClass"],
    ["fontStyle: string\tClass Font", "fontStyle"],
    ["minValue: number\tClass Slider", "minValue"],
    ["minWidth: number\tClass Slider", "minWidth"],
    ["secure: boolean\tClass TextField", "secure"],
    ["rotate: number\tClass LayoutBase", "rotate"],
    ["height: number\tClass DatePicker", "height"],
    ["rotate: number\tClass GridLayout", "rotate"],
    ["_domId: number\tClass GridLayout", "_domId"],
    ["cssName: string\tClass Property", "cssName"],
    ["minWidth: number\tClass Button", "minWidth"],
    ["typeName: string\tClass Button", "typeName"],
    ["scaleY: number\tClass LayoutBase", "scaleY"],
    ["typeName: string\tClass Slider", "typeName"],
    ["scaleX: number\tClass LayoutBase", "scaleX"],
    ["android: any\tClass ContentView", "android"],
    ["scaleX: number\tClass GridLayout", "scaleX"],
    ["onLoaded(): void\tClass View", "onLoaded()"],
    ["android: any\tClass ProxyObject", "android"],
    ["_context: any\tClass SearchBar", "_context"],
    ["cssName: string\tClass Property", "cssName"],
    ["page: View\tClass CustomLayoutView", "page"],
    ["scaleX: number\tClass ScrollView", "scaleX"],
    ["scaleY: number\tClass ScrollView", "scaleY"],
    ["className: string\tClass View", "className"],
    ["minWidth: number\tClass Switch", "minWidth"],
    ["cssClass: string\tClass Border", "cssClass"],
    ["focus(): boolean\tClass TabView", "focus()"],
    ["disable(): void\tModule trace", "disable()"],
    ["extension: string\tClass File", "extension"],
    ["repeat: string\tClass Background", "repeat"],
    ["typeName: string\tClass Switch", "typeName"],
    ["rotate: number\tClass ScrollView", "rotate"],
    ["margin: string\tClass ScrollView", "margin"],
    ["minHeight: number\tClass View", "minHeight"],
    ["marginTop: number\tClass View", "marginTop"],
    ["parent: View\tClass SegmentedBar", "parent"],
    ["width: number\tClass SegmentedBar", "width"],
    ["height: number\tClass DockLayout", "height"],
    ["margin: string\tClass DockLayout", "margin"],
    ["_cssState: any\tClass TabView", "_cssState"],
    ["rotate: number\tClass DockLayout", "rotate"],
    ["content: View\tClass ScrollView", "content"],
    ["height: number\tClass ScrollView", "height"],
    ["_domId: number\tClass ScrollView", "_domId"],
    ["originY: number\tClass Progress", "originY"],
    ["cssClass: string\tClass Switch", "cssClass"],
    ["scaleX: number\tClass DockLayout", "scaleX"],
    ["page: Page\tClass NavigationButton", "page"],
    ["minWidth: number\tClass Border", "minWidth"],
    ["focus(): boolean\tClass WebView", "focus()"],
    ["_context: any\tClass ActionBar", "_context"],
    ["start(): void\tModule fps-meter", "start()"],
    ["originY: number\tClass Repeater", "originY"],
    ["android: any\tClass Placeholder", "android"],
    ["page: View\tClass EditableTextBase", "page"],
    ["android: any\tClass StackLayout", "android"],
    ["_domId: number\tClass ListPicker", "_domId"],
    ["height: number\tClass ListPicker", "height"],
    ["margin: string\tClass ListPicker", "margin"],
    ["rotate: number\tClass ListPicker", "rotate"],
    ["scaleY: number\tClass ListPicker", "scaleY"],
    ["scaleX: number\tClass ListPicker", "scaleX"],
    ["originX: number\tClass Repeater", "originX"],
    ["opacity: number\tClass Repeater", "opacity"],
    ["opacity: number\tClass HtmlView", "opacity"],
    ["start: object\tInterface Position", "start"],
    ["originX: number\tClass HtmlView", "originX"],
    ["originY: number\tClass HtmlView", "originY"],
    ["isLoaded: boolean\tClass Frame", "isLoaded"],
    ["typeName: string\tClass Border", "typeName"],
    ["cssType: string\tClass HtmlView", "cssType"],
    ["animated: boolean\tClass Frame", "animated"],
    ["pos: number\tInterface TypeSelector", "pos"],
    ["underline: number\tClass Span", "underline"],
    ["_cssState: any\tClass WebView", "_cssState"],
    ["cssType: string\tClass Repeater", "cssType"],
    ["android: any\tClass ImageSource", "android"],
    ["update(): any\tClass ActionBar", "update()"],
    ["scaleY: number\tClass DockLayout", "scaleY"],
    ["_domId: number\tClass TimePicker", "_domId"],
    ["originX: number\tClass TextView", "originX"],
    ["originY: number\tClass TextView", "originY"],
    ["opacity: number\tClass TextView", "opacity"],
    ["cssClass: string\tClass Layout", "cssClass"],
    ["minHeight: number\tClass Page", "minHeight"],
    ["marginTop: number\tClass Page", "marginTop"],
    ["margin: string\tClass WrapLayout", "margin"],
    ["layoutView: View\tClass Page", "layoutView"],
    ["margin: string\tClass TimePicker", "margin"],
    ["height: number\tClass TimePicker", "height"],
    ["isLoaded: boolean\tClass Image", "isLoaded"],
    ["minute: number\tClass TimePicker", "minute"],
    ["scaleX: number\tClass WrapLayout", "scaleX"],
    ["scaleY: number\tClass WrapLayout", "scaleY"],
    ["height: number\tClass WrapLayout", "height"],
    ["_domId: number\tClass WrapLayout", "_domId"],
    ["margin: string\tClass DatePicker", "margin"],
    ["maxDate: Date\tClass DatePicker", "maxDate"],
    ["cssType: string\tClass Progress", "cssType"],
    ["cssClass: string\tClass Button", "cssClass"],
    ["originX: number\tClass Progress", "originX"],
    ["opacity: number\tClass Progress", "opacity"],
    ["minDate: Date\tClass DatePicker", "minDate"],
    ["scaleY: number\tClass TimePicker", "scaleY"],
    ["scaleY: number\tClass DatePicker", "scaleY"],
    ["cssType: string\tClass TextView", "cssType"],
    ["scaleX: number\tClass DatePicker", "scaleX"],
    ["rotate: number\tClass TimePicker", "rotate"],
    ["scaleX: number\tClass TimePicker", "scaleX"],
    ["rotate: number\tClass DatePicker", "rotate"],
    ["rotate: number\tClass WrapLayout", "rotate"],
    ["typeName: string\tClass Layout", "typeName"],
    ["cssType: string\tClass ListView", "cssType"],
    ["textWrap: boolean\tClass Label", "textWrap"],
    ["originY: number\tClass ListView", "originY"],
    ["region: string\tInterface Device", "region"],
    ["opacity: number\tClass TextBase", "opacity"],
    ["isLoaded: boolean\tClass Label", "isLoaded"],
    ["originX: number\tClass TextBase", "originX"],
    ["_domId: number\tClass DockLayout", "_domId"],
    ["id: string\tClass ProxyViewContainer", "id"],
    ["originY: number\tClass TextBase", "originY"],
    ["minWidth: number\tClass Layout", "minWidth"],
    ["className: string\tClass Page", "className"],
    ["cssType: string\tClass TextBase", "cssType"],
    ["opacity: number\tClass ListView", "opacity"],
    ["originX: number\tClass ListView", "originX"],
    ["height: number\tClass ActionBar", "height"],
    ["_cssState: any\tClass Slider", "_cssState"],
    ["typeName: string\tClass Style", "typeName"],
    ["checked: boolean\tClass Switch", "checked"],
    ["isItalic: boolean\tClass Font", "isItalic"],
    ["_domId: number\tClass ActionBar", "_domId"],
    ["ios: any\tClass ProxyViewContainer", "ios"],
    ["device: Device\tModule platform", "device"],
    ["isKnown: boolean\tClass Folder", "isKnown"],
    ["width: number\tClass Placeholder", "width"],
    ["fontSize: number\tClass Label", "fontSize"],
    ["_context: any\tClass TextView", "_context"],
    ["_cssState: any\tClass Button", "_cssState"],
    ["isLoaded: boolean\tClass View", "isLoaded"],
    ["_cssState: any\tClass Switch", "_cssState"],
    ["parent: View\tClass Placeholder", "parent"],
    ["focus(): boolean\tClass Slider", "focus()"],
    ["minWidth: number\tClass Style", "minWidth"],
    ["scaleX: number\tClass ActionBar", "scaleX"],
    ["stop(): void\tClass FPSCallback", "stop()"],
    ["typeName: string\tClass Frame", "typeName"],
    ["focus(): boolean\tClass Switch", "focus()"],
    ["originX: number\tClass TabView", "originX"],
    ["opacity: number\tClass TabView", "opacity"],
    ["name: string\tInterface Keyframes", "name"],
    ["enabled: boolean\tModule trace", "enabled"],
    ["android: any\tClass TimePicker", "android"],
    ["originY: number\tClass TabView", "originY"],
    ["isLocked: boolean\tClass File", "isLocked"],
    ["typeName: string\tClass Label", "typeName"],
    ["minWidth: number\tClass Frame", "minWidth"],
    ["cssClass: string\tClass Label", "cssClass"],
    ["android: any\tClass WrapLayout", "android"],
    ["scaleY: number\tClass ActionBar", "scaleY"],
    ["rotate: number\tClass ActionBar", "rotate"],
    ["margin: string\tClass ActionBar", "margin"],
    ["cssType: string\tClass TabView", "cssType"],
    ["_context: any\tClass ListView", "_context"],
    ["id: string\tClass ActivityIndicator", "id"],
    ["_context: any\tClass Repeater", "_context"],
    ["cssClass: string\tClass Frame", "cssClass"],
    ["minWidth: number\tClass Label", "minWidth"],
    ["rotate: number\tClass TextField", "rotate"],
    ["scaleX: number\tClass TextField", "scaleX"],
    ["typeName: string\tClass Cache", "typeName"],
    ["_context: any\tClass Progress", "_context"],
    ["cssType: string\tClass WebView", "cssType"],
    ["_context: any\tClass HtmlView", "_context"],
    ["_cssState: any\tClass Layout", "_cssState"],
    ["minWidth: number\tClass Image", "minWidth"],
    ["isLoaded: boolean\tClass Page", "isLoaded"],
    ["typeName: string\tClass Image", "typeName"],
    ["width: number\tClass ImageSource", "width"],
    ["id: string\tInterface Node", "Optional id"],
    ["title: string\tClass TabViewItem", "title"],
    ["height: number\tClass TextField", "height"],
    ["parent: View\tClass StackLayout", "parent"],
    ["margin: string\tClass TextField", "margin"],
    ["_domId: number\tClass TextField", "_domId"],
    ["width: number\tClass StackLayout", "width"],
    ["opacity: number\tClass WebView", "opacity"],
    ["originX: number\tClass WebView", "originX"],
    ["originY: number\tClass WebView", "originY"],
    ["android: any\tClass DatePicker", "android"],
    ["loadMode: string\tClass Image", "loadMode"],
    ["cssClass: string\tClass Image", "cssClass"],
    ["typeName: string\tClass Style", "typeName"],
    ["style: Style\tClass SegmentedBar", "style"],
    ["_context: any\tClass TextBase", "_context"],
    ["_domId: number\tClass SearchBar", "_domId"],
    ["minWidth: number\tClass Style", "minWidth"],
    ["color: Color\tClass SegmentedBar", "color"],
    ["android: any\tClass ScrollView", "android"],
    ["clipPath: string\tClass Style", "clipPath"],
    ["fontSize: number\tClass Style", "fontSize"],
    ["height: number\tClass SearchBar", "height"],
    ["margin: string\tClass SearchBar", "margin"],
    ["focus(): boolean\tClass Layout", "focus()"],
    ["isAuto: boolean\tClass ItemSpec", "isAuto"],
    ["isStar: boolean\tClass ItemSpec", "isStar"],
    ["android: any\tClass DockLayout", "android"],
    ["_cssState: any\tClass Border", "_cssState"],
    ["left: number\tInterface Thickness", "left"],
    ["rotate: number\tClass SearchBar", "rotate"],
    ["scaleX: number\tClass SearchBar", "scaleX"],
    ["scaleY: number\tClass SearchBar", "scaleY"],
    ["focus(): boolean\tClass Border", "focus()"],
    ["stack: string\tClass SourceError", "stack"],
    ["android: any\tClass GridLayout", "android"],
    ["focus(): boolean\tClass Button", "focus()"],
    ["parent: View\tClass ContentView", "parent"],
    ["fontSize: number\tClass Style", "fontSize"],
    ["clipPath: string\tClass Style", "clipPath"],
    ["android: any\tClass LayoutBase", "android"],
    ["android: any\tClass ListPicker", "android"],
    ["width: number\tClass ContentView", "width"],
    ["scaleY: number\tClass TextField", "scaleY"],
    ["height: number\tClass TextView", "height"],
    ["_domId: number\tClass HtmlView", "_domId"],
    ["originY: number\tClass Switch", "originY"],
    ["width: number\tClass DatePicker", "width"],
    ["parent: View\tClass DatePicker", "parent"],
    ["height: number\tClass Repeater", "height"],
    ["height: number\tInterface Size", "height"],
    ["isIOS: boolean\tModule platform", "isIOS"],
    ["parent: View\tClass TimePicker", "parent"],
    ["_context: any\tClass WebView", "_context"],
    ["focus(): boolean\tClass Image", "focus()"],
    ["margin: string\tClass TextBase", "margin"],
    ["opacity: number\tClass Layout", "opacity"],
    ["_domId: number\tClass TextView", "_domId"],
    ["cssType: string\tClass Border", "cssType"],
    ["typeName: string\tClass Page", "typeName"],
    ["_cssState: any\tClass Label", "_cssState"],
    ["pos: number\tInterface IdSelector", "pos"],
    ["minWidth: number\tClass View", "minWidth"],
    ["originY: number\tClass Layout", "originY"],
    ["id: string\tClass EditableTextBase", "id"],
    ["_cssState: any\tClass Image", "_cssState"],
    ["month: number\tClass DatePicker", "month"],
    ["originX: number\tClass Layout", "originX"],
    ["width: number\tClass TimePicker", "width"],
    ["model: string\tInterface Device", "model"],
    ["_domId: number\tClass Progress", "_domId"],
    ["android: any\tClass SearchBar", "android"],
    ["originX: number\tClass Switch", "originX"],
    ["_domId: number\tClass Repeater", "_domId"],
    ["_domId: number\tClass TextBase", "_domId"],
    ["ios: any\tClass ActivityIndicator", "ios"],
    ["margin: string\tClass HtmlView", "margin"],
    ["scaleY: number\tClass TextView", "scaleY"],
    ["opacity: number\tClass Switch", "opacity"],
    ["rotate: number\tClass HtmlView", "rotate"],
    ["cssClass: string\tClass Page", "cssClass"],
    ["scaleY: number\tClass HtmlView", "scaleY"],
    ["width: number\tClass WrapLayout", "width"],
    ["goBack(): any\tClass WebView", "goBack()"],
    ["child: Error\tClass SourceError", "child"],
    ["scaleX: number\tClass HtmlView", "scaleX"],
    ["parent: View\tClass WrapLayout", "parent"],
    ["cssClass: string\tClass View", "cssClass"],
    ["scaleX: number\tClass TextView", "scaleX"],
    ["rotate: number\tClass TextView", "rotate"],
    ["margin: string\tClass TextView", "margin"],
    ["style: Style\tClass ContentView", "style"],
    ["opacity: number\tClass Border", "opacity"],
    ["cssType: string\tClass Layout", "cssType"],
    ["focus(): boolean\tClass Label", "focus()"],
    ["id: string\tClass CustomLayoutView", "id"],
    ["minWidth: number\tClass Page", "minWidth"],
    ["_cssState: any\tClass Frame", "_cssState"],
    ["parent: View\tClass ListPicker", "parent"],
    ["height: number\tClass HtmlView", "height"],
    ["height: number\tClass TextBase", "height"],
    ["originY: number\tClass Border", "originY"],
    ["originX: number\tClass Border", "originX"],
    ["typeName: string\tClass View", "typeName"],
    ["reload(): any\tClass WebView", "reload()"],
    ["height: number\tClass Progress", "height"],
    ["line: number\tInterface Position", "line"],
    ["parent: View\tClass ScrollView", "parent"],
    ["width: number\tClass DockLayout", "width"],
    ["padding: string\tClass Layout", "padding"],
    ["height: number\tClass ListView", "height"],
    ["cssType: string\tClass Slider", "cssType"],
    ["rotate: number\tClass ListView", "rotate"],
    ["width: number\tClass LayoutBase", "width"],
    ["scaleY: number\tClass Repeater", "scaleY"],
    ["margin: string\tClass Repeater", "margin"],
    ["width: number\tClass GridLayout", "width"],
    ["_domId: number\tClass ListView", "_domId"],
    ["stop(): void\tModule fps-meter", "stop()"],
    ["color: Color\tClass StackLayout", "color"],
    ["color: Color\tClass Placeholder", "color"],
    ["originY: number\tClass Slider", "originY"],
    ["android: any\tClass TextField", "android"],
    ["_context: any\tClass TabView", "_context"],
    ["rotate: number\tClass Repeater", "rotate"],
    ["scaleX: number\tClass Repeater", "scaleX"],
    ["type: .\tInterface ClassSelector", "type"],
    ["page: View\tClass AbsoluteLayout", "page"],
    ["parent: View\tClass DockLayout", "parent"],
    ["opacity: number\tClass Slider", "opacity"],
    ["originX: number\tClass Slider", "originX"],
    ["parent: View\tClass LayoutBase", "parent"],
    ["style: Style\tClass StackLayout", "style"],
    ["enable(): void\tModule trace", "enable()"],
    ["endEdit(): void\tClass Span", "endEdit()"],
    ["color: Color\tClass ContentView", "color"],
    ["scaleY: number\tClass Progress", "scaleY"],
    ["cssType: string\tClass Switch", "cssType"],
    ["style: Style\tClass Placeholder", "style"],
    ["apply(): void\tClass CssState", "apply()"],
    ["scaleX: number\tClass TextBase", "scaleX"],
    ["rotate: number\tClass Progress", "rotate"],
    ["margin: string\tClass Progress", "margin"],
    ["fontSize: number\tClass Span", "fontSize"],
    ["cssType: string\tClass Button", "cssType"],
    ["width: number\tClass ListPicker", "width"],
    ["rotate: number\tClass TextBase", "rotate"],
    ["focus(): boolean\tClass Frame", "focus()"],
    ["parent: View\tClass GridLayout", "parent"],
    ["scaleX: number\tClass Progress", "scaleX"],
    ["width: number\tClass ScrollView", "width"],
    ["ios: any\tInterface ItemEventData", "ios"],
    ["typeName: string\tClass Span", "typeName"],
    ["scaleX: number\tClass ListView", "scaleX"],
    ["type: string\tInterface CSSValue", "type"],
    ["originY: number\tClass Button", "originY"],
    ["stack: string\tClass ScopeError", "stack"],
    ["margin: string\tClass ListView", "margin"],
    ["fontSize: number\tClass Font", "fontSize"],
    ["opacity: number\tClass Button", "opacity"],
    ["originX: number\tClass Button", "originX"],
    ["scaleY: number\tClass ListView", "scaleY"],
    ["scaleY: number\tClass TextBase", "scaleY"],
    ["style: Style\tClass ListPicker", "style"],
    ["width: number\tClass SearchBar", "width"],
    ["android: any\tClass TextBase", "android"],
    ["cssType: string\tClass Frame", "cssType"],
    ["padding: string\tClass Style", "padding"],
    ["ios: any\tClass EditableTextBase", "ios"],
    ["cssType: string\tClass Label", "cssType"],
    ["color: Color\tClass Background", "color"],
    ["originY: number\tClass Frame", "originY"],
    ["top: number\tInterface Thickness", "top"],
    ["parent: View\tClass SearchBar", "parent"],
    ["opacity: number\tClass Label", "opacity"],
    ["originX: number\tClass Label", "originX"],
    ["originY: number\tClass Label", "originY"],
    ["originX: number\tClass Frame", "originX"],
    ["opacity: number\tClass Frame", "opacity"],
    ["color: Color\tClass TimePicker", "color"],
    ["cssType: string\tClass Image", "cssType"],
    ["_context: any\tClass Border", "_context"],
    ["color: Color\tClass GridLayout", "color"],
    ["color: Color\tClass DockLayout", "color"],
    ["_cssState: any\tClass View", "_cssState"],
    ["_cssState: any\tClass Page", "_cssState"],
    ["android: any\tClass ListView", "android"],
    ["_context: any\tClass Layout", "_context"],
    ["style: Style\tClass TimePicker", "style"],
    ["padding: string\tClass Style", "padding"],
    ["width: number\tClass TextField", "width"],
    ["margin: string\tClass WebView", "margin"],
    ["opacity: number\tClass Style", "opacity"],
    ["_context: any\tClass Switch", "_context"],
    ["ios: any\tClass CustomLayoutView", "ios"],
    ["parent: View\tClass ActionBar", "parent"],
    ["height: number\tClass WebView", "height"],
    ["android: any\tClass Progress", "android"],
    ["name: string\tClass SourceError", "name"],
    ["android: any\tClass Location", "android"],
    ["_context: any\tClass Button", "_context"],
    ["color: Color\tClass LayoutBase", "color"],
    ["title: string\tClass ActionBar", "title"],
    ["focus(): boolean\tClass Page", "focus()"],
    ["style: Style\tClass ScrollView", "style"],
    ["android: number\tClass Color", "android"],
    ["_domId: number\tClass TabView", "_domId"],
    ["height: number\tClass TabView", "height"],
    ["_context: any\tClass Slider", "_context"],
    ["color: Color\tClass ListPicker", "color"],
    ["parent: View\tClass TextField", "parent"],
    ["child: Error\tClass ScopeError", "child"],
    ["style: Style\tClass GridLayout", "style"],
    ["scaleX: number\tClass WebView", "scaleX"],
    ["rotate: number\tClass WebView", "rotate"],
    ["color: Color\tClass DatePicker", "color"],
    ["style: Style\tClass LayoutBase", "style"],
    ["scaleY: number\tClass WebView", "scaleY"],
    ["color: Color\tClass ScrollView", "color"],
    ["margin: string\tClass TabView", "margin"],
    ["android: any\tClass TextView", "android"],
    ["scaleY: number\tClass TabView", "scaleY"],
    ["android: any\tClass Repeater", "android"],
    ["stretch: string\tClass Image", "stretch"],
    ["opacity: number\tClass Style", "opacity"],
    ["color: Color\tClass WrapLayout", "color"],
    ["trace(): void\tClass Console", "trace()"],
    ["style: Style\tClass DockLayout", "style"],
    ["style: Style\tClass WrapLayout", "style"],
    ["opacity: number\tClass Image", "opacity"],
    ["originX: number\tClass Image", "originX"],
    ["focus(): boolean\tClass View", "focus()"],
    ["originY: number\tClass Image", "originY"],
    ["value: string\tInterface Token", "value"],
    ["scaleX: number\tClass TabView", "scaleX"],
    ["width: number\tClass ActionBar", "width"],
    ["_domId: number\tClass WebView", "_domId"],
    ["rotate: number\tClass TabView", "rotate"],
    ["android: any\tClass HtmlView", "android"],
    ["style: Style\tClass DatePicker", "style"],
    ["rotate: number\tClass Switch", "rotate"],
    ["margin: string\tClass Switch", "margin"],
    ["icon: string\tClass ActionItem", "icon"],
    ["scaleX: number\tClass Switch", "scaleX"],
    ["width: number\tClass ListView", "width"],
    ["android: any\tClass TabView", "android"],
    ["_context: any\tClass Label", "_context"],
    ["height: number\tClass Switch", "height"],
    ["originY: number\tClass View", "originY"],
    ["cssType: string\tClass View", "cssType"],
    ["parent: View\tClass ListView", "parent"],
    ["_domId: number\tClass Switch", "_domId"],
    ["style: Style\tClass SearchBar", "style"],
    ["size: string\tClass Background", "size"],
    ["width: number\tInterface Size", "width"],
    ["parent: Folder\tClass Folder", "parent"],
    ["scaleY: number\tClass Switch", "scaleY"],
    ["originX: number\tClass View", "originX"],
    ["text: string\tClass ActionItem", "text"],
    ["opacity: number\tClass View", "opacity"],
    ["page: View\tClass SegmentedBar", "page"],
    ["color: Color\tClass SearchBar", "color"],
    ["id: string\tClass AbsoluteLayout", "id"],
    ["width: number\tClass Repeater", "width"],
    ["speed: number\tClass Location", "speed"],
    ["parent: View\tClass TextBase", "parent"],
    ["_domId: number\tClass Layout", "_domId"],
    ["opacity: number\tClass Page", "opacity"],
    ["scaleY: number\tClass Slider", "scaleY"],
    ["scaleX: number\tClass Slider", "scaleX"],
    ["parent: View\tClass TextView", "parent"],
    ["width: number\tClass HtmlView", "width"],
    ["width: number\tClass Progress", "width"],
    ["rotate: number\tClass Slider", "rotate"],
    ["width: number\tClass TextView", "width"],
    ["end: object\tInterface Position", "end"],
    ["parent: View\tClass HtmlView", "parent"],
    ["originX: number\tClass Page", "originX"],
    ["year: number\tClass DatePicker", "year"],
    ["height: number\tClass Button", "height"],
    ["style: Style\tClass TextField", "style"],
    ["margin: string\tClass Button", "margin"],
    ["value: number\tClass Progress", "value"],
    ["parent: View\tClass Progress", "parent"],
    ["column: number\tClass Source", "column"],
    ["type: \tInterface TypeSelector", "type"],
    ["originY: number\tClass Page", "originY"],
    ["_context: any\tClass Frame", "_context"],
    ["color: Color\tClass ActionBar", "color"],
    ["android: any\tClass WebView", "android"],
    ["_domId: number\tClass Button", "_domId"],
    ["style: Style\tClass ActionBar", "style"],
    ["parent: View\tClass Repeater", "parent"],
    ["name: string\tClass ScopeError", "name"],
    ["height: number\tClass Border", "height"],
    ["uuid: string\tInterface Device", "uuid"],
    ["cssType: string\tClass Page", "cssType"],
    ["width: number\tClass TextBase", "width"],
    ["scaleX: number\tClass Button", "scaleX"],
    ["value: number\tClass ItemSpec", "value"],
    ["_domId: number\tClass Border", "_domId"],
    ["rotate: number\tClass Button", "rotate"],
    ["scaleY: number\tClass Layout", "scaleY"],
    ["scaleX: number\tClass Layout", "scaleX"],
    ["content: View\tClass Border", "content"],
    ["rotate: number\tClass Layout", "rotate"],
    ["margin: string\tClass Layout", "margin"],
    ["height: number\tClass Layout", "height"],
    ["hour: number\tClass TimePicker", "hour"],
    ["scaleY: number\tClass Border", "scaleY"],
    ["scaleY: number\tClass Button", "scaleY"],
    ["margin: string\tClass Slider", "margin"],
    ["color: Color\tClass TextField", "color"],
    ["scaleX: number\tClass Border", "scaleX"],
    ["rotate: number\tClass Border", "rotate"],
    ["_context: any\tClass Image", "_context"],
    ["margin: string\tClass Border", "margin"],
    ["raw: any\tInterface HttpContent", "raw"],
    ["height: number\tClass Slider", "height"],
    ["_domId: number\tClass Slider", "_domId"],
    ["page: View\tClass StackLayout", "page"],
    ["width: number\tClass WebView", "width"],
    ["items: any\tClass ListPicker", "items"],
    ["style: Style\tClass Repeater", "style"],
    ["parent: View\tClass WebView", "parent"],
    ["_domId: number\tClass Frame", "_domId"],
    ["view: View\tClass TabViewItem", "view"],
    ["scaleX: number\tClass Frame", "scaleX"],
    ["rotate: number\tClass Frame", "rotate"],
    ["margin: string\tClass Frame", "margin"],
    ["scaleY: number\tClass Frame", "scaleY"],
    ["_context: any\tClass View", "_context"],
    ["text: string\tClass SearchBar", "text"],
    ["page: View\tClass Placeholder", "page"],
    ["android: any\tClass Border", "android"],
    ["hint: string\tClass SearchBar", "hint"],
    ["height: number\tClass Frame", "height"],
    ["parent: View\tClass TabView", "parent"],
    ["clear(): void\tClass Cache", "clear()"],
    ["type: #\tInterface IdSelector", "type"],
    ["color: Color\tClass Repeater", "color"],
    ["type: string\tInterface Token", "type"],
    ["ios: any\tClass AbsoluteLayout", "ios"],
    ["width: number\tClass TabView", "width"],
    ["style: Style\tClass HtmlView", "style"],
    ["color: Color\tClass HtmlView", "color"],
    ["_domId: number\tClass Label", "_domId"],
    ["zIndex: number\tClass Style", "zIndex"],
    ["color: Color\tClass TextBase", "color"],
    ["style: Style\tClass Progress", "style"],
    ["page: View\tClass ContentView", "page"],
    ["rotate: number\tClass Style", "rotate"],
    ["margin: string\tClass Style", "margin"],
    ["margin: string\tClass Label", "margin"],
    ["margin: string\tClass Style", "margin"],
    ["margin: string\tClass Image", "margin"],
    ["height: number\tClass Style", "height"],
    ["isBold: boolean\tClass Font", "isBold"],
    ["height: number\tClass Image", "height"],
    ["text: string\tClass TextField", "text"],
    ["_domId: number\tClass Image", "_domId"],
    ["zIndex: number\tClass Style", "zIndex"],
    ["scaleY: number\tClass Label", "scaleY"],
    ["scaleY: number\tClass Style", "scaleY"],
    ["hint: string\tClass TextField", "hint"],
    ["rotate: number\tClass Label", "rotate"],
    ["scaleX: number\tClass Label", "scaleX"],
    ["scaleX: number\tClass Style", "scaleX"],
    ["height: number\tClass Label", "height"],
    ["color: Color\tClass ListView", "color"],
    ["rotate: number\tClass Image", "rotate"],
    ["android: any\tClass Layout", "android"],
    ["android: any\tClass Slider", "android"],
    ["height: number\tClass Style", "height"],
    ["style: Style\tClass ListView", "style"],
    ["_context: any\tClass Page", "_context"],
    ["style: Style\tClass TextBase", "style"],
    ["color: Color\tClass Progress", "color"],
    ["android: any\tClass Switch", "android"],
    ["style: Style\tClass TextView", "style"],
    ["scaleY: number\tClass Image", "scaleY"],
    ["android: any\tClass Button", "android"],
    ["scaleX: number\tClass Image", "scaleX"],
    ["color: Color\tClass TextView", "color"],
    ["name: string\tClass ClassInfo", "name"],
    ["style: Style\tClass WebView", "style"],
    ["_domId: number\tClass Page", "_domId"],
    ["parent: View\tClass Slider", "parent"],
    ["_domId: number\tClass View", "_domId"],
    ["width: number\tClass Switch", "width"],
    ["page: View\tClass LayoutBase", "page"],
    ["parent: View\tClass Layout", "parent"],
    ["parent: View\tClass Button", "parent"],
    ["text: string\tClass TextBase", "text"],
    ["parent: View\tClass Border", "parent"],
    ["value: number\tClass Slider", "value"],
    ["color: Color\tClass WebView", "color"],
    ["scaleY: number\tClass Page", "scaleY"],
    ["html: string\tClass HtmlView", "html"],
    ["hint: string\tClass TextView", "hint"],
    ["page: View\tClass TimePicker", "page"],
    ["rotate: number\tClass Page", "rotate"],
    ["time: Date\tClass TimePicker", "time"],
    ["page: View\tClass DatePicker", "page"],
    ["scaleX: number\tClass Page", "scaleX"],
    ["name: string\tClass Property", "name"],
    ["text: string\tClass TextView", "text"],
    ["content: View\tClass Page", "content"],
    ["android: any\tClass Image", "android"],
    ["width: number\tClass Slider", "width"],
    ["date: Date\tClass DatePicker", "date"],
    ["day: number\tClass DatePicker", "day"],
    ["width: number\tClass Border", "width"],
    ["margin: string\tClass Page", "margin"],
    ["page: View\tClass WrapLayout", "page"],
    ["height: number\tClass Page", "height"],
    ["color: Color\tClass TabView", "color"],
    ["width: number\tClass Layout", "width"],
    ["owner: any\tInterface Owned", "owner"],
    ["name: string\tClass Property", "name"],
    ["page: Page\tClass ActionItem", "page"],
    ["page: View\tClass ScrollView", "page"],
    ["android: any\tClass Label", "android"],
    ["page: View\tClass ListPicker", "page"],
    ["css: string\tClass StyleScope", "css"],
    ["style: Style\tClass TabView", "style"],
    ["scaleY: number\tClass View", "scaleY"],
    ["name: string\tClass Property", "name"],
    ["margin: string\tClass View", "margin"],
    ["width: number\tClass Button", "width"],
    ["rotate: number\tClass View", "rotate"],
    ["scaleX: number\tClass View", "scaleX"],
    ["parent: Folder\tClass File", "parent"],
    ["page: View\tClass DockLayout", "page"],
    ["page: View\tClass GridLayout", "page"],
    ["id: string\tClass SegmentedBar", "id"],
    ["parent: View\tClass Switch", "parent"],
    ["height: number\tClass View", "height"],
    ["color: Color\tClass Border", "color"],
    ["page: View\tClass TextField", "page"],
    ["id: string\tClass Placeholder", "id"],
    ["width: number\tClass Label", "width"],
    ["width: number\tClass Style", "width"],
    ["id: string\tClass ContentView", "id"],
    ["android: any\tClass View", "android"],
    ["items: any\tClass Repeater", "items"],
    ["page: View\tClass SearchBar", "page"],
    ["style: Style\tClass Border", "style"],
    ["page: Page\tClass ActionBar", "page"],
    ["color: Color\tClass Slider", "color"],
    ["width: number\tClass Style", "width"],
    ["style: Style\tClass Switch", "style"],
    ["style: Style\tClass Slider", "style"],
    ["color: Color\tClass Layout", "color"],
    ["width: number\tClass Frame", "width"],
    ["items: any\tClass ListView", "items"],
    ["style: Style\tClass Button", "style"],
    ["style: Style\tClass Layout", "style"],
    ["id: string\tClass StackLayout", "id"],
    ["color: Color\tClass Button", "color"],
    ["parent: View\tClass Label", "parent"],
    ["ios: any\tClass SegmentedBar", "ios"],
    ["parent: View\tClass Image", "parent"],
    ["parent: View\tClass Frame", "parent"],
    ["color: Color\tClass Switch", "color"],
    ["android: any\tClass Page", "android"],
    ["width: number\tClass Image", "width"],
    ["color: Color\tClass Frame", "color"],
    ["page: View\tClass HtmlView", "page"],
    ["id: string\tClass ScrollView", "id"],
    ["id: string\tClass GridLayout", "id"],
    ["color: Color\tClass Style", "color"],
    ["id: string\tClass WrapLayout", "id"],
    ["color: Color\tClass Style", "color"],
    ["id: string\tClass ListPicker", "id"],
    ["ios: any\tClass ImageSource", "ios"],
    ["style: Style\tClass Image", "style"],
    ["ios: any\tClass ContentView", "ios"],
    ["parent: View\tClass Page", "parent"],
    ["page: View\tClass TextView", "page"],
    ["id: string\tClass TimePicker", "id"],
    ["style: Style\tClass Label", "style"],
    ["os: string\tInterface Device", "os"],
    ["line: number\tClass Source", "line"],
    ["text: string\tClass Button", "text"],
    ["width: number\tClass Page", "width"],
    ["style: Style\tClass Frame", "style"],
    ["color: Color\tClass Label", "color"],
    ["page: View\tClass Repeater", "page"],
    ["page: View\tClass ListView", "page"],
    ["page: View\tClass TextBase", "page"],
    ["id: string\tClass LayoutBase", "id"],
    ["name: string\tClass Folder", "name"],
    ["path: string\tClass Folder", "path"],
    ["ios: any\tClass ProxyObject", "ios"],
    ["id: string\tClass DatePicker", "id"],
    ["ios: any\tClass Placeholder", "ios"],
    ["ios: any\tClass StackLayout", "ios"],
    ["parent: View\tClass View", "parent"],
    ["color: Color\tClass Image", "color"],
    ["width: number\tClass View", "width"],
    ["page: View\tClass Progress", "page"],
    ["ios: any\tInterface Pointer", "ios"],
    ["id: string\tClass DockLayout", "id"],
    ["ios: any\tClass DatePicker", "ios"],
    ["id: string\tClass TextField", "id"],
    ["url: string\tClass WebView", "url"],
    ["ios: any\tClass ListPicker", "ios"],
    ["src: string\tClass WebView", "src"],
    ["style: Style\tClass Page", "style"],
    ["page: View\tClass WebView", "page"],
    ["ios: any\tClass LayoutBase", "ios"],
    ["id: string\tClass ActionBar", "id"],
    ["ios: any\tClass GridLayout", "ios"],
    ["frame: Frame\tClass Page", "frame"],
    ["ios: any\tClass ScrollView", "ios"],
    ["style: Style\tClass View", "style"],
    ["page: View\tClass TabView", "page"],
    ["font: string\tClass Style", "font"],
    ["ios: any\tClass DockLayout", "ios"],
    ["ios: any\tClass TimePicker", "ios"],
    ["text: string\tClass Label", "text"],
    ["color: Color\tClass Page", "color"],
    ["ios: iOSFrame\tClass Frame", "ios"],
    ["id: string\tClass SearchBar", "id"],
    ["color: Color\tClass View", "color"],
    ["argb: number\tClass Color", "argb"],
    ["name: string\tClass Color", "name"],
    ["ios: any\tClass WrapLayout", "ios"],
    ["path: string\tClass File", "path"],
    ["id: string\tClass TextBase", "id"],
    ["page: View\tClass Layout", "page"],
    ["page: View\tClass Button", "page"],
    ["page: View\tClass Border", "page"],
    ["page: View\tClass Switch", "page"],
    ["ios: any\tClass SearchBar", "ios"],
    ["id: string\tClass Repeater", "id"],
    ["name: string\tClass File", "name"],
    ["page: View\tClass Slider", "page"],
    ["ios: any\tClass TextField", "ios"],
    ["uri: string\tClass Source", "uri"],
    ["id: string\tClass TextView", "id"],
    ["id: number\tClass Property", "id"],
    ["id: number\tClass Property", "id"],
    ["id: string\tClass Progress", "id"],
    ["id: number\tClass Property", "id"],
    ["id: string\tClass HtmlView", "id"],
    ["ios: any\tClass ActionBar", "ios"],
    ["text: string\tClass Span", "text"],
    ["modal: Page\tClass Page", "modal"],
    ["id: string\tClass ListView", "id"],
    ["ios: any\tClass Repeater", "ios"],
    ["ios: any\tClass Location", "ios"],
    ["id: string\tClass TabView", "id"],
    ["hex: string\tClass Color", "hex"],
    ["ios: any\tClass TextBase", "ios"],
    ["ios: any\tClass ListView", "ios"],
    ["ios: any\tClass Progress", "ios"],
    ["ios: any\tClass HtmlView", "ios"],
    ["x: number\tInterface Point", "x"],
    ["page: View\tClass Frame", "page"],
    ["id: string\tClass WebView", "id"],
    ["y: number\tInterface Point", "y"],
    ["ios: any\tClass TextView", "ios"],
    ["page: View\tClass Image", "page"],
    ["page: View\tClass Label", "page"],
    ["page: View\tClass View", "page"],
    ["ios: any\tClass TabView", "ios"],
    ["ios: any\tClass WebView", "ios"],
    ["id: string\tClass Switch", "id"],
    ["page: View\tClass Page", "page"],
    ["id: string\tClass Button", "id"],
    ["id: string\tClass Layout", "id"],
    ["css: string\tClass Page", "css"],
    ["y: number\tInterface Pair", "y"],
    ["x: number\tInterface Pair", "x"],
    ["id: string\tClass Slider", "id"],
    ["id: string\tClass Border", "id"],
    ["ios: any\tClass Slider", "ios"],
    ["ios: any\tClass Border", "ios"],
    ["ios: any\tClass Layout", "ios"],
    ["id: string\tClass Label", "id"],
    ["id: string\tClass Image", "id"],
    ["ios: any\tClass Switch", "ios"],
    ["ios: any\tClass Button", "ios"],
    ["id: string\tClass Frame", "id"],
    ["ios: any\tClass Label", "ios"],
    ["ios: any\tClass Color", "ios"],
    ["ios: any\tClass Image", "ios"],
    ["id: string\tClass Page", "id"],
    ["id: string\tClass View", "id"],
    ["src: any\tClass Image", "src"],
    ["r: number\tClass Color", "r"],
    ["b: number\tClass Color", "b"],
    ["g: number\tClass Color", "g"],
    ["ios: any\tClass View", "ios"],
    ["ios: any\tClass Page", "ios"],
    ["a: number\tClass Color", "a"]
  ]
}