{
	"scope": "source.js",

	"completions":
	[
		["description-document.getElementsByClassName()", "/*\n\tDescription:\n\tReturns an array-like object of all child elements which have all of the given class names. When called on the document object, the complete document is searched, including the root node. You may also call getElementsByClassName() on any element; it will return only elements which are descendants of the specified root element with the given class names.\n\n\tSyntax:\n\tvar elements = document.getElementsByClassName(names); // or:\nvar elements = rootElement.getElementsByClassName(names);\n*/"],
		["description-document.execCommand()", "/*\n\tDescription:\n\tWhen an HTML document has been switched to designMode, the document object exposes the execCommand method which allows one to run commands to manipulate the contents of the editable region. Most commands affect the document's selection (bold, italics, etc), while others insert new elements (adding a link) or affect an entire line (indenting). When using contentEditable, calling execCommand will affect the currently active editable element.\n\n\tSyntax:\n\texecCommand(String aCommandName, Boolean aShowDefaultUI, String aValueArgument)\n*/"],
		["description-document.ononline", "/*\n\t\"online\" event is fired on the <body> of each page when the browser switches between online and offline mode. Additionally, the events bubble up from document.body, to document, ending at window. Both events are non-cancellable (you can't prevent the user from coming online, or going offline).\nwindow.navigator.onLine returns boolean true if the browser is online and false if it is definitely offline (disconnected from the network). The online and offline events are fired when the value of this attribute changes.\n*/"],
		["description-document.location", "/*\n\tDescription:\n\tThe document.location read-only property returns a Location object, which contains information about the URL of the document and provides methods for changing that URL and load another URL.\n\n\tSyntax:\n\tlocationObj = document.location\ndocument.location = 'http://www.mozilla.org' // Equivalent to document.location.href = 'http://www.mozilla.org'\n*/"],
		["description-document.getElementsByTagName()", "/*\n\tDescription:\n\tReturns an HTMLCollection of elements with the given tag name. The complete document is searched, including the root node. The returned HTMLCollection is live, meaning that it updates itself automatically to stay in sync with the DOM tree without having to call document.getElementsByTagName() again.\n\n\tSyntax:\n\tvar elements = document.getElementsByTagName(name);\n*/"],
		["description-document.elementFromPoint()", "/*\n\tDescription:\n\tReturns the element from the document whose elementFromPoint method is being called which is the topmost element which lies under the given point.  To get an element, specify the point via coordinates, in CSS pixels, relative to the upper-left-most point in the window or frame containing the document.\n\n\tSyntax:\n\tvar element = document.elementFromPoint(x, y);\n*/"],
		["description-document.createElement()", "/*\n\tDescription:\n\tIn an HTML document creates the specified HTML element or HTMLUnknownElement if the element is not known. In a XUL document creates the specified XUL element. In other documents creates an element with a null namespaceURI.\n\n\tSyntax:\n\tvar element = document.createElement(tagName);\n*/"],
		["description-document.readyState", "/*\n\tDescription:\n\tReturns \"loading\" while the document is loading, \"interactive\" once it is finished parsing but still loading sub-resources, and \"complete\" once it has loaded.\n\n\tSyntax:\n\tvar string = document.readyState;\n*/"],
		["description-document.contentType", "/*\n\tDescription:\n\tReturns the MIME type that the document is being rendered as.  This may come from HTTP headers or other sources of MIME information, and might be affected by automatic type conversions performed by either the browser or extensions.\n\n\tSyntax:\n\tcontentType = document.contentType;\n*/"],
		["description-document.adoptNode()", "/*\n\tDescription:\n\tAdopts a node from an external document. The node and its subtree is removed from the document it's in (if any), and its ownerdocument is changed to the current document. The node can then be inserted into the current document.\n\n\tSyntax:\n\tnode = document.adoptNode(externalNode);\n*/"],
		["description-document.caretPositionFromPoint()", "/*\n\tDescription:\n\tThis method is used to retrieve the caret position in a document based on two coordinates. A CaretPosition is returned, containing the found DOM node and the character offset in that node.\n\n\tSyntax:\n\tvar cp = document.caretPositionFromPoint(float x, float y);\n*/"],
		["description-document.pointerLockElement", "/*\n\tDescription:\n\tThe pointerLockElement property provides the element set as the target for mouse events while the pointer is locked. It is null if lock is pending, pointer is unlocked, or the target is in another document.\n\n\tSyntax:\n\tvar element = document.pointerLockElement;\n*/"],
		["description-document.querySelectorAll()", "/*\n\tDescription:\n\tReturns a list of the elements within the document (using depth-first pre-order traversal of the document's nodes) that match the specified group of selectors. The object returned is a NodeList.\n\n\tSyntax:\n\telementList = document.querySelectorAll(selectors);\n*/"],
		["description-document.enableStyleSheetsForSet()", "/*\n\tDescription:\n\tEnables the style sheets matching the specified name in the current style sheet set, and disables all other style sheets (except those without a title, which are always enabled).\n\n\tSyntax:\n\tdocument.enableStyleSheetsForSet(name)\n*/"],
		["description-document.doctype", "/*\n\tDescription:\n\tReturns the document Type Declaration (DTD) associated with current document. The returned object implements the DocumentType interface. Use DOMImplementation.createDocumentType() to create a DocumentType.\n\n\tSyntax:\n\tdoctype = document.doctype;\n*/"],
		["description-document.hasFocus()", "/*\n\tDescription:\n\tReturns a Boolean value indicating whether the document or any element inside the document has focus. This method can be used to determine whether the active element in a document has focus.\n\n\tSyntax:\n\tfocused = document.hasFocus();\n*/"],
		["description-document.getElementsByTagNameNS()", "/*\n\tDescription:\n\tReturns a list of elements with the given tag name belonging to the given namespace. The complete document is searched, including the root node.\n\n\tSyntax:\n\telements = document.getElementsByTagNameNS(namespace, name)\n*/"],
		["description-document.querySelector()", "/*\n\tDescription:\n\tReturns the first element within the document (using depth-first pre-order traversal of the document's nodes) that matches the specified group of selectors.\n\n\tSyntax:\n\telement = document.querySelector(selectors);\n*/"],
		["description-document.selectedStyleSheetSet", "/*\n\tDescription:\n\tIndicates the name of the style sheet set that's currently in use.\n\n\tSyntax:\n\tcurrentStyleSheetSet = document.selectedStyleSheetSet\n\ndocument.selectedStyleSheet = newStyleSheetSet\n*/"],
		["description-document.styleSheets", "/*\n\tDescription:\n\tThe document.styleSheets read-only property returns a StyleSheetList of StyleSheet  objects for stylesheets explicitly linked into or embedded in a document.\n\n\tSyntax:\n\tvar styleSheetList = document.styleSheets;\n*/"],
		["description-document.releaseCapture()", "/*\n\tDescription:\n\tReleases mouse capture if it's currently enabled on an element within this document. Enabling mouse capture on an element is done by calling element.setCapture().\n\n\tSyntax:\n\tdocument.releaseCapture()\n*/"],
		["description-document.lastStyleSheetSet", "/*\n\tDescription:\n\tReturns the last enabled style sheet set; this property's value changes whenever the document.selectedStyleSheetSet property is changed.\n\n\tSyntax:\n\tlastStyleSheetSet = document.lastStyleSheetSet\n*/"],
		["description-document.createTreeWalker()", "/*\n\tDescription:\n\tThe document.createTreeWalker() creator method returns a newly created TreeWalker object.\n\n\tSyntax:\n\ttreeWalker = document.createTreeWalker(root, whatToShow, filter, entityReferenceExpansion);\n*/"],
		["description-document.createProcessingInstruction()", "/*\n\tDescription:\n\tcreateProcessingInstruction() creates a new processing instruction node, and returns it.\n\n\tSyntax:\n\tProcessing instruction node = document.createProcessingInstruction(target, data)\n*/"],
		["description-document.domain", "/*\n\tDescription:\n\tGets/sets the domain portion of the origin of the current document, as used by the same origin policy.\n\n\tSyntax:\n\tvar domainString = document.domain;\ndocument.domain = string;\n*/"],
		["description-document.activeElement", "/*\n\tDescription:\n\tReturns the currently focused element, that is, the element that will get keystroke events if the user types any. This attribute is read only.\n\n\tSyntax:\n\tvar curElement = document.activeElement;\n*/"],
		["description-document.evaluate()", "/*\n\tDescription:\n\tReturns an XPathResult based on an XPath expression and other given parameters.\n\n\tSyntax:\n\tvar xpathResult = document.evaluate(xpathExpression, contextNode, namespaceResolver, resultType, result);\n*/"],
		["description-document.plugins", "/*\n\tDescription:\n\tReturns an HTMLCollection object containing one or more HTMLEmbedElements or null which represent the <embed> elements in the current document.\n\n\tSyntax:\n\tembedArrayObj = document.plugins\n*/"],
		["description-document.createNSResolver()", "/*\n\tDescription:\n\tCreates an XPathNSResolver which resolves namespaces with respect to the definitions in scope for a specified node.\n\n\tSyntax:\n\tnsResolver = document.createNSResolver(node);\n*/"],
		["description-document.createExpression()", "/*\n\tDescription:\n\tThis method compiles an XPathExpression which can then be used for (repeated) evaluations.\n\n\tSyntax:\n\txpathExpr = document.createExpression(xpathText, namespaceURLMapper);\n*/"],
		["description-document.documentElement", "/*\n\tDescription:\n\tReturns the Element that is the root element of the document (for example, the <html> element for HTML documents).\n\n\tSyntax:\n\tvar element = document.documentElement;\n*/"],
		["description-document.body", "/*\n\tDescription:\n\tReturns the <body> or <frameset> node of the current document, or null if no such element exists.\n\n\tSyntax:\n\tvar objRef = document.body; \ndocument.body = objRef;\n*/"],
		["description-document.queryCommandSupported()", "/*\n\tDescription:\n\tReports whether or not the specified editor query command is supported by the browser.\n\n\tSyntax:\n\tisSupported = document.queryCommandSupported(command);\n*/"],
		["description-document.importNode()", "/*\n\tDescription:\n\tCreates a copy of a node from an external document that can be inserted into the current document.\n\n\tSyntax:\n\tvar node = document.importNode(externalNode, deep);\n*/"],
		["description-document.links", "/*\n\tDescription:\n\tThe links property returns a collection of all <area> elements and <a> elements in a document with a value for the href attribute.\n\n\tSyntax:\n\tnodeList = document.links\n*/"],
		["description-document.loadOverlay()", "/*\n\tDescription:\n\tLoads a XUL overlay and merges it with the current document, notifying an observer when the merge is complete.\n\n\tSyntax:\n\tdocument.loadOverlay(url, observer);\n*/"],
		["description-document.head", "/*\n\tDescription:\n\tReturns the <head> element of the current document. If there are more than one <head> elements, the first one is returned.\n\n\tSyntax:\n\tvar objRef = document.head;\n*/"],
		["description-document.createElementNS()", "/*\n\tDescription:\n\tCreates an element with the specified namespace URI and qualified name.\n\n\tSyntax:\n\telement = document.createElementNS(namespaceURI, qualifiedName);\n*/"],
		["description-document.designMode", "/*\n\tDescription:\n\tdocument.designMode controls whether the entire document is editable.\n\n\tSyntax:\n\tiframe_node.contentDocument.designMode = \"on\";\n*/"],
		["description-document.createCDATASection()", "/*\n\tDescription:\n\tcreateCDATASection() creates a new CDATA section node, and returns it.\n\n\tSyntax:\n\tCDATASectionNode = document.createCDATASection(data)\n*/"],
		["description-document.preferredStyleSheetSet", "/*\n\tDescription:\n\tReturns the preferred style sheet set as set by the page author.\n\n\tSyntax:\n\tpreferredStyleSheetSet = document.preferredStyleSheetSet\n*/"],
		["description-document.scripts", "/*\n\tDescription:\n\tReturns a list of the <script> elements in the document. The returned object is an HTMLCollection.\n\n\tSyntax:\n\tvar scriptList = document.scripts;\n*/"],
		["description-document.lastModified", "/*\n\tDescription:\n\tReturns a string containing the date and time on which the current document was last modified.\n\n\tSyntax:\n\tstring = document.lastModified;\n*/"],
		["description-document.defaultView", "/*\n\tDescription:\n\tIn browsers returns the window object associated with the document or null if none available.\n\n\tSyntax:\n\tvar win = document.defaultView;\n*/"],
		["description-document.getElementsByName()", "/*\n\tDescription:\n\tReturns a nodelist collection with a given name in the (X)HTML document.\n\n\tSyntax:\n\telements = document.getElementsByName(name)\n*/"],
		["description-document.currentScript", "/*\n\tDescription:\n\tReturns the <script> element whose script is currently being processed.\n\n\tSyntax:\n\tvar curScriptElement = document.currentScript;\n*/"],
		["description-document.forms", "/*\n\tDescription:\n\tforms returns a collection (an HTMLCollection) of the form elements within the current document.\n\n\tSyntax:\n\tcollection = document.forms;\n*/"],
		["description-document.createNodeIterator()", "/*\n\tDescription:\n\tReturns a new NodeIterator object.\n\n\tSyntax:\n\tvar nodeIterator = document.createNodeIterator(root, whatToShow, filter);\n*/"],
		["description-document.documentURI", "/*\n\tDescription:\n\tReturns the document location as string. It is read-only per DOM4 specification.\n\n\tSyntax:\n\tvar string = document.documentURI;\n*/"],
		["description-document.images", "/*\n\tDescription:\n\tdocument.images returns a collection of the images in the current HTML document.\n\n\tSyntax:\n\tvar htmlCollection = document.images;\n*/"],
		["description-document.implementation", "/*\n\tDescription:\n\tReturns a DOMImplementation object associated with the current document.\n\n\tSyntax:\n\tDOMImpObj = document.implementation;\n*/"],
		["description-document.createAttribute()", "/*\n\tDescription:\n\tcreateAttribute creates a new attribute node, and returns it.\n\n\tSyntax:\n\tattribute = document.createAttribute(name)\n*/"],
		["description-document.createComment()", "/*\n\tDescription:\n\tcreateComment() creates a new comment node, and returns it.\n\n\tSyntax:\n\tCommentNode = document.createComment(data)\n*/"],
		["description-document.styleSheetSets", "/*\n\tDescription:\n\tReturns a live list of all of the currently-available style sheet sets.\n\n\tSyntax:\n\tsets = document.styleSheetSets\n*/"],
		["description-document.title", "/*\n\tDescription:\n\tGets or sets the title of the document.\n\n\tSyntax:\n\tvar docTitle = document.title;\ndocument.title = newTitle;\n*/"],
		["description-document.createdocumentFragment()", "/*\n\tDescription:\n\tCreates a new empty documentFragment.\n\n\tSyntax:\n\tvar docFragment = document.createDocumentFragment();\n*/"],
		["description-document.close()", "/*\n\tDescription:\n\tThe document.close() method finishes writing to a document, opened with document.open().\n\n\tSyntax:\n\tdocument.close();\n*/"],
		["description-document.compatMode", "/*\n\tDescription:\n\tIndicates whether the document is rendered in Quirks mode or Standards mode.\n\n\tSyntax:\n\tmode = document.compatMode\n*/"],
		["description-document.documentURIObject", "/*\n\tDescription:\n\tReturns an nsIURI object representing the URI of the document.\n\n\tSyntax:\n\tvar uri = doc.documentURIObject;\n*/"],
		["description-document.embeds", "/*\n\tDescription:\n\tembeds returns a list of the embedded OBJECTS within the current document.\n\n\tSyntax:\n\tnodeList = document.embeds\n*/"],
		["description-document.writeln()", "/*\n\tDescription:\n\tWrites a string of text followed by a newline character to a document.\n\n\tSyntax:\n\tdocument.writeln(line);\n*/"],
		["description-document.write()", "/*\n\tDescription:\n\tWrites a string of text to a document stream opened by document.open().\n\n\tSyntax:\n\tdocument.write(markup);\n*/"],
		["description-document.applets", "/*\n\tDescription:\n\tapplets returns an ordered list of the applets within a document.\n\n\tSyntax:\n\tnodeList = document.applets\n*/"],
		["description-document.getElementById()", "/*\n\tDescription:\n\tReturns a reference to the element by its ID.\n\n\tSyntax:\n\telement = document.getElementById(id);\n*/"],
		["description-document.anchors", "/*\n\tDescription:\n\tanchors returns a list of all of the anchors in the document.\n\n\tSyntax:\n\tnodeList = document.anchors;\n*/"],
		["description-document.tooltipNode", "/*\n\tDescription:\n\tReturns the node which is the target of the current tooltip.\n\n\tSyntax:\n\tdocument.tooltipNode;\n*/"],
		["description-document.characterSet", "/*\n\tDescription:\n\tReturns the character encoding of the current document.\n\n\tSyntax:\n\tdocument.characterSet\n*/"],
		["description-document.referrer", "/*\n\tDescription:\n\tReturns the URI of the page that linked to this page.\n\n\tSyntax:\n\tstring = document.referrer;\n*/"],
		["description-document.open()", "/*\n\tDescription:\n\tThe document.open() method opens a document for writing.\n\n\tSyntax:\n\tdocument.open();\n*/"],
		["description-document.createTextNode()", "/*\n\tDescription:\n\tCreates a new Text node.\n\n\tSyntax:\n\ttext = document.createTextNode(data);\n*/"],
		["description-document.createRange()", "/*\n\tDescription:\n\tReturns a new Range object.\n\n\tSyntax:\n\trange = document.createRange();\n*/"],
		["description-document.URL", "/*\n\tDescription:\n\tReturns the string URL of the HTML document.\n\n\tSyntax:\n\tstring = document.URL\n*/"],
		["description-document.onoffline", "/*\n\tThis event is fired on body and bubbles up when navigator.onLine property changes and becomes false.\n*/"]
	]
}