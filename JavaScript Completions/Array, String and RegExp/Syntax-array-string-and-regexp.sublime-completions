{
  "scope": "source.js",

  "completions":
  [	
    { "trigger": "-syntax-Array", "contents": "/* [element0, element1, ..., elementN]\nnew Array(element0, element1[, ...[, elementN]])\nnew Array(arrayLength) */" },
    { "trigger": "-syntax-String", "contents": "/* 'string text' */" },
  	{ "trigger": "-syntax-RegExp", "contents": "/* /pattern/flags; new RegExp(pattern [, flags]); */" },
    { "trigger": "-syntax-RegExp.prototype.exec()", "contents": "/* regexObj.exec(str) */" },
    { "trigger": "-syntax-RegExp.prototype.test()", "contents": "/* regexObj.test(str) */" },
    { "trigger": "-syntax-RegExp.prototype.global", "contents": "/* var regex = new RegExp(\"foo\", \"g\"); console.log(regex.global) // true */" },
    { "trigger": "-syntax-RegExp.prototype.ignoreCase", "contents": "/* var regex = new RegExp(\"foo\", \"i\"); console.log(regex.ignoreCase) // true */" },
    { "trigger": "-syntax-RegExp.lastIndex", "contents": "/* lastIndex = regExpObj.lastIndex; */" },
    { "trigger": "-syntax-RegExp.prototype.multiline", "contents": "/* var regex = new RegExp(\"foo\", \"m\"); console.log(regex.multiline) // true */" },
    { "trigger": "-syntax-RegExp.prototype.source", "contents": "/* var regex = new RegExp(\"fooBar\", \"g\"); console.log(regex.source) // \"fooBar\" */" },
    { "trigger": "-syntax-RegExp.prototype.toString()", "contents": "/* regexObj.toString() */" },
    { "trigger": "-syntax-String.prototype.match()", "contents": "/* str.match(regexp); */" },
    { "trigger": "-syntax-String.prototype.replace()", "contents": "/* str.replace(regexp|substr, newSubStr|function[,   flags]); */" },
    { "trigger": "-syntax-String.prototype.search()", "contents": "/* str.search(regexp) */" },
    { "trigger": "-syntax-String.prototype.split()", "contents": "/* str.split([separator][, limit]) */" },
    { "trigger": "-syntax-String.fromCharCode()", "contents": "/* String.fromCharCode(num1, ..., numN) */" },
    { "trigger": "-syntax-String.prototype.charAt()", "contents": "/* str.charAt(index) */" },
    { "trigger": "-syntax-String.prototype.charCodeAt()", "contents": "/* str.charCodeAt(index) */" },
    { "trigger": "-syntax-String.prototype.concat()", "contents": "/* str.concat(string2, string3[, ..., stringN]) */" },
    { "trigger": "-syntax-String.prototype.indexOf()", "contents": "/* str.indexOf(searchValue[, fromIndex]) */" },
    { "trigger": "-syntax-String.prototype.lastIndexOf()", "contents": "/* str.lastIndexOf(searchValue[, fromIndex]) */" },
    { "trigger": "-syntax-String.prototype.localeCompare()", "contents": "/* str.localeCompare(compareString [, locales [, options]]) */" },
    { "trigger": "-syntax-String.prototype.slice()", "contents": "/* str.slice(beginSlice[, endSlice]) */" },
    { "trigger": "-syntax-String.prototype.substr()", "contents": "/* str.substr(start[, length]) */" },
    { "trigger": "-syntax-String.prototype.substring()", "contents": "/* str.substring(indexA[, indexB]) */" },
    { "trigger": "-syntax-String.prototype.toLocaleLowerCase()", "contents": "/* str.toLocaleLowerCase() */" },
    { "trigger": "-syntax-String.prototype.toLocaleUpperCase()", "contents": "/* str.toLocaleUpperCase() */" },
    { "trigger": "-syntax-String.prototype.toString()", "contents": "/* str.toString() */" },
    { "trigger": "-syntax-String.prototype.toUpperCase()", "contents": "/* str.toUpperCase() */" },
    { "trigger": "-syntax-String.prototype.toLowerCase()", "contents": "/* str.toLowerCase() */" },
    { "trigger": "-syntax-String.prototype.trim()", "contents": "/* str.trim() */" },
    { "trigger": "-syntax-String.prototype.valueOf()", "contents": "/* str.valueOf() */" },
    { "trigger": "-syntax-Array.length", "contents": "/* arr.length */" },
    { "trigger": "-syntax-Array.isArray()", "contents": "/* Array.isArray(obj) */" },
    { "trigger": "-syntax-Array.prototype.pop()", "contents": "/* arr.pop() */" },
    { "trigger": "-syntax-Array.prototype.push()", "contents": "/* arr.push(element1, ..., elementN) */" },
    { "trigger": "-syntax-Array.prototype.reverse()", "contents": "/* arr.reverse() */" },
    { "trigger": "-syntax-Array.prototype.shift()", "contents": "/* arr.shift() */" },
    { "trigger": "-syntax-Array.prototype.splice()", "contents": "/* array.splice(index, howMany[, element1[, ...[, elementN]]])\narray.splice(index) // SpiderMonkey/Firefox extension */" },
    { "trigger": "-syntax-Array.prototype.unshift()", "contents": "/* arr.unshift([element1[, ...[, elementN]]]) */" },
    { "trigger": "-syntax-Array.prototype.concat()", "contents": "/* var new_array = old_array.concat(value1[, value2[, ...[, valueN]]]) */" },
    { "trigger": "-syntax-Array.prototype.join()", "contents": "/* str = arr.join([separator = ',']) */" },
    { "trigger": "-syntax-Array.prototype.slice()", "contents": "/* arr.slice([begin[, end]]) */" },
    { "trigger": "-syntax-Array.prototype.toString()", "contents": "/* arr.toString() */" },
    { "trigger": "-syntax-Array.prototype.toLocaleString()", "contents": "/* arr.toLocaleString(); */" },
    { "trigger": "-syntax-Array.prototype.indexOf()", "contents": "/* arr.indexOf(searchElement[, fromIndex = 0]) */" },
    { "trigger": "-syntax-Array.prototype.lastIndexOf()", "contents": "/* arr.lastIndexOf(searchElement[, fromIndex = arr.length]) */" },
    { "trigger": "-syntax-Array.prototype.forEach()", "contents": "/* arr.forEach(callback[, thisArg]) */" },
    { "trigger": "-syntax-Array.prototype.every()", "contents": "/* arr.every(callback[, thisArg]) */" },
    { "trigger": "-syntax-Array.prototype.some()", "contents": "/* arr.some(callback[, thisArg]) */" },
    { "trigger": "-syntax-Array.prototype.filter()", "contents": "/* arr.filter(callback[, thisArg]) */" },
    { "trigger": "-syntax-Array.prototype.map()", "contents": "/* arr.map(callback[, thisArg]) */" },
    { "trigger": "-syntax-Array.prototype.reduce()", "contents": "/* arr.reduce(callback[, initialValue]) */" },
    { "trigger": "-syntax-Array.prototype.reduceRight()", "contents": "/* arr.reduceRight(callback[, initialValue]) */" },
    { "trigger": "-syntax-Array.prototype.sort()", "contents": "/* arr.sort([compareFunction]) */" },
  ]
}