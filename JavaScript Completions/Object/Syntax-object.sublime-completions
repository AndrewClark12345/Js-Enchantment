{
  "scope": "source.js",

  "completions":
  [
  	{ "trigger": "-syntax-Object", "contents": "/* // Object initialiser or literal\n{ [ nameValuePair1 [, nameValuePair2 [, ...nameValuePairN] ] ] }\n\n// Called as a constructor\nnew Object( [ value ] ) */" },
    { "trigger": "-syntax-Object.create()", "contents": "/* Object.create(proto[, propertiesObject]) */" },
    { "trigger": "-syntax-Object.defineProperty()", "contents": "/* Object.defineProperty(obj, prop, descriptor) */" },
    { "trigger": "-syntax-Object.defineProperties()", "contents": "/* Object.defineProperties(obj, props) */" },
    { "trigger": "-syntax-Object.freeze()", "contents": "/* Object.freeze(obj) */" },
    { "trigger": "-syntax-Object.getOwnPropertyDescriptor()", "contents": "/* Object.getOwnPropertyDescriptor(obj, prop) */" },
    { "trigger": "-syntax-Object.getOwnPropertyNames()", "contents": "/* Object.getOwnPropertyNames(obj) */" },
    { "trigger": "-syntax-Object.getPrototypeOf()", "contents": "/* Object.getPrototypeOf(obj) */" },
    { "trigger": "-syntax-Object.isExtensible()", "contents": "/* Object.isExtensible(obj) */" },
    { "trigger": "-syntax-Object.isFrozen()", "contents": "/* Object.isFrozen(obj) */" },
    { "trigger": "-syntax-Object.isSealed()", "contents": "/* Object.isSealed(obj) */" },
    { "trigger": "-syntax-Object.keys()", "contents": "/* Object.keys(obj) */" },
    { "trigger": "-syntax-Object.preventExtensions()", "contents": "/* Object.preventExtensions(obj) */" },
    { "trigger": "-syntax-Object.seal()", "contents": "/* Object.seal(obj) */" },
    { "trigger": "-syntax-Object.prototype.hasOwnProperty()", "contents": "/* obj.hasOwnProperty(prop) */" },
    { "trigger": "-syntax-Object.prototype.isPrototypeOf()", "contents": "/* prototypeObj.isPrototypeOf(obj) */" },
    { "trigger": "-syntax-Object.prototype.propertyIsEnumerable()", "contents": "/* obj.propertyIsEnumerable(prop) */" },
    { "trigger": "-syntax-Object.prototype.toLocaleString()", "contents": "/* obj.toLocaleString(); */" },
    { "trigger": "-syntax-Object.prototype.toString()", "contents": "/* obj.toString() */" },
    { "trigger": "-syntax-Object.prototype.valueOf()", "contents": "/* object.valueOf() */" },
  ]
}