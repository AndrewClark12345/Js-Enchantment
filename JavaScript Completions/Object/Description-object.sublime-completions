{
  "scope": "source.js",

  "completions":
  [
  	{ "trigger": "-description-Object", "contents": "/*\n\tThe Object constructor creates an object wrapper.\n*/" },
    { "trigger": "-description-Object.create()", "contents": "/*\n\tThe Object.create() method creates a new object with the specified prototype object and properties.\n*/" },
    { "trigger": "-description-Object.defineProperty()", "contents": "/*\n\tThe Object.defineProperty() method defines a new property directly on an object, or modifies an existing property on an object, and returns the object.\n*/" },
    { "trigger": "-description-Object.defineProperties()", "contents": "/*\n\tThe Object.defineProperties() method defines new or modifies existing properties directly on an object, returning the object.\n*/" },
    { "trigger": "-description-Object.freeze()", "contents": "/*\n\tThe Object.freeze() method freezes an object: that is, prevents new properties from being added to it; prevents existing properties from being removed; and prevents existing properties, or their enumerability, configurability, or writability, from being changed. In essence the object is made effectively immutable. The method returns the object being frozen.\n*/" },
    { "trigger": "-description-Object.getOwnPropertyDescriptor()", "contents": "/*\n\tThe Object.getOwnPropertyDescriptor() method returns a property descriptor for an own property (that is, one directly present on an object, not present by dint of being along an object's prototype chain) of a given object.\n*/" },
    { "trigger": "-description-Object.getOwnPropertyNames()", "contents": "/*\n\tThe Object.getOwnPropertyNames() method returns an array of all properties (enumerable or not) found directly upon a given object.\n*/" },
    { "trigger": "-description-Object.getPrototypeOf()", "contents": "/*\n\tThe Object.getPrototypeOf() method returns the prototype (i.e. the internal [[Prototype]]) of the specified object.\n*/" },
    { "trigger": "-description-Object.isExtensible()", "contents": "/*\n\tThe Object.isExtensible() method determines if an object is extensible (whether it can have new properties added to it).\n*/" },
    { "trigger": "-description-Object.isFrozen()", "contents": "/*\n\tThe Object.isFrozen() determines if an object is frozen.\n*/" },
    { "trigger": "-description-Object.isSealed()", "contents": "/*\n\tThe Object.isSealed() method determines if an object is sealed.\n*/" },
    { "trigger": "-description-Object.keys()", "contents": "/*\n\tThe Object.keys() method returns an array of a given object's own enumerable properties, in the same order as that provided by a for...in loop (the difference being that a for-in loop enumerates properties in the prototype chain as well).\n*/" },
    { "trigger": "-description-Object.preventExtensions()", "contents": "/*\n\tThe Object.preventExtensions() method prevents new properties from ever being added to an object (i.e. prevents future extensions to the object).\n*/" },
    { "trigger": "-description-Object.seal()", "contents": "/*\n\tThe Object.seal() method seals an object, preventing new properties from being added to it and marking all existing properties as non-configurable. Values of present properties can still be changed as long as they are writable.\n*/" },
    { "trigger": "-description-Object.prototype.hasOwnProperty()", "contents": "/*\n\tThe hasOwnProperty() method returns a boolean indicating whether the object has the specified property.\n*/" },
    { "trigger": "-description-Object.prototype.isPrototypeOf()", "contents": "/*\n\tThe isPrototypeOf() method tests for an object in another object's prototype chain.\n*/" },
    { "trigger": "-description-Object.prototype.propertyIsEnumerable()", "contents": "/*\n\tThe propertyIsEnumerable() method returns a Boolean indicating whether the specified property is enumerable.\n*/" },
    { "trigger": "-description-Object.prototype.toLocaleString()", "contents": "/*\n\tThe toLocaleString() method returns a string representing the object. This method is meant to be overriden by derived objects for locale-specific purposes.\n*/" },
    { "trigger": "-description-Object.prototype.toString()", "contents": "/*\n\tThe toString() method returns a string representing object.\n*/" },
    { "trigger": "-description-Object.prototype.valueOf()", "contents": "/*\n\tThe valueOf() method returns the primitive value of the specified object.\n*/" },
  ]
}