{
  "scope": "source.js",

  "completions":
  [
    { "trigger": "-description-Element.attributes", "contents": "/*\n\tThe Element.attributes property returns a live collection of all attribute nodes registered to the specified node. It is a NamedNodeMap, not an Array, so it has no Array methods and the Attr nodes' indexes may differ among browsers. To be more specific, attributes is a key/value pair of strings that represents any information regarding that attribute.\n*/" },
    { "trigger": "-description-Element.classList", "contents": "/*\n\tclassList returns a token list of the class attribute of the element.\n*/" },
    { "trigger": "-description-Element.className", "contents": "/*\n\tclassName gets and sets the value of the class attribute of the specified element.\n*/" },
    { "trigger": "-description-Element.clientHeight", "contents": "/*\n\tThe Element.clientHeight read-only property returns the inner height of an element in pixels, including padding but not the horizontal scrollbar height, border, or margin.\n*/" },
    { "trigger": "-description-Element.clientLeft", "contents": "/*\n\tThe width of the left border of an element in pixels. It includes the width of the vertical scrollbar if the text direction of the element is right–to–left and if there is an overflow causing a left vertical scrollbar to be rendered. clientLeft does not include the left margin or the left padding. clientLeft is read-only.\n*/" },
    { "trigger": "-description-Element.clientTop", "contents": "/*\n\tThe width of the top border of an element in pixels. It does not include the top margin or padding. clientTop is read-only.\n*/" },
    { "trigger": "-description-Element.clientWidth", "contents": "/*\n\tThe Element.clientWidth property is the inner width of an element in pixels. It includes padding but not the vertical scrollbar (if present, if rendered), border or margin.\n*/" },
    { "trigger": "-description-Element.id", "contents": "/*\n\tGets or sets the element's identifier (attribute id).\n*/" },
    { "trigger": "-description-Element.innerHTML", "contents": "/*\n\tinnerHTML sets or gets the HTML syntax describing the element's descendants.\n*/" },
    { "trigger": "-description-Element.length", "contents": "/*\n\tlength returns the number of items in a NodeList.\n*/" },
    { "trigger": "-description-Element.name", "contents": "/*\n\tname gets or sets the name property of a DOM object; it only applies to the following elements: <a>, <applet>, <button>, <form>, <frame>, <iframe>, <img>, <input>, <map>, <meta>, <object>, <param>, <select>, and <textarea>.\n*/" },
    { "trigger": "-description-Element.onafterscriptexecute", "contents": "/*\n\tFired when a static <script> element  finishes executing its script. Does not fire if the element is added dynamically, eg with appendChild().\n*/" },
    { "trigger": "-description-Element.onbeforescriptexecute", "contents": "/*\n\tFired when the code in a <script> element declared in an HTML document is about to start executing. Does not fire if the element is added dynamically, eg with appendChild().\n*/" },
    { "trigger": "-description-Element.outerHTML", "contents": "/*\n\tThe outerHTML attribute of the element DOM interface gets the serialized HTML fragment describing the element including its descendants. It can be set to replace the element with nodes parsed from the given string.\n*/" },
    { "trigger": "-description-Element.scrollHeight", "contents": "/*\n\tThe Element.scrollHeight read-only attribute is a measurement of the height of an element's content, including content not visible on the screen due to overflow. The scrollHeight value is equal to the minimum clientHeight the element would require in order to fit all the content in the viewpoint without using a vertical scrollbar. It includes the element padding but not its margin.\n*/" },
    { "trigger": "-description-Element.scrollLeft", "contents": "/*\n\tThe Element.scrollLeft property gets or sets the number of pixels that an element's content is scrolled to the left.\n*/" },
    { "trigger": "-description-Element.scrollTop", "contents": "/*\n\tThe Element.scrollTop property gets or sets the number of pixels that the content of an element is scrolled upward. An element's scrollTop is a measurement of the distance of an element's top to its topmost visible content. When an element content does not generate a vertical scrollbar, then its scrollTop value defaults to 0.\n*/" },
    { "trigger": "-description-Element.scrollWidth", "contents": "/*\n\tThe Element.scrollWidth read–only property returns either the width in pixels of the content of an element or the width of the element itself, whichever is greater. If the element is wider than its content area (for example, if there are scroll bars for scrolling through the content), the scrollWidth is larger than the clientWidth.\n*/" },
    { "trigger": "-description-Element.tagName", "contents": "/*\n\tReturns the name of the element.\n*/" },
    { "trigger": "-description-Element.getAttribute()", "contents": "/*\n\tgetAttribute() returns the value of a specified attribute on the element. If the given attribute does not exist, the value returned will either be null or \"\" (the empty string); see Notes for details.\n*/" },
    { "trigger": "-description-Element.getAttributeNS()", "contents": "/*\n\tgetAttributeNS returns the string value of the attribute with the specified namespace and name. If the named attribute does not exist, the value returned will either be null or \"\" (the empty string); see Notes for details.\n*/" },
    { "trigger": "-description-Element.getAttributeNode()", "contents": "/*\n\tReturns the specified attribute of the specified element, as an Attr node.\n*/" },
    { "trigger": "-description-Element.getAttributeNodeNS()", "contents": "/*\n\tReturns the Attr node for the attribute with the given namespace and name.\n*/" },
    { "trigger": "-description-Element.getBoundingClientRect()", "contents": "/*\n\tThe Element.getBoundingClientRect() method returns a text rectangle object that encloses a group of text rectangles.\n*/" },
    { "trigger": "-description-Element.getClientRects()", "contents": "/*\n\tThe Element.getClientRects() method returns a collection of rectangles that indicate the bounding rectangles for each box in a client.\n*/" },
    { "trigger": "-description-Element.hasAttribute()", "contents": "/*\n\thasAttribute returns a boolean value indicating whether the specified element has the specified attribute or not.\n*/" },
    { "trigger": "-description-Element.hasAttributeNS()", "contents": "/*\n\thasAttributeNS returns a boolean value indicating whether the current element has the specified attribute.\n*/" },
    { "trigger": "-description-Element.insertAdjacentHTML()", "contents": "/*\n\tinsertAdjacentHTML() parses the specified text as HTML or XML and inserts the resulting nodes into the DOM tree at a specified position. It does not reparse the element it is being used on and thus it does not corrupt the existing elements inside the element. This, and avoiding the extra step of serialization make it much faster than direct innerHTML manipulation.\n*/" },
    { "trigger": "-description-Element.removeAttribute()", "contents": "/*\n\tremoveAttribute removes an attribute from the specified element.\n*/" },
    { "trigger": "-description-Element.removeAttributeNS()", "contents": "/*\n\tremoveAttributeNS removes the specified attribute from an element.\n*/" },
    { "trigger": "-description-Element.removeAttributeNode()", "contents": "/*\n\tremoveAttributeNode removes the specified attribute from the current element.\n*/" },
    { "trigger": "-description-Element.setAttribute()", "contents": "/*\n\tAdds a new attribute or changes the value of an existing attribute on the specified element.\n*/" },
    { "trigger": "-description-Element.setAttributeNS()", "contents": "/*\n\tsetAttributeNS adds a new attribute or changes the value of an attribute with the given namespace and name.\n*/" },
    { "trigger": "-description-Element.setAttributeNode()", "contents": "/*\n\tsetAttributeNode() adds a new Attr node to the specified element.\n*/" },
    { "trigger": "-description-Element.setAttributeNodeNS()", "contents": "/*\n\tsetAttributeNodeNS adds a new namespaced attribute node to an element.\n*/" },
  ]
}