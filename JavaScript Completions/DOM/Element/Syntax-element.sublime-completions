{
  "scope": "source.js",

  "completions":
  [
  	{ "trigger": "-syntax-Element.attributes", "contents": "/* var attr = element.attributes; */" },
  	{ "trigger": "-syntax-Element.classList", "contents": "/* var elementClasses = elementNodeReference.classList; */" },
  	{ "trigger": "-syntax-Element.className", "contents": "/* var cName = elementNodeReference.className;\nelementNodeReference.className = cName; */" },
  	{ "trigger": "-syntax-Element.clientHeight", "contents": "/* var h = element.clientHeight; */" },
  	{ "trigger": "-syntax-Element.clientLeft", "contents": "/* var left = element.clientLeft; */" },
  	{ "trigger": "-syntax-Element.clientTop", "contents": "/* vartop = element.clientTop; */" },
  	{ "trigger": "-syntax-Element.clientWidth", "contents": "/* var intElemClientWidth = element.clientWidth; */" },
  	{ "trigger": "-syntax-Element.id", "contents": "/* var idStr = element.id; // Get the id.\nelement.id = idStr; // Set the id */" },
  	{ "trigger": "-syntax-Element.innerHTML", "contents": "/* var content = element.innerHTML;\nelement.innerHTML = content; */" },
  	{ "trigger": "-syntax-Element.length", "contents": "/* numItems =nodeList.length */" },
  	{ "trigger": "-syntax-Element.name", "contents": "/* HTMLElement.name = string;\nvar elName = HTMLElement.name;\n\nvar fControl = HTMLFormElement.elementName;\nvar controlCollection = HTMLFormElement.elements.elementName; */" },
  	{ "trigger": "-syntax-Element.onafterscriptexecute", "contents": "/* document.onafterscriptexecute = funcRef; */" },
  	{ "trigger": "-syntax-Element.onbeforescriptexecute", "contents": "/* document.onbeforescriptexecute = funcRef; */" },
  	{ "trigger": "-syntax-Element.outerHTML", "contents": "/* var content = element.outerHTML;\nelement.outerHTML = content; */" },
  	{ "trigger": "-syntax-Element.scrollHeight", "contents": "/* var intElemScrollHeight = document.getElementById(id_attribute_value).scrollHeight; */" },
  	{ "trigger": "-syntax-Element.scrollLeft", "contents": "/* // Get the number of pixels scrolled\nvar sLeft = element.scrollLeft;\n// Set the number of pixels scrolled\nelement.scrollLeft = 10; */" },
  	{ "trigger": "-syntax-Element.scrollTop", "contents": "/* // Get the number of pixels scrolled\nvar  intElemScrollTop = element.scrollTop;\n// Set the number of pixels scrolled\nelement.scrollTop = intValue; */" },
  	{ "trigger": "-syntax-Element.scrollWidth", "contents": "/* var xScrollWidth = element.scrollWidth; */" },
  	{ "trigger": "-syntax-Element.tagName", "contents": "/* elementName = element.tagName */" },
  	{ "trigger": "-syntax-Element.getAttribute()", "contents": "/* var attribute = element.getAttribute(attributeName); */" },
  	{ "trigger": "-syntax-Element.getAttributeNS()", "contents": "/* attrVal = element.getAttributeNS(namespace, name) */" },
  	{ "trigger": "-syntax-Element.getAttributeNode()", "contents": "/* var attrNode = element.getAttributeNode(attrName); */" },
  	{ "trigger": "-syntax-Element.getAttributeNodeNS()", "contents": "/* attributeNode = element.getAttributeNodeNS(namespace,nodeName) */" },
  	{ "trigger": "-syntax-Element.getBoundingClientRect()", "contents": "/* rectObject = object.getBoundingClientRect(); */" },
  	{ "trigger": "-syntax-Element.getClientRects()", "contents": "/* var rectCollection = object.getClientRects(); */" },
  	{ "trigger": "-syntax-Element.hasAttribute()", "contents": "/* var result = element.hasAttribute(attName); */" },
  	{ "trigger": "-syntax-Element.hasAttributeNS()", "contents": "/* result =element.hasAttributeNS(namespace,localName) */" },
  	{ "trigger": "-syntax-Element.insertAdjacentHTML()", "contents": "/* element.insertAdjacentHTML(position, text); */" },
  	{ "trigger": "-syntax-Element.removeAttribute()", "contents": "/* element.removeAttribute(attrName); */" },
  	{ "trigger": "-syntax-Element.removeAttributeNS()", "contents": "/* element.removeAttributeNS(namespace,attrName); */" },
  	{ "trigger": "-syntax-Element.removeAttributeNode()", "contents": "/* removedAttr = element.removeAttributeNode(attributeNode) */" },
  	{ "trigger": "-syntax-Element.setAttribute()", "contents": "/* element.setAttribute(name, value); */" },
  	{ "trigger": "-syntax-Element.setAttributeNS()", "contents": "/* element.setAttributeNS(namespace,name,value) */" },
  	{ "trigger": "-syntax-Element.setAttributeNode()", "contents": "/* var replacedAttr = element.setAttributeNode(attribute); */" },
  	{ "trigger": "-syntax-Element.setAttributeNodeNS()", "contents": "/* replacedAttr = element.setAttributeNodeNS(attributeNode) */" },
  ]
}