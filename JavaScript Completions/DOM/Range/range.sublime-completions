{
  "scope": "source.js",

  "completions":
  [
    {
      "trigger": "collapsed\tRange",
      "contents": "collapsed"
    },
    {
      "trigger": "commonAncestorContainer\tRange",
      "contents": "commonAncestorContainer"
    },
    {
      "trigger": "endContainer\tRange",
      "contents": "endContainer"
    },
    {
      "trigger": "endOffset\tRange",
      "contents": "endOffset"
    },
    {
      "trigger": "startContainer\tRange",
      "contents": "startContainer"
    },
    {
      "trigger": "startOffset\tRange",
      "contents": "startOffset"
    },
    {
      "trigger": "cloneContents()\tRange",
      "contents": "cloneContents()"
    },
    {
      "trigger": "cloneRange()\tRange",
      "contents": "cloneRange()"
    },
    {
      "trigger": "collapse(toStart)\tRange",
      "contents": "collapse(${1:toStart})"
    },
    {
      "trigger": "compareBoundaryPoints(how, sourceRange)\tRange",
      "contents": "compareBoundaryPoints(${1:how}, ${2:sourceRange})"
    },
    {
      "trigger": "deleteContents()\tRange",
      "contents": "deleteContents()"
    },
    {
      "trigger": "detach()\tRange",
      "contents": "detach()"
    },
    {
      "trigger": "extractContents()\tRange",
      "contents": "extractContents()"
    },
    {
      "trigger": "insertNode(newNode)\tRange",
      "contents": "insertNode(${1:newNode})"
    },
    {
      "trigger": "selectNode(referenceNode)\tRange",
      "contents": "selectNode(${1:referenceNode})"
    },
    {
      "trigger": "selectNodeContents(referenceNode)\tRange",
      "contents": "selectNodeContents(${1:referenceNode})"
    },
    {
      "trigger": "setEnd(endNode, endOffset)\tRange",
      "contents": "setEnd(${1:endNode}, ${2:endOffset})"
    },
    {
      "trigger": "setEndAfter(referenceNode)\tRange",
      "contents": "setEndAfter(${1:referenceNode})"
    },
    {
      "trigger": "setEndBefore(referenceNode)\tRange",
      "contents": "setEndBefore(${1:referenceNode})"
    },
    {
      "trigger": "setStart(startNode, startOffset)\tRange",
      "contents": "setStart(${1:startNode}, ${2:startOffset})"
    },
    {
      "trigger": "setStartAfter(referenceNode)\tRange",
      "contents": "setStartAfter(${1:referenceNode})"
    },
    {
      "trigger": "setStartBefore(referenceNode)\tRange",
      "contents": "setStartBefore(${1:referenceNode})"
    },
    {
      "trigger": "surroundContents(newNode)\tRange",
      "contents": "surroundContents(${1:newNode})"
    },
    {
      "trigger": "toString()\tRange",
      "contents": "toString()"
    }
  ]
}