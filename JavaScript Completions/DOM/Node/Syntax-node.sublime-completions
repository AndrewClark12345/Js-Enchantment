{
  "scope": "source.js",

  "completions":
  [
  	{ "trigger": "-syntax-Node.baseURI", "contents": "/* var baseURI = node.baseURI; */" },
  	{ "trigger": "-syntax-Node.childNodes", "contents": "/* var ndList = elementNodeReference.childNodes; */" },
  	{ "trigger": "-syntax-Node.firstChild", "contents": "/* var childNode = node.firstChild; */" },
  	{ "trigger": "-syntax-Node.lastChild", "contents": "/* var last_child = element.lastChild */" },
  	{ "trigger": "-syntax-Node.localName", "contents": "/* name = element.localName */" },
  	{ "trigger": "-syntax-Node.namespaceURI", "contents": "/* namespace = node.namespaceURI */" },
  	{ "trigger": "-syntax-Node.nextSibling", "contents": "/* nextNode = node.nextSibling */" },
  	{ "trigger": "-syntax-Node.nodeName", "contents": "/* var str = node.nodeName; */" },
  	{ "trigger": "-syntax-Node.nodeType", "contents": "/* var type = node.nodeType; */" },
  	{ "trigger": "-syntax-Node.nodeValue", "contents": "/* value = node.nodeValue; */" },
  	{ "trigger": "-syntax-Node.ownerdocument", "contents": "/* document = element.ownerDocument */" },
  	{ "trigger": "-syntax-Node.parentElement", "contents": "/* parentElement = node.parentElement */" },
  	{ "trigger": "-syntax-Node.parentNode", "contents": "/* parentNode = node.parentNode */" },
  	{ "trigger": "-syntax-Node.prefix", "contents": "/* string = element.prefix */" },
  	{ "trigger": "-syntax-Node.previousSibling", "contents": "/* previousNode = node.previousSibling; */" },
  	{ "trigger": "-syntax-Node.textContent", "contents": "/* var text = element.textContent;\nelement.textContent = \"this is some sample text\"; */" },
  	{ "trigger": "-syntax-Node.appendChild()", "contents": "/* var aChild = element.appendChild(aChild); */" },
  	{ "trigger": "-syntax-Node.cloneNode()", "contents": "/* var dupNode = node.cloneNode(deep); */" },
  	{ "trigger": "-syntax-Node.comparedocumentPosition()", "contents": "/* node.compareDocumentPosition( otherNode ) */" },
  	{ "trigger": "-syntax-Node.contains()", "contents": "/* node.contains( otherNode ) */" },
  	{ "trigger": "-syntax-Node.hasAttributes()", "contents": "/* result = targetNode.hasAttributes(); */" },
  	{ "trigger": "-syntax-Node.hasChildNodes()", "contents": "/* node.hasChildNodes() */" },
  	{ "trigger": "-syntax-Node.insertBefore()", "contents": "/* var insertedElement = parentElement.insertBefore(newElement, referenceElement); */" },
  	{ "trigger": "-syntax-Node.isDefaultNamespace()", "contents": "/* result = node.isDefaultNamespace(namespaceURI) */" },
  	{ "trigger": "-syntax-Node.isEqualNode()", "contents": "/* var isEqualNode = node.isEqualNode(arg); */" },
  	{ "trigger": "-syntax-Node.normalize()", "contents": "/* element.normalize(); */" },
  	{ "trigger": "-syntax-Node.removeChild()", "contents": "/* var oldChild = element.removeChild(child);\nelement.removeChild(child); */" },
  	{ "trigger": "-syntax-Node.replaceChild()", "contents": "/* replacedNode = parentNode.replaceChild(newChild, oldChild); */" },
  ]
}