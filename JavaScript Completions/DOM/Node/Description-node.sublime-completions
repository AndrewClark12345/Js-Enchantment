{
  "scope": "source.js",

  "completions":
  [
    { "trigger": "-description-Node.baseURI", "contents": "/*\n\tThe Node.baseURI read-only property returns the absolute base URL of a node.\n*/" },
    { "trigger": "-description-Node.childNodes", "contents": "/*\n\tThe Node.childNodes read-only property returns a live collection of child nodes of the given element.\n*/" },
    { "trigger": "-description-Node.firstChild", "contents": "/*\n\tThe Node.firstChild read-only property returns the node's first child in the tree, or null if the node is childless. If the node is a document, it returns the first node in the list of its direct children.\n*/" },
    { "trigger": "-description-Node.lastChild", "contents": "/*\n\tThe Node.lastChild read-only property returns the last child of the node. If its parent is an element, then the child is generally an element node, a text node, or a comment node. It returns null if there are no child elements.\n*/" },
    { "trigger": "-description-Node.localName", "contents": "/*\n\tThe Node.localName read-only property returns the local part of the qualified name of this node.\n*/" },
    { "trigger": "-description-Node.namespaceURI", "contents": "/*\n\tThe Node.namespaceURI read-only property returns the namespace URI of the node, or null if the node is not in a namespace (read-only). When the node is a document, it returns the XML namespace for the current document.\n*/" },
    { "trigger": "-description-Node.nextSibling", "contents": "/*\n\tThe Node.nextSibling read-only property returns the node immediately following the specified one in its parent's childNodes list, or null if the specified node is the last node in that list.\n*/" },
    { "trigger": "-description-Node.nodeName", "contents": "/*\n\tThe Node.nodeName read-only property returns the name of the current node as a string.\n*/" },
    { "trigger": "-description-Node.nodeType", "contents": "/*\n\tThe read-only Node.nodeType property returns an unsigned short integer representing the type of the node.\n*/" },
    { "trigger": "-description-Node.nodeValue", "contents": "/*\n\tThe Node.nodeValue property returns or sets the value of the current node.\n*/" },
    { "trigger": "-description-Node.ownerdocument", "contents": "/*\n\tThe Node.ownerdocument read-only property returns the top-level document object for this node.\n*/" },
    { "trigger": "-description-Node.parentElement", "contents": "/*\n\tThe Node.parentElement read-only property returns the DOM node's parent Element, or null if the node either has no parent, or its parent isn't a DOM Element.\n*/" },
    { "trigger": "-description-Node.parentNode", "contents": "/*\n\tThe Node.parentNode read-only property returns the parent of the specified node in the DOM tree.\n*/" },
    { "trigger": "-description-Node.prefix", "contents": "/*\n\tThe Node.prefix read-only property returns the namespace prefix of the specified node, or null if no prefix is specified. This property is read only.\n*/" },
    { "trigger": "-description-Node.previousSibling", "contents": "/*\n\tThe Node.previousSibling read-only property returns the node immediately preceding the specified one in its parent's childNodes list, null if the specified node is the first in that list.\n*/" },
    { "trigger": "-description-Node.textContent", "contents": "/*\n\tThe Node.textContent property represents the text content of a node and its descendants.\n*/" },
    { "trigger": "-description-Node.appendChild()", "contents": "/*\n\tThe Node.appendChild() method adds a node to the end of the list of children of a specified parent node. If the given child is a reference to an existing node in the document, appendChild() moves it from its current position to the new position (i.e. there is no requirement to remove the node from its parent node before appending it to some other node).\n*/" },
    { "trigger": "-description-Node.cloneNode()", "contents": "/*\n\tThe Node.cloneNode() method returns a duplicate of the node on which this method was called.\n*/" },
    { "trigger": "-description-Node.comparedocumentPosition()", "contents": "/*\n\tThe Node.comparedocumentPosition() method compares the position of the current node against another node in any other document.\n*/" },
    { "trigger": "-description-Node.contains()", "contents": "/*\n\tThe Node.contains() method returns a Boolean value indicating whether a node is a descendant of a given node. or not.\n*/" },
    { "trigger": "-description-Node.hasAttributes()", "contents": "/*\n\tThe Node.hasAttributes() method returns a Boolean value of true or false, indicating if the current element has any attributes or not.\n*/" },
    { "trigger": "-description-Node.hasChildNodes()", "contents": "/*\n\tThe Node.hasChildNodes() method returns a Boolean value indicating whether the current Node has child nodes or not.\n*/" },
    { "trigger": "-description-Node.insertBefore()", "contents": "/*\n\tThe Node.insertBefore() method inserts the specified node before a reference element as a child of the current node.\n*/" },
    { "trigger": "-description-Node.isDefaultNamespace()", "contents": "/*\n\tThe Node.isDefaultNamespace()method accepts a namespace URI as an argument and returns a Boolean with a value of true if the namespace is the default namespace on the given node or false if not.\n*/" },
    { "trigger": "-description-Node.isEqualNode()", "contents": "/*\n\tThe Node.isEqualNode() tests whether two nodes are equal.\n*/" },
    { "trigger": "-description-Node.lookupNamespaceURI()", "contents": "/*\n\tThe Node.lookupNamespaceURI() method takes a prefix and returns the namespace URI associated with it on the given node if found (and null if not). Supplying null for the prefix will return the default namespace.\n*/" },
    { "trigger": "-description-Node.lookupPrefix()", "contents": "/*\n\tThe Node.lookupPrefix() method returns a DOMString containing the prefix for a given namespace URI, if present, and null if not. When multiple prefixes are possible, the result is implementation-dependent.\n*/" },
    { "trigger": "-description-Node.normalize()", "contents": "/*\n\tThe Node.normalize() method puts the specified node and all of its sub-tree into a \"normalized\" form. In a normalized sub-tree, no text nodes in the sub-tree are empty and there are no adjacent text nodes.\n*/" },
    { "trigger": "-description-Node.removeChild()", "contents": "/*\n\tThe Node.removeChild() method removes a child node from the DOM. Returns removed node.\n*/" },
    { "trigger": "-description-Node.replaceChild()", "contents": "/*\n\tThe Node.replaceChild() method replaces one child node of the specified element with another.\n*/" },
  ]
}