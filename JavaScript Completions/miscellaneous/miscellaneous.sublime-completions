{
  "scope": "source.js",

  "completions":
  [
    "var ",
    "let ",
    "const ",
    "null",
    "undefined",
    "NaN",
    "Infinity",
    "true",
    "false",
    "continue;",
    "break;",
    "return",
    "'use strict';",
    "new Boolean()",
    "new Image()",
    "new Option()",
    "new FormData(${1:form})",

    { "trigger": "function with name", "contents": "function ${1:function_name} (${2:argument}) {\n\t ${3:// body... } \n}"},
    { "trigger": "function without name", "contents": "function (${1:argument}) {\n\t ${2:/* body... */} \n}"},
    { "trigger": "anonymous function", "contents": ";(function(){\n\t$1\n})();"},
    { "trigger": "prototype", "contents": "${1:class_name}.prototype.${2:method_name} = function(${3:argument}){\n\t ${4:// body... } \n};"},
    { "trigger": "for()", "contents": "for(var i = 0, length1 = ${1:array}.length; i < length1; i++){\n\t${1:array}[i]\n}" },
    { "trigger": "for-j", "contents": "for(var j = 0, length2 = ${1:array}.length; j < length2; j++){\n\t${1:array}[j]\n}" },
    { "trigger": "for-k", "contents": "for(var k = 0, length3 = ${1:array}.length; k < length3; k++){\n\t${1:array}[k]\n}" },
    { "trigger": "for in", "contents": "for (${1:variable} in object) {\n\t${2:// statement}\n}" },
    { "trigger": "for of", "contents": "for (${1:variable} of object) {\n\t${2:// statement}\n}" },
    { "trigger": "forEach", "contents": "${1:array}.forEach( function(${2:element}, ${3:index}) {\n\t${4:// statements}\n});" },
    { "trigger": "while()", "contents": "while (${1:condition}) {\n\t${2:// statement}\n}" },
    { "trigger": "do while()", "contents": "do{\n\t// statement\n} while (${1:condition});" },
    { "trigger": "if()", "contents": "if (${1:condition}) {\n\t${2:// statement}\n}" },
    { "trigger": "if else", "contents": "if (${1:condition}) {\n\t${2:// statement}\n} else {\n\t${3:// statement}\n}" },
    { "trigger": "else if()", "contents": "else if (${1:condition}) {\n\t\n}" },
    { "trigger": "else", "contents": "else {\n\t$1\n}" },
    { "trigger": "Conditional operator", "contents": "(${1:condition}) ? ${2:val1} : ${3:val2};" },
    { "trigger": "switch()", "contents": "switch (${1:expression}) {\n\tcase ${2:label_1}:\n\t\t${3:// statements_1}\n\t\tbreak;\n\tdefault:\n\t\t${4:// statements_def}\n\t\tbreak;\n}"},
    { "trigger": "try catch", "contents": "try {\n\t${1:// statements}\n} catch(e) {\n\t${2:// statements}\n\tconsole.log(e);\n}"},
    { "trigger": "try catch finally", "contents": "try {\n\t${1:// statements}\n} catch(e) {\n\t${2:// statements}\n\tconsole.log(e);\n} finally {\n\t${3:// statements}\n}"},
    { "trigger": "console.log()", "contents": "console.log(${1:''})"},
    { "trigger": "void()", "contents": "void(${1:''})"},
    { "trigger": "throw", "contents": "throw $1"},
    { "trigger": "ajax request", "contents": "var ajax = new XMLHttpRequest();\najax.onreadystatechange = function() {\n\tif (ajax.readyState == 4 && ajax.status == 200) {\n\t\t${1:var response = ajax.responseText;}\n\t}\n};\najax.open(${2:method}, ${3:URL}, ${4:true});\najax.setRequestHeader(\"Content-type\", ${5:\"application/json\"});\najax.send(${6:data});" },

    "\\u0009",
    "\\u000B",
    "\\u000C",
    "\\u0020",
    "\\u000A",
    "\\u000D",
    "\\u0008",
    "\\u0022",
    "\\u0027",
    "\\u005C",

    { "trigger": "Logical AND (&&)", "contents": "${1:expr1} && ${2:expr2}" },
    { "trigger": "Logical OR (||)", "contents": "${1:expr1} || ${2:expr2}" },
    { "trigger": "Logical NOT (!)", "contents": "!${1:expr}" },
    { "trigger": "Equal (==)", "contents": "${1:expr1} == ${2:expr2}" },
    { "trigger": "Not equal (!=)", "contents": "${1:expr1} != ${2:expr2}" },
    { "trigger": "Strict equal (===)", "contents": "${1:expr1} === ${2:expr2}" },
    { "trigger": "Strict not equal (!==)", "contents": "${1:expr1} !=== ${2:expr2}" },
    { "trigger": "Greater than (>)", "contents": "${1:expr1} > ${2:expr2}" },
    { "trigger": "Greater than or equal (>=)", "contents": "${1:expr1} >= ${2:expr2}" },
    { "trigger": "Less than (<)", "contents": "${1:expr1} < ${2:expr2}" },
    { "trigger": "Less than or equal (<=)", "contents": "${1:expr1} <= ${2:expr2}" },
    { "trigger": "Modulus (%)", "contents": "${1:expr1} % ${2:expr2}" },
    { "trigger": "PostIncrement (expr++)", "contents": "${1:expr}++" },
    { "trigger": "PostDecrement (expr--)", "contents": "${1:expr}--" },
    { "trigger": "PreIncrement (++expr)", "contents": "++${1:expr}" },
    { "trigger": "PreDecrement (--expr)", "contents": "--${1:expr}" },
    { "trigger": "Unary negation (-)", "contents": "-${1:expr}" },
    { "trigger": "Bitwise AND (&)", "contents": "${1:expr1} & ${2:expr2}" },
    { "trigger": "Bitwise OR (|)", "contents": "${1:expr1} | ${2:expr2}" },
    { "trigger": "Bitwise XOR (^)", "contents": "${1:expr1} ^ ${2:expr2}" },
    { "trigger": "Bitwise NOT (~)", "contents": "${1:expr1} ~ ${2:expr2}" },
    { "trigger": "Left shift (<<)", "contents": "${1:expr1} << ${2:expr2}" },
    { "trigger": "Sign-propagating right shift (>>)", "contents": "${1:expr1} >> ${2:expr2}" },
    { "trigger": "Zero-fill right shift (>>>)", "contents": "${1:expr1} >>> ${2:expr2}" }

  ]
}
