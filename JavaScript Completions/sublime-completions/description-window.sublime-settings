{
    "scope": "source.js",

    "completions":
    [
        ["description-window", "/*\n\tThe window object represents a window containing a DOM document; the document property points to the DOM document loaded in that window. A window for a given document can be obtained using the document.defaultView property.\n*/"],
        ["description-window.closed", "/*\n\tDescription:\n\tThis read-only property indicates whether the referenced window is closed or not.\n\n\tSyntax:\n\tisClosed = window.closed;\n*/"],
        ["description-window.content", "/*\n\tDescription:\n\tReturns a window object for the primary content window. This is useful in XUL windows that have a <browser> (or tabbrowser or <iframe>) with type=\"content-primary\" attribute on it - the most famous example is Firefox main window, browser.xul. In such cases, content returns a reference to the Window object for the document currently displayed in the browser. It is a shortcut for browserRef.contentWindow.\n\n\tSyntax:\n\tvar windowObject = window.content;\n*/"],
        ["description-window.devicePixelRatio", "/*\n\tDescription:\n\tThe window.devicePixelRatio read-only property returns the ratio between physical pixels and device independent pixels in the current display.\n\n\tSyntax:\n\tvalue = window.devicePixelRatio;\n*/"],
        ["description-window.dialogArguments", "/*\n\tDescription:\n\tThe dialogArguments property returns the parameters that were passed into the window.showModalDialog() method. This lets you determine what parameters were specified when the modal dialog was created.\n\n\tSyntax:\n\tvalue = window.dialogArguments;\n*/"],
        ["description-window.frameElement", "/*\n\tDescription:\n\tReturns the element (such as <iframe> or <object>) in which the window is embedded, or null if the window is top-level.\n\n\tSyntax:\n\tframeEl = window.frameElement;\n*/"],
        ["description-window.fullScreen", "/*\n\tDescription:\n\tThis property indicates whether the window is displayed in full screen mode or not. It is only reliable in Gecko 1.9 (Firefox 3) and later, see the Notes below.\n\n\tSyntax:\n\tisInFullScreen = window.fullScreen;\n*/"],
        ["description-window.history", "/*\n\tDescription:\n\tThe window.history read-only property returns a reference to the History object, which provides an interface for manipulating the browser session history (pages visited in the tab or frame that the current page is loaded in).\n\n\tSyntax:\n\tvar historyObj = window.history;\n*/"],
        ["description-window.innerHeight", "/*\n\tDescription:\n\tHeight (in pixels) of the browser window viewport including, if rendered, the horizontal scrollbar.\n\n\tSyntax:\n\tvar intViewportHeight = window.innerHeight;\n*/"],
        ["description-window.innerWidth", "/*\n\tDescription:\n\tWidth (in pixels) of the browser window viewport including, if rendered, the vertical scrollbar.\n\n\tSyntax:\n\tvar intViewportWidth = window.innerWidth;\n*/"],
        ["description-window.location", "/*\n\tDescription:\n\tThe window.location read-only property returns a Location object with information about the current location of the document.\n\n\tSyntax:\n\toldLocation = window.location;\nwindow.location = newLocation;\n*/"],
        ["description-window.locationbar", "/*\n\tDescription:\n\tReturns the locationbar object, whose visibility can be checked.\n\n\tSyntax:\n\tobjRef = window.locationbar\n*/"],
        ["description-window.name", "/*\n\tDescription:\n\tGets/sets the name of the window.\n\n\tSyntax:\n\tstring = window.name;\nwindow.name = string;\n*/"],
        ["description-window.navigator", "/*\n\tDescription:\n\tThe window.navigator read-only property returns a reference to the Navigator object, which can be queried for information about the application running the script.\n\n\tSyntax:\n\tnavigatorObject = window.navigator\n*/"],
        ["description-window.opener", "/*\n\tDescription:\n\tReturns a reference to the window that opened this current window.\n\n\tSyntax:\n\tobjRef = window.opener;\n*/"],
        ["description-window.outerHeight", "/*\n\tDescription:\n\twindow.outerHeight gets the height in pixels of the whole browser window. It represents the height of the whole browser window including sidebar (if expanded), window chrome and window resizing borders/handles.\n\n\tSyntax:\n\toutWindowHeight = window.outerHeight;\n*/"],
        ["description-window.outerWidth", "/*\n\tDescription:\n\twindow.outerWidth gets the width of the outside of the browser window. It represents the width of the whole browser window including sidebar (if expanded), window chrome and window resizing borders/handles.\n\n\tSyntax:\n\toutWindowWidth = window.outerWidth;\n*/"],
        ["description-window.parent", "/*\n\tDescription:\n\tA reference to the parent of the current window or subframe.\n\n\tSyntax:\n\tparentWindow = window.parent;\n*/"],
        ["description-window.personalbar", "/*\n\tDescription:\n\tReturns the personalbar object, whose visibility can be toggled in the window.\n\n\tSyntax:\n\tobjRef =window.personalbar\n*/"],
        ["description-window.screen", "/*\n\tDescription:\n\tReturns a reference to the screen object associated with the window. The screen object is a special object for inspecting properties of the screen on which the current window is being rendered.\n\n\tSyntax:\n\tscreenObj = window.screen;\n*/"],
        ["description-window.screenX", "/*\n\tDescription:\n\tReturns the horizontal distance of the left border of the user's browser from the left side of the screen.\n\n\tSyntax:\n\tlLoc = window.screenX\n*/"],
        ["description-window.screenY", "/*\n\tDescription:\n\tReturns the vertical distance of the top border of the user's browser from the top edge of the screen.\n\n\tSyntax:\n\tlLoc = window.screenY\n*/"],
        ["description-window.scrollMaxX", "/*\n\tDescription:\n\tReturns the maximum number of pixels that the document can be scrolled horizontally.\n\n\tSyntax:\n\txpix = window.scrollMaxX\n*/"],
        ["description-window.scrollMaxY", "/*\n\tDescription:\n\tReturns the maximum number of pixels that the document can be scrolled vertically.\n\n\tSyntax:\n\typix = window.scrollMaxY\n*/"],
        ["description-window.scrollX", "/*\n\tDescription:\n\tReturns the number of pixels that the document has already been scrolled horizontally.\n\n\tSyntax:\n\tvar x = window.scrollX;\n*/"],
        ["description-window.scrollY", "/*\n\tDescription:\n\tReturns the number of pixels that the document has already been scrolled vertically.\n\n\tSyntax:\n\tvar y = window.scrollY;\n*/"],
        ["description-window.scrollbars", "/*\n\tDescription:\n\tReturns the scrollbars object, whose visibility can checked.\n\n\tSyntax:\n\tobjRef = window.scrollbars\n*/"],
        ["description-window.status", "/*\n\tDescription:\n\tSets the text in the status bar at the bottom of the browser or returns the previously set text.\n\n\tSyntax:\n\twindow.status = string;\nvar value = window.status;\n*/"],
        ["description-window.statusbar", "/*\n\tDescription:\n\tReturns the statusbar object, whose visibility can be toggled in the window.\n\n\tSyntax:\n\tobjRef = window.statusbar\n*/"],
        ["description-window.toolbar", "/*\n\tDescription:\n\tReturns the toolbar object, whose visibility can be toggled in the window.\n\n\tSyntax:\n\tobjRef = window.toolbar\n*/"],
        ["description-window.top", "/*\n\tDescription:\n\tReturns a reference to the topmost window in the window hierarchy.\n\n\tSyntax:\n\tvar topWindow = window.top;\n*/"],
        ["description-window.applicationCache", "/*\n\tDescription:\n\tReturns a reference to the application cache object for the window.\n\n\tSyntax:\n\tcache = window.applicationCache\n*/"],
        ["description-window.menubar", "/*\n\tDescription:\n\tReturns the menubar object, whose visibility can be checked.\n\n\tSyntax:\n\tobjRef = window.menubar\n*/"],
        ["description-Window.alert()", "/*\n\tDescription:\n\tThe Window.alert() method displays an alert dialog with the optional specified content and an OK button.\n\n\tSyntax:\n\twindow.alert(message);\n*/"],
        ["description-window.blur()", "/*\n\tDescription:\n\tShifts focus away from the window.\n\n\tSyntax:\n\twindow.blur()\n*/"],
        ["description-window.clearImmediate()", "/*\n\tDescription:\n\tThis method clears the action specified by window.setImmediate.\n\n\tSyntax:\n\twindow.clearImmediate(immediateID)\n*/"],
        ["description-window.clearInterval()", "/*\n\tDescription:\n\tintervalID is the identifier of the repeated action you want to cancel. This ID is returned from setInterval().\n\n\tSyntax:\n\twindow.clearInterval(intervalID)\n*/"],
        ["description-window.clearTimeout()", "/*\n\tDescription:\n\tRun the script below in the context of a web page and click on the page once. You'll see a message popping up in a second. If you keep clicking on the page once in a second, the alert never appears.\n\n\tSyntax:\n\twindow.clearTimeout(timeoutID)\n*/"],
        ["description-window.close()", "/*\n\tDescription:\n\tCloses the current window, or a referenced window.\n\n\tSyntax:\n\twindow.close();\n*/"],
        ["description-window.decodeURI()", "/*\n\tDescription:\n\tThe decodeURI() function decodes a Uniform Resource Identifier (URI) previously created by encodeURI or by a similar routine.\n\n\tSyntax:\n\tdecodeURI(encodedURI)\n*/"],
        ["description-window.decodeURIComponent()", "/*\n\tDescription:\n\tThe decodeURIComponent() method decodes a Uniform Resource Identifier (URI) component previously created by encodeURIComponent or by a similar routine.\n\n\tSyntax:\n\tdecodeURIComponent(encodedURI)\n*/"],
        ["description-window.dump()", "/*\n\tDescription:\n\tPrints messages to the (native) console.\n\n\tSyntax:\n\twindow.dump(message);\n\ndump(message);\n*/"],
        ["description-window.encodeURI()", "/*\n\tDescription:\n\tThe encodeURI() method encodes a Uniform Resource Identifier (URI) by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two \"surrogate\" characters).\n\n\tSyntax:\n\tencodeURI(URI)\n*/"],
        ["description-window.encodeURIComponent()", "/*\n\tDescription:\n\tThe encodeURIComponent() method encodes a Uniform Resource Identifier (URI) component by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two \"surrogate\" characters).\n\n\tSyntax:\n\tencodeURIComponent(str);\n*/"],
        ["description-window.eval()", "/*\n\tDescription:\n\tThe eval() method evaluates JavaScript code represented as a string.\n\n\tSyntax:\n\teval(string)\n*/"],
        ["description-window.find()", "/*\n\tDescription:\n\tFinds a string in a window.\n\n\tSyntax:\n\twindow.find(aString, aCaseSensitive, aBackwards, aWrapAround, aWholeWord, aSearchInFrames, aShowDialog);\n*/"],
        ["description-window.focus()", "/*\n\tDescription:\n\tMakes a request to bring the window to the front. It may fail due to user settings and the window isn't guaranteed to be frontmost before this method returns.\n\n\tSyntax:\n\twindow.focus()\n*/"],
        ["description-window.getAttention()", "/*\n\tDescription:\n\tAttempts to get the user's attention. How this happens varies based on OS and window manager.\n\n\tSyntax:\n\t/*\n\tAttempts to get the user's attention. How this happens varies based on OS and window manager.\n*/\n*/"],
        ["description-window.getComputedStyle()", "/*\n\tDescription:\n\tThe window.getComputedStyle() method gives the values of all the CSS properties of an element after applying the active stylesheets and resolving any basic computation those values may contain.\n\n\tSyntax:\n\tvar style = window.getComputedStyle(element[, pseudoElt]);\n*/"],
        ["description-window.getDefaultComputedStyle()", "/*\n\tDescription:\n\tgetDefaultComputedStyle() gives the default computed values of all the CSS properties of an element, ignoring author styling.  That is, only user-agent and user styles are taken into account.\n\n\tSyntax:\n\tvar style = window.getDefaultComputedStyle(element[, pseudoElt]);\n*/"],
        ["description-window.getSelection()", "/*\n\tDescription:\n\tReturns a selection object representing the range of text selected by the user.\n\n\tSyntax:\n\tselection = window.getSelection() ;\n*/"],
        ["description-window.importDialog()", "/*\n\tDescription:\n\tBecause opening windows on mobile isn't necessarily appropriate, the Firefox Mobile team designed the importDialog() method to replace window.openDialog(). Instead of opening a new window, it merges the specified XUL dialog into the main window.\n\n\tSyntax:\n\tnewDialog = importDialog(aParent, aSrc, aArguments)\n*/"],
        ["description-window.isFinite()", "/*\n\tDescription:\n\tThe global isFinite() function determines whether the passed value is a finite number. If needed, the parameter is first converted to a number.\n\n\tSyntax:\n\tisFinite(testValue)\n*/"],
        ["description-window.isNaN()", "/*\n\tDescription:\n\tThe isNaN() function determines whether a value is NaN or not. Be careful, this function is broken. You may be interested in Number.isNaN() as defined in ECMAScript 6 or you can use typeof to determine if the value is Not-A-Number.\n\n\tSyntax:\n\tisNaN(testValue)\n*/"],
        ["description-window.matchMedia()", "/*\n\tDescription:\n\tReturns a new MediaQueryList object representing the parsed results of the specified media query string.\n\n\tSyntax:\n\tmql = window.matchMedia(mediaQueryString)\n*/"],
        ["description-window.minimize()", "/*\n\tSets a window to minimized state (a way to undo it programatically is by calling window.moveTo()).\n*/"],
        ["description-window.moveBy()", "/*\n\tDescription:\n\tMoves the current window by a specified amount.\n\n\tSyntax:\n\twindow.moveBy(deltaX, deltaY)\n*/"],
        ["description-window.moveTo()", "/*\n\tDescription:\n\tMoves the window to the specified coordinates.\n\n\tSyntax:\n\twindow.moveTo(x, y)\n*/"],
        ["description-window.open()", "/*\n\tDescription:\n\tLoads a resource into either a new browsing context (such as a window) or one that already exists, depending on the specified parameters.\n\n\tSyntax:\n\tvar windowObjectReference = window.open(strUrl, strWindowName, [strWindowFeatures]);\n*/"],
        ["description-window.openDialog()", "/*\n\tDescription:\n\twindow.openDialog is an extension to window.open. It behaves the same, except that it can optionally take one or more parameters past windowFeatures, and windowFeatures itself is treated a little differently. The optional parameters, if present, will be bundled up in a JavaScript Array object and added to the newly created window as a property named window.arguments. They may be referenced in the JavaScript of the window at any time, including during the execution of a load handler. These parameters may be used, then, to pass arguments to and from the dialog window. Note that the call to openDialog() returns immediately. If you want the call to block until the user has closed the dialog, supply modal as a windowFeatures parameter. Note that this also means the user won't be able to interact with the opener window until he closes the modal dialog.\n\n\tSyntax:\n\tnewWindow = openDialog(url, name, features, arg1, arg2, ...)\n*/"],
        ["description-window.parseFloat()", "/*\n\tDescription:\n\tThe parseFloat() function parses a string argument and returns a floating point number.\n\n\tSyntax:\n\tparseFloat(string)\n*/"],
        ["description-window.parseInt()", "/*\n\tDescription:\n\tThe parseInt() function parses a string argument and returns an integer of the specified radix or base.\n\n\tSyntax:\n\tparseInt(string, radix);\n*/"],
        ["description-window.postMessage()", "/*\n\tDescription:\n\tThe window.postMessage method safely enables cross-origin communication. Normally, scripts on different pages are allowed to access each other if and only if the pages that executed them are at locations with the same protocol (usually both http), port number (80 being the default for http), and host (modulo document.domain being set by both pages to the same value). window.postMessage provides a controlled mechanism to circumvent this restriction in a way which is secure when properly used. The window.postMessage method, when called, causes a MessageEvent to be dispatched at the target window when any pending script that must be executed completes (e.g., remaining event handlers if window.postMessage is called from an event handler, previously-set pending timeouts, etc.) The MessageEvent has the type message, a data property which is set to the value of the first argument provided to window.postMessage, an origin property corresponding to the origin of the main document in the window calling window.postMessage at the time window.postMessage was called, and a source property which is the window from which window.postMessage is called. (Other standard properties of events are present with their expected values.)\n\n\tSyntax:\n\totherWindow.postMessage(message, targetOrigin, [transfer]);\n*/"],
        ["description-window.print()", "/*\n\tDescription:\n\tOpens the Print Dialog to print the current document.\n\n\tSyntax:\n\twindow.print()\n*/"],
        ["description-window.prompt()", "/*\n\tDescription:\n\tThe window.prompt() displays a dialog with an optional message prompting the user to input some text.\n\n\tSyntax:\n\tresult = window.prompt(text, value);\n*/"],
        ["description-window.resizeBy()", "/*\n\tDescription:\n\tResizes the current window by a certain amount.\n\n\tSyntax:\n\twindow.resizeBy(xDelta, yDelta)\n*/"],
        ["description-window.resizeTo()", "/*\n\tDescription:\n\tDynamically resizes window.\n\n\tSyntax:\n\twindow.resizeTo(aWidth, aHeight)\n*/"],
        ["description-window.scroll()", "/*\n\tDescription:\n\tScrolls the window to a particular place in the document.\n\n\tSyntax:\n\twindow.scroll(x-coord,y-coord)\n*/"],
        ["description-window.scrollBy()", "/*\n\tDescription:\n\tScrolls the document in the window by the given amount.\n\n\tSyntax:\n\twindow.scrollBy(X,Y);\n*/"],
        ["description-window.scrollByLines()", "/*\n\tDescription:\n\tScrolls the document by the given number of lines.\n\n\tSyntax:\n\twindow.scrollByLines(lines)\n*/"],
        ["description-window.scrollTo()", "/*\n\tDescription:\n\tScrolls to a particular set of coordinates in the document.\n\n\tSyntax:\n\twindow.scrollTo(x-coord,y-coord )\n*/"],
        ["description-window.setCursor()", "/*\n\tDescription:\n\tChanges the cursor for the current window.\n\n\tSyntax:\n\tfunction setBusyCursor(enable) {\n\t\t  window.setCursor(enable ? \"wait\" : \"auto\");\n\t}\n*/"],
        ["description-window.setInterval()", "/*\n\tDescription:\n\tNote that passing additional parameters to the function in the first syntax does not work in Internet Explorer 9 and below. If you want to enable this functionality on that browser you must use a compatibility code (see the Callback arguments paragraph).\n\n\tSyntax:\n\tvar intervalID = window.setInterval(func, delay[, param1, param2, ...]);\n\tvar intervalID = window.setInterval(code, delay);\n*/"],
        ["description-WindowTimers.setTimeout()", "/*\n\tDescription:\n\tCalls a function or executes a code snippet after a specified delay.\n\n\tSyntax:\n\tvar timeoutID = window.setTimeout(func, delay, [param1, param2, ...]);\n\tvar timeoutID = window.setTimeout(code, delay);\n*/"],
        ["description-window.updateCommands()", "/*\n\tDescription:\n\tUpdates the state of commands of the current chrome window (UI).\n\n\tSyntax:\n\twindow.updateCommands(\"sCommandName\")\n*/"],
        ["description-window.confirm()", "/*\n\tDescription:\n\tThe window.confirm() method displays a modal dialog with an optional message and two buttons, OK and Cancel.\n\n\tSyntax:\n\tresult = window.confirm(message);\n*/"],
        ["description-requestAnimationFrame()", "/*\n\tDescription:\n\tThe requestAnimationFrame function tells the browser that you wish to perform an animation and requests that the browser call a specified function to update an animation before the next repaint. The method takes as an argument a callback to be invoked before the repaint.\n\n\tSyntax:\n\trequestID = window.requestAnimationFrame(callback);       // Firefox 23 / IE 10 / Chrome / Safari 7 (incl. iOS)\n\trequestID = window.mozRequestAnimationFrame(callback);    // Firefox < 23\n\trequestID = window.webkitRequestAnimationFrame(callback); // Older versions of Safari / Chrome\n*/"],
        ["description-window.stop()", "/*\n\tDescription:\n\tThis method stops window loading.\n\n\tSyntax:\n\twindow.stop()\n*/"]
    ]
}