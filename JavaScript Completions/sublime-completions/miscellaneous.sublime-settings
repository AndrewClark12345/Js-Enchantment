{
    "scope": "source.js",

    "completions":
    [
        ["var ", "var "],
        ["let ", "let "],
        ["const ", "const "],
        ["null", "null"],
        ["undefined", "undefined"],
        ["NaN", "NaN"],
        ["Infinity", "Infinity"],
        ["true", "true"],
        ["false", "false"],
        ["continue;", "continue;"],
        ["break;", "break;"],
        ["return", "return"],
        ["'use strict';", "'use strict';"],
        ["new Boolean()", "new Boolean()"],
        ["new Image()", "new Image()"],
        ["new Option()", "new Option()"],
        ["new FormData(${1:form})", "new FormData(${1:form})"],
        ["function with name", "function ${1:function_name} (${2:argument}) {\n\t ${3:// body... } \n}"],
        ["function without name", "function (${1:argument}) {\n\t ${2:/* body... */} \n}"],
        ["anonymous function", ";(function(){\n\t$1\n})();"],
        ["prototype", "${1:class_name}.prototype.${2:method_name} = function(${3:argument}){\n\t ${4:// body... } \n};"],
        ["for()", "for(var i = 0, length1 = ${1:array}.length; i < length1; i++){\n\t${1:array}[i]\n}"],
        ["for-j", "for(var j = 0, length2 = ${1:array}.length; j < length2; j++){\n\t${1:array}[j]\n}"],
        ["for-k", "for(var k = 0, length3 = ${1:array}.length; k < length3; k++){\n\t${1:array}[k]\n}"],
        ["for in", "for (${1:variable} in object) {\n\t${2:// statement}\n}"],
        ["for of", "for (${1:variable} of object) {\n\t${2:// statement}\n}"],
        ["forEach", "${1:array}.forEach( function(${2:element}, ${3:index}) {\n\t${4:// statements}\n});"],
        ["while()", "while (${1:condition}) {\n\t${2:// statement}\n}"],
        ["do while()", "do{\n\t// statement\n} while (${1:condition});"],
        ["if()", "if (${1:condition}) {\n\t${2:// statement}\n}"],
        ["if else", "if (${1:condition}) {\n\t${2:// statement}\n} else {\n\t${3:// statement}\n}"],
        ["else if()", "else if (${1:condition}) {\n\t\n}"],
        ["else", "else {\n\t$1\n}"],
        ["Conditional operator", "(${1:condition}) ? ${2:val1} : ${3:val2};"],
        ["switch()", "switch (${1:expression}) {\n\tcase ${2:label_1}:\n\t\t${3:// statements_1}\n\t\tbreak;\n\tdefault:\n\t\t${4:// statements_def}\n\t\tbreak;\n}"],
        ["try catch", "try {\n\t${1:// statements}\n} catch(e) {\n\t${2:// statements}\n\tconsole.log(e);\n}"],
        ["try catch finally", "try {\n\t${1:// statements}\n} catch(e) {\n\t${2:// statements}\n\tconsole.log(e);\n} finally {\n\t${3:// statements}\n}"],
        ["console.log()", "console.log(${1:''})"],
        ["void()", "void(${1:''})"],
        ["throw", "throw $1"],
        ["ajax request", "var ajax = new XMLHttpRequest();\najax.onreadystatechange = function() {\n\tif (ajax.readyState == 4 && ajax.status == 200) {\n\t\t${1:var response = ajax.responseText;}\n\t}\n};\najax.open(${2:method}, ${3:URL}, ${4:true});\najax.setRequestHeader(\"Content-type\", ${5:\"application/json\"});\najax.send(${6:data});"],
        ["\\u0009", "\\u0009"],
        ["\\u000B", "\\u000B"],
        ["\\u000C", "\\u000C"],
        ["\\u0020", "\\u0020"],
        ["\\u000A", "\\u000A"],
        ["\\u000D", "\\u000D"],
        ["\\u0008", "\\u0008"],
        ["\\u0022", "\\u0022"],
        ["\\u0027", "\\u0027"],
        ["\\u005C", "\\u005C"],
        ["Logical AND (&&)", "${1:expr1} && ${2:expr2}"],
        ["Logical OR (||)", "${1:expr1} || ${2:expr2}"],
        ["Logical NOT (!)", "!${1:expr}"],
        ["Equal (==)", "${1:expr1} == ${2:expr2}"],
        ["Not equal (!=)", "${1:expr1} != ${2:expr2}"],
        ["Strict equal (===)", "${1:expr1} === ${2:expr2}"],
        ["Strict not equal (!==)", "${1:expr1} !=== ${2:expr2}"],
        ["Greater than (>)", "${1:expr1} > ${2:expr2}"],
        ["Greater than or equal (>=)", "${1:expr1} >= ${2:expr2}"],
        ["Less than (<)", "${1:expr1} < ${2:expr2}"],
        ["Less than or equal (<=)", "${1:expr1} <= ${2:expr2}"],
        ["Modulus (%)", "${1:expr1} % ${2:expr2}"],
        ["PostIncrement (expr++)", "${1:expr}++"],
        ["PostDecrement (expr--)", "${1:expr}--"],
        ["PreIncrement (++expr)", "++${1:expr}"],
        ["PreDecrement (--expr)", "--${1:expr}"],
        ["Unary negation (-)", "-${1:expr}"],
        ["Bitwise AND (&)", "${1:expr1} & ${2:expr2}"],
        ["Bitwise OR (|)", "${1:expr1} | ${2:expr2}"],
        ["Bitwise XOR (^)", "${1:expr1} ^ ${2:expr2}"],
        ["Bitwise NOT (~)", "${1:expr1} ~ ${2:expr2}"],
        ["Left shift (<<)", "${1:expr1} << ${2:expr2}"],
        ["Sign-propagating right shift (>>)", "${1:expr1} >> ${2:expr2}"],
        ["Zero-fill right shift (>>>)", "${1:expr1} >>> ${2:expr2}"]
    ]
}